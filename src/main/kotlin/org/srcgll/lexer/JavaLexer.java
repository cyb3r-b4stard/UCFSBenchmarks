/* The following code was generated by JFlex 1.7.0 */

package org.srcgll.lexer;

import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Java.x</tt>
 */
public class JavaLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\42\1\34\1\0\1\42\1\41\16\2\4\0\1\42\1\77"+
    "\1\37\1\0\1\1\1\75\1\62\1\35\1\56\1\57\1\44\1\74"+
    "\1\67\1\20\1\15\1\43\1\4\1\14\2\40\4\12\2\5\1\66"+
    "\1\65\1\63\1\101\1\64\1\70\1\106\1\11\1\13\1\11\1\16"+
    "\1\17\1\16\5\1\1\3\3\1\1\21\7\1\1\10\2\1\1\54"+
    "\1\33\1\55\1\102\1\6\1\0\1\23\1\36\1\52\1\53\1\26"+
    "\1\22\1\51\1\47\1\50\1\1\1\72\1\24\1\73\1\32\1\45"+
    "\1\71\1\1\1\30\1\25\1\27\1\31\1\100\1\105\1\7\1\46"+
    "\1\104\1\60\1\103\1\61\1\76\41\2\2\0\4\1\4\0\1\1"+
    "\2\0\1\2\7\0\1\1\4\0\1\1\5\0\27\1\1\0\37\1"+
    "\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0\1\1\1\0\1\1"+
    "\21\0\160\2\5\1\1\0\2\1\2\0\4\1\1\0\1\1\6\0"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0\123\1\1\0"+
    "\213\1\1\0\5\2\2\0\246\1\1\0\46\1\2\0\1\1\7\0"+
    "\47\1\7\0\1\1\1\0\55\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\1\2\10\0\33\1\5\0\3\1\15\0\6\2\5\0"+
    "\1\1\4\0\13\2\1\0\1\2\3\0\53\1\37\2\4\0\2\1"+
    "\1\2\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2\1\0"+
    "\4\2\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1\1\2"+
    "\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1\11\2"+
    "\2\1\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1\3\2"+
    "\1\1\5\2\22\0\31\1\3\2\4\0\13\1\65\0\25\1\1\0"+
    "\10\1\26\0\60\2\66\1\3\2\1\1\22\2\1\1\7\2\12\1"+
    "\2\2\2\0\12\2\1\0\20\1\3\2\1\0\10\1\2\0\2\1"+
    "\2\0\26\1\1\0\7\1\1\0\1\1\3\0\4\1\2\0\1\2"+
    "\1\1\7\2\2\0\2\2\2\0\3\2\1\1\10\0\1\2\4\0"+
    "\2\1\1\0\3\1\2\2\2\0\12\2\4\1\7\0\2\1\4\0"+
    "\3\2\1\0\6\1\4\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\2\0\1\2\1\0\5\2\4\0"+
    "\2\2\2\0\3\2\3\0\1\2\7\0\4\1\1\0\1\1\7\0"+
    "\14\2\3\1\1\2\13\0\3\2\1\0\11\1\1\0\3\1\1\0"+
    "\26\1\1\0\7\1\1\0\2\1\1\0\5\1\2\0\1\2\1\1"+
    "\10\2\1\0\3\2\1\0\3\2\2\0\1\1\17\0\2\1\2\2"+
    "\2\0\12\2\1\0\1\1\7\0\1\1\6\2\1\0\3\2\1\0"+
    "\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0"+
    "\5\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\10\0"+
    "\2\2\4\0\2\1\1\0\3\1\2\2\2\0\12\2\1\0\1\1"+
    "\20\0\1\2\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\14\1\4\0\5\2\3\0\3\2\1\0\4\2\2\0\1\1\6\0"+
    "\1\2\16\0\12\2\11\0\1\1\6\0\4\2\1\0\10\1\1\0"+
    "\3\1\1\0\27\1\1\0\20\1\3\0\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\7\0\2\2\1\0\3\1\5\0\2\1\2\2\2\0"+
    "\12\2\20\0\1\1\3\2\1\0\10\1\1\0\3\1\1\0\27\1"+
    "\1\0\12\1\1\0\5\1\2\0\1\2\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\7\0\2\2\7\0\1\1\1\0\2\1\2\2\2\0"+
    "\12\2\1\0\2\1\15\0\4\2\1\0\10\1\1\0\3\1\1\0"+
    "\51\1\2\2\1\1\7\2\1\0\3\2\1\0\4\2\1\1\5\0"+
    "\3\1\1\2\7\0\3\1\2\2\2\0\12\2\12\0\6\1\2\0"+
    "\2\2\1\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\3\0\1\2\4\0\6\2\1\0\1\2\1\0\10\2\6\0"+
    "\12\2\2\0\2\2\15\0\60\1\1\2\2\1\7\2\4\0\10\1"+
    "\10\2\1\0\12\2\47\0\2\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0\3\1\1\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\2\2\1\6\2"+
    "\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0\6\2\2\0"+
    "\12\2\2\0\4\1\40\0\1\1\27\0\2\2\6\0\12\2\13\0"+
    "\1\2\1\0\1\2\1\0\1\2\4\0\2\2\10\1\1\0\44\1"+
    "\4\0\24\2\1\0\2\2\5\1\13\2\1\0\44\2\11\0\1\2"+
    "\71\0\53\1\24\2\1\1\12\2\6\0\6\1\4\2\4\1\3\2"+
    "\1\1\3\2\2\1\7\2\3\1\4\2\15\1\14\2\1\1\17\2"+
    "\2\0\46\1\1\0\1\1\5\0\1\1\2\0\53\1\1\0\u014d\1"+
    "\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0\51\1"+
    "\1\0\4\1\2\0\41\1\1\0\4\1\2\0\7\1\1\0\1\1"+
    "\1\0\4\1\2\0\17\1\1\0\71\1\1\0\4\1\2\0\103\1"+
    "\2\0\3\2\40\0\20\1\20\0\126\1\2\0\6\1\3\0\u026c\1"+
    "\2\0\21\1\1\0\32\1\5\0\113\1\3\0\13\1\7\0\15\1"+
    "\1\0\4\1\3\2\13\0\22\1\3\2\13\0\22\1\2\2\14\0"+
    "\15\1\1\0\3\1\1\0\2\2\14\0\64\1\40\2\3\0\1\1"+
    "\3\0\2\1\1\2\2\0\12\2\41\0\4\2\1\0\12\2\6\0"+
    "\130\1\10\0\5\1\2\2\42\1\1\2\1\1\5\0\106\1\12\0"+
    "\37\1\1\0\14\2\4\0\14\2\12\0\12\2\36\1\2\0\5\1"+
    "\13\0\54\1\4\0\32\1\6\0\12\2\46\0\27\1\5\2\4\0"+
    "\65\1\12\2\1\0\35\2\2\0\13\2\6\0\12\2\15\0\1\1"+
    "\10\0\16\2\102\0\5\2\57\1\21\2\7\1\4\0\12\2\21\0"+
    "\11\2\14\0\3\2\36\1\15\2\2\1\12\2\54\1\16\2\14\0"+
    "\44\1\24\2\10\0\12\2\3\0\3\1\12\2\44\1\2\0\11\1"+
    "\107\0\3\2\1\0\25\2\4\1\1\2\4\1\3\2\2\1\3\2"+
    "\6\0\300\1\72\2\1\0\5\2\u0116\1\2\0\6\1\2\0\46\1"+
    "\2\0\6\1\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\37\1\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1"+
    "\1\0\7\1\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1"+
    "\1\0\7\1\16\0\5\2\32\0\5\2\20\0\2\1\23\0\1\1"+
    "\13\0\5\2\1\0\12\2\1\0\1\1\15\0\1\1\20\0\15\1"+
    "\3\0\40\1\20\0\15\2\4\0\1\2\3\0\14\2\21\0\1\1"+
    "\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1"+
    "\5\0\5\1\4\0\1\1\21\0\51\1\u0a77\0\57\1\1\0\57\1"+
    "\1\0\205\1\6\0\4\1\3\2\2\1\14\0\46\1\1\0\1\1"+
    "\5\0\1\1\2\0\70\1\7\0\1\1\17\0\1\2\27\1\11\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0\1\1\u01d5\0"+
    "\3\1\31\0\11\1\6\2\1\0\5\1\2\0\5\1\4\0\126\1"+
    "\2\0\2\2\2\0\3\1\1\0\132\1\1\0\4\1\5\0\52\1"+
    "\2\0\136\1\21\0\33\1\65\0\20\1\u0200\0\u19b6\1\112\0\u51eb\1"+
    "\25\0\u048d\1\103\0\56\1\2\0\u010d\1\3\0\20\1\12\2\2\1"+
    "\24\0\57\1\1\2\4\0\12\2\1\0\37\1\2\2\120\1\2\2"+
    "\45\0\11\1\2\0\147\1\2\0\44\1\1\0\10\1\77\0\13\1"+
    "\1\2\3\1\1\2\4\1\1\2\27\1\5\2\20\0\1\1\7\0"+
    "\64\1\14\0\2\2\62\1\22\2\12\0\12\2\6\0\22\2\6\1"+
    "\3\0\1\1\1\0\1\1\2\0\12\2\34\1\10\2\2\0\27\1"+
    "\15\2\14\0\35\1\3\0\4\2\57\1\16\2\16\0\1\1\12\2"+
    "\6\0\5\1\1\2\12\1\12\2\5\1\1\0\51\1\16\2\11\0"+
    "\3\1\1\2\10\1\2\2\2\0\12\2\6\0\27\1\3\0\1\1"+
    "\3\2\62\1\1\2\1\1\3\2\2\1\2\2\5\1\2\2\1\1"+
    "\1\2\1\1\30\0\3\1\2\0\13\1\5\2\2\0\3\1\2\2"+
    "\12\0\6\1\2\0\6\1\2\0\6\1\11\0\7\1\1\0\7\1"+
    "\1\0\53\1\1\0\12\1\12\0\163\1\10\2\1\0\2\2\2\0"+
    "\12\2\6\0\u2ba4\1\14\0\27\1\4\0\61\1\u2104\0\u016e\1\2\0"+
    "\152\1\46\0\7\1\14\0\5\1\5\0\1\1\1\2\12\1\1\0"+
    "\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0\2\1\1\0"+
    "\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0\15\1\3\0"+
    "\20\2\20\0\20\2\3\0\2\1\30\0\3\1\31\0\1\1\6\0"+
    "\5\1\1\0\207\1\2\0\1\2\4\0\1\1\13\0\12\2\7\0"+
    "\32\1\4\0\1\1\1\0\32\1\13\0\131\1\3\0\6\1\2\0"+
    "\6\1\2\0\6\1\2\0\3\1\3\0\2\1\3\0\2\1\22\0"+
    "\3\2\4\0\14\1\1\0\32\1\1\0\23\1\1\0\2\1\1\0"+
    "\17\1\2\0\16\1\42\0\173\1\105\0\65\1\210\0\1\2\202\0"+
    "\35\1\3\0\61\1\17\0\1\2\37\0\40\1\15\0\36\1\5\0"+
    "\46\1\5\2\5\0\36\1\2\0\44\1\4\0\10\1\1\0\5\1"+
    "\52\0\236\1\2\0\12\2\6\0\44\1\4\0\44\1\4\0\50\1"+
    "\10\0\64\1\234\0\u0137\1\11\0\26\1\12\0\10\1\230\0\6\1"+
    "\2\0\1\1\1\0\54\1\1\0\2\1\3\0\1\1\2\0\27\1"+
    "\12\0\27\1\11\0\37\1\101\0\23\1\1\0\2\1\12\0\26\1"+
    "\12\0\32\1\106\0\70\1\6\0\2\1\100\0\1\1\3\2\1\0"+
    "\2\2\5\0\4\2\4\1\1\0\3\1\1\0\33\1\4\0\3\2"+
    "\4\0\1\2\40\0\35\1\3\0\35\1\43\0\10\1\1\0\34\1"+
    "\2\2\31\0\66\1\12\0\26\1\12\0\23\1\15\0\22\1\156\0"+
    "\111\1\67\0\63\1\15\0\63\1\u030d\0\3\2\65\1\17\2\37\0"+
    "\12\2\17\0\4\2\55\1\13\2\2\0\1\2\22\0\31\1\7\0"+
    "\12\2\6\0\3\2\44\1\16\2\1\0\12\2\20\0\43\1\1\2"+
    "\2\0\1\1\11\0\3\2\60\1\16\2\4\1\5\0\3\2\3\0"+
    "\12\2\1\1\1\0\1\1\43\0\22\1\1\0\31\1\14\2\6\0"+
    "\1\2\101\0\7\1\1\0\1\1\1\0\4\1\1\0\17\1\1\0"+
    "\12\1\7\0\57\1\14\2\5\0\12\2\6\0\4\2\1\0\10\1"+
    "\2\0\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\5\1"+
    "\2\0\1\2\1\1\7\2\2\0\2\2\2\0\3\2\2\0\1\1"+
    "\6\0\1\2\5\0\5\1\2\2\2\0\7\2\3\0\5\2\213\0"+
    "\65\1\22\2\4\1\5\0\12\2\46\0\60\1\24\2\2\1\1\0"+
    "\1\1\10\0\12\2\246\0\57\1\7\2\2\0\11\2\27\0\4\1"+
    "\2\2\42\0\60\1\21\2\3\0\1\1\13\0\12\2\46\0\53\1"+
    "\15\2\10\0\12\2\66\0\32\1\3\0\17\2\4\0\12\2\u0166\0"+
    "\100\1\12\2\25\0\1\1\u0100\0\1\1\12\2\50\1\7\2\1\1"+
    "\4\2\10\0\1\2\10\0\1\1\13\2\50\1\2\0\4\1\20\2"+
    "\46\0\71\1\u0107\0\11\1\1\0\45\1\10\2\1\0\10\2\1\1"+
    "\17\0\12\2\30\0\36\1\2\0\26\2\1\0\16\2\111\0\7\1"+
    "\1\0\2\1\1\0\46\1\6\2\3\0\1\2\1\0\2\2\1\0"+
    "\7\2\1\1\1\2\10\0\12\2\u02a6\0\u039a\1\146\0\157\1\21\0"+
    "\304\1\u0abc\0\u042f\1\u0fd1\0\u0247\1\u21b9\0\u0239\1\7\0\37\1\1\0"+
    "\12\2\146\0\36\1\2\0\5\2\13\0\60\1\7\2\11\0\4\1"+
    "\14\0\12\2\11\0\25\1\5\0\23\1\u0370\0\105\1\13\0\1\1"+
    "\56\2\20\0\4\2\15\1\100\0\2\1\36\0\u17ed\1\23\0\u02f3\1"+
    "\u250d\0\u011f\1\121\0\u018c\1\u0904\0\153\1\5\0\15\1\3\0\11\1"+
    "\7\0\12\1\3\0\2\2\1\0\4\2\u14c1\0\5\2\3\0\26\2"+
    "\2\0\7\2\36\0\4\2\224\0\3\2\u01bb\0\125\1\1\0\107\1"+
    "\1\0\2\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0\14\1"+
    "\1\0\1\1\1\0\7\1\1\0\101\1\1\0\4\1\2\0\10\1"+
    "\1\0\7\1\1\0\34\1\1\0\4\1\1\0\5\1\1\0\1\1"+
    "\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0\31\1\1\0\37\1"+
    "\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0\31\1"+
    "\1\0\37\1\1\0\31\1\1\0\10\1\2\0\62\2\u0200\0\67\2"+
    "\4\0\62\2\10\0\1\2\16\0\1\2\26\0\5\2\1\0\17\2"+
    "\u0550\0\7\2\1\0\21\2\2\0\7\2\1\0\2\2\1\0\5\2"+
    "\u07d5\0\305\1\13\0\7\2\51\0\104\1\7\2\5\0\12\2\u04a6\0"+
    "\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0\1\1\1\0"+
    "\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0\1\1\4\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0\7\1\1\0"+
    "\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0\21\1\5\0"+
    "\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0\u1035\1\13\0"+
    "\336\1\2\0\u1682\1\16\0\u1d31\1\u0c1f\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\10\1\1\5\1\0"+
    "\1\1\1\0\1\5\1\6\1\7\3\1\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\1\1\25\1\26\1\27\1\30"+
    "\1\1\1\31\1\32\1\33\1\1\1\34\2\2\3\0"+
    "\2\35\1\0\1\2\1\0\1\35\1\0\1\36\1\37"+
    "\1\40\25\1\2\0\3\1\1\0\1\41\1\0\1\42"+
    "\1\43\1\44\7\1\1\45\1\46\1\47\1\0\1\50"+
    "\1\0\1\51\1\52\3\1\1\53\1\54\1\55\1\56"+
    "\1\1\1\57\1\60\1\61\1\62\1\1\1\2\1\0"+
    "\1\2\3\0\1\63\2\1\1\64\17\1\1\65\4\1"+
    "\1\66\1\1\1\67\2\0\3\1\3\0\1\1\1\70"+
    "\10\1\1\71\1\0\1\72\7\1\4\0\1\35\2\0"+
    "\4\1\1\73\7\1\1\74\1\75\1\1\1\76\1\1"+
    "\1\77\2\1\1\100\2\1\1\101\2\0\1\5\4\1"+
    "\1\102\4\1\1\103\2\1\1\104\5\1\1\105\1\1"+
    "\2\0\1\106\1\107\4\1\1\110\1\1\1\111\3\1"+
    "\1\112\2\1\1\113\1\1\1\0\4\1\1\114\1\115"+
    "\1\107\10\1\1\116\1\1\1\117\1\1\1\120\2\1"+
    "\1\121\2\1\1\122\1\123\1\124\1\1\1\0\3\1"+
    "\1\125\2\1\1\126\3\1\1\127\1\1\1\130\3\1"+
    "\1\131\1\1\1\132\4\1\1\133\1\134\1\1\1\135"+
    "\1\1\1\136\1\137\5\1\1\140\1\1\1\141\1\1"+
    "\1\142\1\1\1\143\1\1\1\144\1\1\1\145\1\146"+
    "\1\1\1\147";

  private static int [] zzUnpackAction() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u06a8\0\u06ef"+
    "\0\u0736\0\u03e2\0\u077d\0\u03e2\0\u03e2\0\u07c4\0\u080b\0\u0852"+
    "\0\u03e2\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u03e2"+
    "\0\u03e2\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u03e2\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u03e2\0\u03e2\0\u03e2\0\u0d09"+
    "\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u03e2\0\u1486\0\u03e2\0\u03e2\0\107\0\u14cd"+
    "\0\u1514\0\u155b\0\u15a2\0\u15e9\0\u1630\0\u1677\0\u16be\0\u03e2"+
    "\0\u03e2\0\u1705\0\u03e2\0\u174c\0\u03e2\0\u03e2\0\u1793\0\u17da"+
    "\0\u1821\0\u03e2\0\u03e2\0\u03e2\0\u03e2\0\u1868\0\u03e2\0\u03e2"+
    "\0\u03e2\0\u03e2\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u03e2\0\u1aa0\0\u1ae7\0\107\0\u1b2e\0\u1b75\0\u1bbc"+
    "\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4"+
    "\0\u1e3b\0\u1e82\0\u1ec9\0\u1f10\0\107\0\u1f57\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\107\0\u2073\0\u03e2\0\u20ba\0\u2101\0\u2148\0\u218f"+
    "\0\u21d6\0\u221d\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\u249c\0\u24e3\0\u252a\0\u2571\0\u03e2\0\u25b8"+
    "\0\u03e2\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9"+
    "\0\u27f0\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\u2ab6\0\107\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2"+
    "\0\u2c19\0\u2c60\0\u2ca7\0\107\0\107\0\u2cee\0\107\0\u2d35"+
    "\0\107\0\u2d7c\0\u2dc3\0\107\0\u2e0a\0\u2e51\0\107\0\u2e98"+
    "\0\u2edf\0\u2264\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\107\0\u3042"+
    "\0\u3089\0\u30d0\0\u3117\0\107\0\u315e\0\u31a5\0\u03e2\0\u31ec"+
    "\0\u3233\0\u327a\0\u32c1\0\u3308\0\107\0\u334f\0\u3396\0\u33dd"+
    "\0\107\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\107\0\u3587"+
    "\0\107\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea\0\u3731\0\107"+
    "\0\u3778\0\u37bf\0\u3806\0\u384d\0\u3894\0\u38db\0\107\0\107"+
    "\0\107\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\107\0\u3b5a\0\107\0\u3ba1\0\107\0\u3be8\0\u3c2f"+
    "\0\107\0\u3c76\0\u3cbd\0\107\0\107\0\107\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u3dd9\0\u3e20\0\107\0\u3e67\0\u3eae\0\107\0\u3ef5"+
    "\0\u3f3c\0\u3f83\0\107\0\u3fca\0\107\0\u4011\0\u4058\0\u409f"+
    "\0\107\0\u40e6\0\107\0\u412d\0\u4174\0\u41bb\0\u4202\0\107"+
    "\0\107\0\u4249\0\107\0\u4290\0\107\0\107\0\u42d7\0\u431e"+
    "\0\u4365\0\u43ac\0\u43f3\0\107\0\u443a\0\107\0\u4481\0\107"+
    "\0\u44c8\0\107\0\u450f\0\107\0\u4556\0\107\0\107\0\u459d"+
    "\0\107";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\0\1\2\1\3\1\4\4\2\1\4"+
    "\1\2\1\4\1\5\2\2\1\6\1\2\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\2\1\16\1\0"+
    "\1\17\1\20\1\21\1\22\1\4\1\23\1\17\1\24"+
    "\1\25\3\2\1\26\1\2\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\2\2\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\2\1\57\1\60"+
    "\1\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\4\0\1\61\1\62\1\0\1\63\2\64"+
    "\1\0\1\62\1\65\1\62\1\66\1\67\1\70\2\0"+
    "\1\67\1\0\1\61\1\0\1\70\7\0\1\65\1\0"+
    "\1\62\12\0\1\67\36\0\1\61\2\71\1\72\3\0"+
    "\1\71\1\0\1\71\1\66\1\67\1\70\2\0\1\67"+
    "\1\0\1\61\1\0\1\70\11\0\1\71\12\0\1\67"+
    "\37\0\2\73\4\0\1\73\1\0\1\73\1\74\22\0"+
    "\1\73\66\0\1\75\43\0\1\76\14\0\1\77\6\0"+
    "\14\2\1\0\2\2\1\0\2\2\1\100\1\101\6\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\102\2\2\1\103"+
    "\3\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\4\2\1\104\5\2\3\0"+
    "\1\105\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\1\106\6\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\6\2\1\107\1\2\1\110\1\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\2\1\111\1\112"+
    "\4\2\15\0\3\2\4\0\1\2\3\0\1\2\1\113"+
    "\2\0\6\2\1\114\5\2\1\0\2\2\1\0\3\2"+
    "\1\115\5\2\1\116\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\7\2\1\117\2\2\3\0"+
    "\1\2\1\0\1\2\4\0\2\2\1\120\4\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\5\2\1\121\4\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\2\2\1\122"+
    "\2\2\1\123\2\2\1\124\1\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\110\0\33\125\1\126\2\0\3\125\1\0\45\125"+
    "\1\0\14\2\1\0\2\2\1\0\7\2\1\127\2\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\130\1\131\5\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\1\0\33\22"+
    "\1\132\1\0\2\22\1\133\1\22\1\0\45\22\34\0"+
    "\1\17\116\0\1\134\34\0\1\135\106\0\1\136\6\0"+
    "\14\2\1\0\2\2\1\0\1\2\1\137\7\2\1\140"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\2\2"+
    "\1\141\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\2\2\1\142\1\143\6\2\3\0\1\2"+
    "\1\0\1\2\4\0\1\144\1\2\1\145\4\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\5\2\1\146\4\2\3\0\1\2\1\0"+
    "\1\2\4\0\1\147\6\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\63\0\1\150\16\0\1\151\70\0\1\152"+
    "\15\0\1\153\71\0\1\154\14\0\1\155\73\0\1\156"+
    "\21\0\14\2\1\0\2\2\1\0\2\2\1\157\4\2"+
    "\1\160\1\161\1\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\75\0"+
    "\1\162\4\0\1\163\106\0\1\164\106\0\1\165\6\0"+
    "\14\2\1\0\2\2\1\0\12\2\3\0\1\2\1\0"+
    "\1\2\4\0\1\166\6\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\102\0\1\167\106\0\1\170\106\0\1\171"+
    "\1\0\1\172\4\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\2\2\1\173\4\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\4\0\1\61"+
    "\1\62\1\0\1\63\3\0\1\62\1\0\1\62\7\0"+
    "\1\61\13\0\1\62\52\0\1\62\1\0\1\63\3\0"+
    "\1\62\1\0\1\62\23\0\1\62\52\0\2\174\3\0"+
    "\4\174\1\175\2\174\2\0\2\174\2\0\1\174\7\0"+
    "\1\174\1\0\1\174\11\0\2\174\37\0\1\176\7\0"+
    "\1\176\76\0\2\73\4\0\1\73\1\0\1\73\1\0"+
    "\1\67\1\177\2\0\1\67\3\0\1\177\11\0\1\73"+
    "\12\0\1\67\37\0\2\200\4\0\1\200\1\0\1\200"+
    "\3\0\1\201\17\0\1\200\33\0\1\201\15\0\1\61"+
    "\2\71\1\72\3\0\1\71\1\0\1\71\7\0\1\61"+
    "\13\0\1\71\52\0\2\71\1\72\3\0\1\71\1\0"+
    "\1\71\23\0\1\71\64\0\1\67\1\177\2\0\1\67"+
    "\3\0\1\177\24\0\1\67\50\0\1\202\72\0\14\2"+
    "\1\0\2\2\1\0\3\2\1\203\6\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\204\6\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\7\2\1\205\2\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\11\2\1\206"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\4\2\1\207\5\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\4\2\1\210\5\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\11\2\1\211\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\2\2\1\212\4\2\1\213"+
    "\2\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\1\214\2\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\11\2\1\215\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\1\216\6\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\217\3\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\6\2"+
    "\1\220\3\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\4\2\1\221\5\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\10\2"+
    "\1\222\1\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\2\2\1\223\5\2\1\224\1\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\2\1\225\5\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\7\2\1\226\2\2\3\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\227\3\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\6\2\1\230\3\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\231\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\1\2\1\232\2\0"+
    "\14\2\1\0\2\2\1\0\3\2\1\233\6\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\36\0\1\234\55\0\1\235\5\0"+
    "\1\236\1\0\1\235\5\0\1\125\4\0\2\125\1\0"+
    "\2\125\1\0\3\125\1\235\47\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\237\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\1\240\6\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\6\2\1\241\3\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\5\0"+
    "\1\22\5\0\1\22\1\0\1\22\5\0\1\22\4\0"+
    "\2\22\1\242\2\22\1\0\4\22\46\0\44\243\1\244"+
    "\42\243\1\0\14\2\1\0\2\2\1\0\4\2\1\245"+
    "\1\2\1\246\3\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\12\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\1\247\2\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\4\2"+
    "\1\250\1\2\1\251\3\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\2\2\1\252\7\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\11\2\1\253\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\2\2\1\254\7\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\1\2\1\255\10\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\10\2\1\256\1\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\102\0\1\257\71\0\1\260\14\0"+
    "\1\261\6\0\14\2\1\0\2\2\1\0\12\2\3\0"+
    "\1\2\1\0\1\2\4\0\5\2\1\262\1\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\1\263\2\2\1\264\3\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\265\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\3\2\1\266\6\2\3\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\267\3\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\3\2\1\270\3\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\4\0\1\61"+
    "\2\174\1\271\2\0\4\174\1\272\2\174\1\0\1\177"+
    "\2\174\1\61\1\0\1\174\7\0\1\174\1\0\1\174"+
    "\11\0\2\174\15\0\1\177\21\0\2\273\3\0\4\273"+
    "\1\0\2\273\2\0\2\273\2\0\1\273\7\0\1\273"+
    "\1\0\1\273\11\0\2\273\36\0\1\61\1\176\1\0"+
    "\1\274\5\0\1\176\7\0\1\61\66\0\2\275\4\0"+
    "\1\275\1\0\1\275\3\0\1\276\17\0\1\275\33\0"+
    "\1\276\16\0\2\200\1\277\3\0\1\200\1\0\1\200"+
    "\1\0\1\67\3\0\1\67\15\0\1\200\12\0\1\67"+
    "\37\0\2\200\4\0\1\200\1\0\1\200\23\0\1\200"+
    "\47\0\14\2\1\0\2\2\1\0\4\2\1\224\5\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\2\2\1\300\7\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\2\2\1\301\7\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\302\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\303\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\4\2"+
    "\1\304\2\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\305\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\3\2"+
    "\1\306\3\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\5\2\1\307\4\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\310\1\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\7\2\1\311\2\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\6\2\1\312\3\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\5\2\1\313\4\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\314\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\2\2\1\315\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\11\2\1\316\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\5\2\1\317\4\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\320\6\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\4\2\1\321\5\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\10\2\1\322"+
    "\1\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\3\2\1\323\3\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\3\2\1\324"+
    "\6\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\5\0\1\236\5\0"+
    "\1\236\1\0\1\236\20\0\1\234\2\0\1\236\52\0"+
    "\1\125\5\0\1\125\1\0\1\125\20\0\1\234\2\0"+
    "\1\125\47\0\14\2\1\0\2\2\1\0\2\2\1\325"+
    "\7\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\3\2\1\326\6\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\327"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\5\0\2\330\3\0"+
    "\4\330\1\0\2\330\2\0\2\330\2\0\1\330\2\0"+
    "\1\242\4\0\1\330\1\0\1\330\11\0\2\330\33\0"+
    "\44\243\1\331\105\243\1\332\1\331\42\243\1\0\14\2"+
    "\1\0\2\2\1\0\6\2\1\333\3\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\5\2"+
    "\1\334\4\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\3\2\1\335\6\2\3\0\1\2"+
    "\1\0\1\2\4\0\1\336\6\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\5\2\1\337\4\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\12\2\3\0\1\2\1\0"+
    "\1\2\4\0\5\2\1\340\1\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\4\2\1\341\5\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\4\2\1\342\1\2\1\343"+
    "\3\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\7\2\1\344\2\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\2\2\1\345"+
    "\7\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\346\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\102\0"+
    "\1\347\6\0\14\2\1\0\2\2\1\0\12\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\1\2\1\350"+
    "\1\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\6\2\1\351\3\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\12\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\352\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\3\2\1\353\6\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\2\2\1\354\7\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\6\2\1\355"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\3\2\1\356\6\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\5\0\2\174\1\271\2\0\4\174\1\0"+
    "\2\174\2\0\2\174\2\0\1\174\7\0\1\174\1\0"+
    "\1\174\11\0\2\174\37\0\2\273\3\0\4\273\1\0"+
    "\2\273\1\0\1\177\2\273\2\0\1\273\7\0\1\273"+
    "\1\0\1\273\11\0\2\273\15\0\1\177\21\0\2\273"+
    "\1\357\2\0\4\273\1\0\2\273\1\0\1\177\2\273"+
    "\2\0\1\273\7\0\1\273\1\0\1\273\11\0\2\273"+
    "\15\0\1\177\21\0\1\176\1\0\1\274\5\0\1\176"+
    "\76\0\2\275\1\360\3\0\1\275\1\0\1\275\1\0"+
    "\1\67\3\0\1\67\15\0\1\275\12\0\1\67\37\0"+
    "\2\275\4\0\1\275\1\0\1\275\23\0\1\275\52\0"+
    "\2\200\1\277\3\0\1\200\1\0\1\200\23\0\1\200"+
    "\47\0\14\2\1\0\2\2\1\0\6\2\1\361\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\3\2\1\362\6\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\7\2\1\363\2\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\7\2\1\364\2\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\365\3\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\366\1\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\7\2\1\367\2\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\2\2"+
    "\1\370\4\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\371\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\12\2\3\0\1\2\1\0\1\2\4\0\5\2"+
    "\1\372\1\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\11\2\1\373\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\4\2\1\374\5\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\12\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\1\2\1\375\2\0\14\2\1\0\2\2\1\0\7\2"+
    "\1\376\2\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\377\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\1\2\1\u0100\1\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\u0101\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\5\0\2\u0102\3\0\4\u0102\1\0\2\u0102\2\0\2\u0102"+
    "\2\0\1\u0102\7\0\1\u0102\1\0\1\u0102\11\0\2\u0102"+
    "\33\0\43\243\1\17\1\331\42\243\1\0\14\2\1\0"+
    "\2\2\1\0\2\2\1\u0103\7\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\7\2\1\u0104"+
    "\2\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\5\2\1\u0105\4\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\7\2\1\u0106"+
    "\2\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\2\2\1\u0107\4\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\4\2\1\u0108"+
    "\5\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\6\2\1\u0109\3\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\12\2\3\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u010a\3\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\10\2\1\u010b\1\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\3\2\1\u010c"+
    "\6\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\2\2\1\u010d\7\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u010e"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\2\2\1\u010f\7\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\12\2\3\0"+
    "\1\2\1\0\1\2\4\0\3\2\1\u0110\3\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\6\2\1\u0111\3\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u0112"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\5\0\2\273\1\357"+
    "\2\0\4\273\1\0\2\273\2\0\2\273\2\0\1\273"+
    "\7\0\1\273\1\0\1\273\11\0\2\273\37\0\2\275"+
    "\1\360\3\0\1\275\1\0\1\275\23\0\1\275\47\0"+
    "\14\2\1\0\2\2\1\0\3\2\1\u0113\6\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\6\2\1\u0114\3\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\2\2\1\u0115\7\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\5\2\1\u0116"+
    "\1\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\6\2\1\u0117\3\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\7\2\1\u0118\2\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\12\2\3\0\1\2\1\0"+
    "\1\2\4\0\2\2\1\u0119\4\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\6\2\1\u011a"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\3\2\1\u011b\3\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\4\2"+
    "\1\u011c\5\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\11\2\1\u011d\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u011e"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\2\2\1\u011f\7\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\5\0\2\u0120\3\0\4\u0120\1\0\2\u0120\2\0"+
    "\2\u0120\2\0\1\u0120\7\0\1\u0120\1\0\1\u0120\11\0"+
    "\2\u0120\34\0\14\2\1\0\2\2\1\0\11\2\1\u0121"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\1\2\1\u0122\10\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\2\2\1\u0123\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\6\2\1\u0124\3\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\11\2\1\u0125\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\3\2"+
    "\1\u0126\6\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\5\2\1\u0127\4\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\4\2\1\u0128\2\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u0129\1\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\6\2"+
    "\1\u012a\3\2\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\5\2\1\u012b\1\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\3\2\1\u012c\3\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\1\2\1\u012d\5\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\5\2\1\u012e\1\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\1\2\1\u012f\10\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\3\2\4\0\1\2"+
    "\3\0\2\2\2\0\14\2\1\0\2\2\1\0\12\2"+
    "\3\0\1\2\1\0\1\2\4\0\1\u0130\6\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\4\2\1\u0131\5\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u0132"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\11\2\1\u0133\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\5\0\2\22\3\0\4\22\1\0\2\22\2\0\2\22"+
    "\2\0\1\22\7\0\1\22\1\0\1\22\11\0\2\22"+
    "\34\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\5\2\1\u0134\1\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\2\2\1\u0135\7\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\5\2\1\u0136\4\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\10\2\1\u0137\1\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\u0138\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\u0139\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\6\2\1\u013a\3\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\u013b\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\3\2\1\u013c\6\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\6\2\1\u013d\3\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\7\2\15\0\1\u013e\2\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\11\2\1\u013f\3\0\1\2\1\0\1\2\4\0\7\2"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\11\2\1\u0140\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u0141"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\5\2\1\u0142\1\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\11\2\1\u0143"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\u0144\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\5\2\1\u0145\4\2"+
    "\3\0\1\2\1\0\1\2\4\0\7\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\5\2\1\u0146\4\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\3\2\1\u0147\3\2\15\0\3\2"+
    "\4\0\1\2\3\0\2\2\2\0\14\2\1\0\2\2"+
    "\1\0\6\2\1\u0148\3\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\2\0\14\2\1\0\2\2\1\0\12\2\3\0\1\2"+
    "\1\0\1\2\4\0\1\u0149\6\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\5\2\1\u014a\4\2\3\0\1\2\1\0\1\2\4\0"+
    "\7\2\15\0\3\2\4\0\1\2\3\0\2\2\2\0"+
    "\14\2\1\0\2\2\1\0\6\2\1\u014b\3\2\3\0"+
    "\1\2\1\0\1\2\4\0\7\2\15\0\3\2\4\0"+
    "\1\2\3\0\2\2\2\0\14\2\1\0\2\2\1\0"+
    "\12\2\3\0\1\2\1\0\1\2\4\0\6\2\1\u014c"+
    "\15\0\3\2\4\0\1\2\3\0\2\2\2\0\14\2"+
    "\1\0\2\2\1\0\12\2\3\0\1\2\1\0\1\2"+
    "\4\0\7\2\15\0\3\2\4\0\1\2\3\0\1\u014d"+
    "\1\2\2\0\14\2\1\0\2\2\1\0\1\2\1\u014e"+
    "\10\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\4\2\1\u014f\5\2\3\0\1\2\1\0"+
    "\1\2\4\0\7\2\15\0\3\2\4\0\1\2\3\0"+
    "\2\2\2\0\14\2\1\0\2\2\1\0\5\2\1\u0150"+
    "\4\2\3\0\1\2\1\0\1\2\4\0\7\2\15\0"+
    "\3\2\4\0\1\2\3\0\2\2\2\0\14\2\1\0"+
    "\2\2\1\0\12\2\3\0\1\2\1\0\1\2\4\0"+
    "\6\2\1\u0151\15\0\3\2\4\0\1\2\3\0\2\2"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17892];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\15\1\1\11\1\0\1\1\1\0\6\1\6\11"+
    "\3\1\1\11\1\1\2\11\3\1\1\11\6\1\2\11"+
    "\1\1\3\0\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\3\11\25\1\2\0\3\1\1\0\1\11\1\0"+
    "\2\11\11\1\2\11\1\0\1\11\1\0\2\11\3\1"+
    "\4\11\1\1\4\11\2\1\1\0\1\1\3\0\1\11"+
    "\31\1\1\11\2\0\3\1\3\0\12\1\1\11\1\0"+
    "\1\11\7\1\4\0\1\1\2\0\30\1\2\0\15\1"+
    "\1\11\7\1\2\0\21\1\1\0\35\1\1\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[337];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public JavaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3474) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public JavaToken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return JavaToken.EOF;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return JavaToken.ID;
            } 
            // fall through
          case 104: break;
          case 2: 
            { return JavaToken.INTEGERLIT;
            } 
            // fall through
          case 105: break;
          case 3: 
            { return JavaToken.DOT;
            } 
            // fall through
          case 106: break;
          case 4: 
            { return JavaToken.MINUS;
            } 
            // fall through
          case 107: break;
          case 5: 
            { 
            } 
            // fall through
          case 108: break;
          case 6: 
            { return JavaToken.SLASH;
            } 
            // fall through
          case 109: break;
          case 7: 
            { return JavaToken.STAR;
            } 
            // fall through
          case 110: break;
          case 8: 
            { return JavaToken.BRACKETLEFT;
            } 
            // fall through
          case 111: break;
          case 9: 
            { return JavaToken.BRACKETRIGHT;
            } 
            // fall through
          case 112: break;
          case 10: 
            { return JavaToken.PARENTHLEFT;
            } 
            // fall through
          case 113: break;
          case 11: 
            { return JavaToken.PARENTHRIGHT;
            } 
            // fall through
          case 114: break;
          case 12: 
            { return JavaToken.CURLYLEFT;
            } 
            // fall through
          case 115: break;
          case 13: 
            { return JavaToken.CURLYRIGHT;
            } 
            // fall through
          case 116: break;
          case 14: 
            { return JavaToken.ANDBIT;
            } 
            // fall through
          case 117: break;
          case 15: 
            { return JavaToken.LT;
            } 
            // fall through
          case 118: break;
          case 16: 
            { return JavaToken.GT;
            } 
            // fall through
          case 119: break;
          case 17: 
            { return JavaToken.SEMICOLON;
            } 
            // fall through
          case 120: break;
          case 18: 
            { return JavaToken.COLON;
            } 
            // fall through
          case 121: break;
          case 19: 
            { return JavaToken.COMMA;
            } 
            // fall through
          case 122: break;
          case 20: 
            { return JavaToken.QUESTIONMARK;
            } 
            // fall through
          case 123: break;
          case 21: 
            { return JavaToken.PLUS;
            } 
            // fall through
          case 124: break;
          case 22: 
            { return JavaToken.PERCENT;
            } 
            // fall through
          case 125: break;
          case 23: 
            { return JavaToken.TILDA;
            } 
            // fall through
          case 126: break;
          case 24: 
            { return JavaToken.EXCLAMATIONMARK;
            } 
            // fall through
          case 127: break;
          case 25: 
            { return JavaToken.ASSIGN;
            } 
            // fall through
          case 128: break;
          case 26: 
            { return JavaToken.XORBIT;
            } 
            // fall through
          case 129: break;
          case 27: 
            { return JavaToken.ORBIT;
            } 
            // fall through
          case 130: break;
          case 28: 
            { return JavaToken.AT;
            } 
            // fall through
          case 131: break;
          case 29: 
            { return JavaToken.FLOATINGLIT;
            } 
            // fall through
          case 132: break;
          case 30: 
            { return JavaToken.MINUSMINUS;
            } 
            // fall through
          case 133: break;
          case 31: 
            { return JavaToken.ARROW;
            } 
            // fall through
          case 134: break;
          case 32: 
            { return JavaToken.MINUSASSIGN;
            } 
            // fall through
          case 135: break;
          case 33: 
            { return JavaToken.STRINGLIT;
            } 
            // fall through
          case 136: break;
          case 34: 
            { return JavaToken.SLASHASSIGN;
            } 
            // fall through
          case 137: break;
          case 35: 
            { return JavaToken.STARASSIGN;
            } 
            // fall through
          case 138: break;
          case 36: 
            { return JavaToken.IF;
            } 
            // fall through
          case 139: break;
          case 37: 
            { return JavaToken.DO;
            } 
            // fall through
          case 140: break;
          case 38: 
            { return JavaToken.AND;
            } 
            // fall through
          case 141: break;
          case 39: 
            { return JavaToken.ANDASSIGN;
            } 
            // fall through
          case 142: break;
          case 40: 
            { return JavaToken.LESSEQ;
            } 
            // fall through
          case 143: break;
          case 41: 
            { return JavaToken.GREATEQ;
            } 
            // fall through
          case 144: break;
          case 42: 
            { return JavaToken.DOUBLECOLON;
            } 
            // fall through
          case 145: break;
          case 43: 
            { return JavaToken.PLUSPLUS;
            } 
            // fall through
          case 146: break;
          case 44: 
            { return JavaToken.PLUSASSIGN;
            } 
            // fall through
          case 147: break;
          case 45: 
            { return JavaToken.PERCENTASSIGN;
            } 
            // fall through
          case 148: break;
          case 46: 
            { return JavaToken.NOTEQ;
            } 
            // fall through
          case 149: break;
          case 47: 
            { return JavaToken.EQ;
            } 
            // fall through
          case 150: break;
          case 48: 
            { return JavaToken.XORASSIGN;
            } 
            // fall through
          case 151: break;
          case 49: 
            { return JavaToken.ORASSIGN;
            } 
            // fall through
          case 152: break;
          case 50: 
            { return JavaToken.OR;
            } 
            // fall through
          case 153: break;
          case 51: 
            { return JavaToken.ELLIPSIS;
            } 
            // fall through
          case 154: break;
          case 52: 
            { return JavaToken.FOR;
            } 
            // fall through
          case 155: break;
          case 53: 
            { return JavaToken.TRY;
            } 
            // fall through
          case 156: break;
          case 54: 
            { return JavaToken.NEW;
            } 
            // fall through
          case 157: break;
          case 55: 
            { return JavaToken.CHARLIT;
            } 
            // fall through
          case 158: break;
          case 56: 
            { return JavaToken.INT;
            } 
            // fall through
          case 159: break;
          case 57: 
            { return JavaToken.SHIFTLEFTASSIGN;
            } 
            // fall through
          case 160: break;
          case 58: 
            { return JavaToken.SHIFTRIGHTASSIGN;
            } 
            // fall through
          case 161: break;
          case 59: 
            { return JavaToken.LONG;
            } 
            // fall through
          case 162: break;
          case 60: 
            { return JavaToken.ELSE;
            } 
            // fall through
          case 163: break;
          case 61: 
            { return JavaToken.ENUM;
            } 
            // fall through
          case 164: break;
          case 62: 
            { return JavaToken.BOOLEANLIT;
            } 
            // fall through
          case 165: break;
          case 63: 
            { return JavaToken.THIS;
            } 
            // fall through
          case 166: break;
          case 64: 
            { return JavaToken.NULLLIT;
            } 
            // fall through
          case 167: break;
          case 65: 
            { return JavaToken.BYTE;
            } 
            // fall through
          case 168: break;
          case 66: 
            { return JavaToken.CASE;
            } 
            // fall through
          case 169: break;
          case 67: 
            { return JavaToken.CHAR;
            } 
            // fall through
          case 170: break;
          case 68: 
            { return JavaToken.USRIGHTSHIFTASSIGN;
            } 
            // fall through
          case 171: break;
          case 69: 
            { return JavaToken.VOID;
            } 
            // fall through
          case 172: break;
          case 70: 
            { return JavaToken.FLOAT;
            } 
            // fall through
          case 173: break;
          case 71: 
            { return JavaToken.FINAL;
            } 
            // fall through
          case 174: break;
          case 72: 
            { return JavaToken.SUPER;
            } 
            // fall through
          case 175: break;
          case 73: 
            { return JavaToken.SHORT;
            } 
            // fall through
          case 176: break;
          case 74: 
            { return JavaToken.THROW;
            } 
            // fall through
          case 177: break;
          case 75: 
            { return JavaToken.BREAK;
            } 
            // fall through
          case 178: break;
          case 76: 
            { return JavaToken.CATCH;
            } 
            // fall through
          case 179: break;
          case 77: 
            { return JavaToken.CLASS;
            } 
            // fall through
          case 180: break;
          case 78: 
            { return JavaToken.WHILE;
            } 
            // fall through
          case 181: break;
          case 79: 
            { return JavaToken.ASSERT;
            } 
            // fall through
          case 182: break;
          case 80: 
            { return JavaToken.STATIC;
            } 
            // fall through
          case 183: break;
          case 81: 
            { return JavaToken.SWITCH;
            } 
            // fall through
          case 184: break;
          case 82: 
            { return JavaToken.THROWS;
            } 
            // fall through
          case 185: break;
          case 83: 
            { return JavaToken.RETURN;
            } 
            // fall through
          case 186: break;
          case 84: 
            { return JavaToken.NATIVE;
            } 
            // fall through
          case 187: break;
          case 85: 
            { return JavaToken.IMPORT;
            } 
            // fall through
          case 188: break;
          case 86: 
            { return JavaToken.DOUBLE;
            } 
            // fall through
          case 189: break;
          case 87: 
            { return JavaToken.PUBLIC;
            } 
            // fall through
          case 190: break;
          case 88: 
            { return JavaToken.FINALLY;
            } 
            // fall through
          case 191: break;
          case 89: 
            { return JavaToken.EXTENDS;
            } 
            // fall through
          case 192: break;
          case 90: 
            { return JavaToken.BOOLEAN;
            } 
            // fall through
          case 193: break;
          case 91: 
            { return JavaToken.DEFAULT;
            } 
            // fall through
          case 194: break;
          case 92: 
            { return JavaToken.PACKAGE;
            } 
            // fall through
          case 195: break;
          case 93: 
            { return JavaToken.PRIVATE;
            } 
            // fall through
          case 196: break;
          case 94: 
            { return JavaToken.ABSTRACT;
            } 
            // fall through
          case 197: break;
          case 95: 
            { return JavaToken.STRICTFP;
            } 
            // fall through
          case 198: break;
          case 96: 
            { return JavaToken.CONTINUE;
            } 
            // fall through
          case 199: break;
          case 97: 
            { return JavaToken.VOLATILE;
            } 
            // fall through
          case 200: break;
          case 98: 
            { return JavaToken.TRANSIENT;
            } 
            // fall through
          case 201: break;
          case 99: 
            { return JavaToken.INTERFACE;
            } 
            // fall through
          case 202: break;
          case 100: 
            { return JavaToken.PROTECTED;
            } 
            // fall through
          case 203: break;
          case 101: 
            { return JavaToken.INSTANCEOF;
            } 
            // fall through
          case 204: break;
          case 102: 
            { return JavaToken.IMPLEMENTS;
            } 
            // fall through
          case 205: break;
          case 103: 
            { return JavaToken.SYNCHRONIZED;
            } 
            // fall through
          case 206: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
