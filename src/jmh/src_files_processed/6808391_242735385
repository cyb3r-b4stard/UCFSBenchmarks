
/**
 * ######## ########### ## ## #####, ####### ## ####### # ####
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Jugador {
    private ConjuntoDeCartas mano;
    private PuntuacionEscoba bazasGanadas;
    private Carta ultimaCarta;
    private ConjuntoDeCartas ultimaGanadaMesa;
    
    public Jugador()
    {
        ConjuntoDeCartas mano = 0;
        PuntuacionEscoba bazasGanadas = 0;
        Carta ultimaCarta = 0;
        ConjuntoDeCartas ultimaGanadaMesa = 0;
    }
    
    public void getConjunto()
    {
        return ConjuntoDeCartas mano;
    }
    
    public void getPuntuacion()
    {
        return PuntuacionEscoba bazasGanadas;
    }
    
     public void getCarta()
    {
        return Carta ultimaCarta;
    }
    
    public void getConjuntoDeCartas()
    {
        return ConjuntoDeCartas ultimaGanadaMesa;
    }
    
    public void setConjuntoDeCartasSuma ()
    {
        ConjuntoDeCartas + Carta;
    }
    
    public void setConjuntoDeCartasResta (m)
    {
        ConjuntoDeCartas - Carta;
    }
    
    
   
   
    /**
     * Dado un conjunto de cartas, mesa, devuelve un array con todas las posibles combinaciones 
     * de cartas formadas por:
     *   - una carta de la mano del jugador 
     *   - con cero o más cartas del conjunto de cartas, mesa.
     * En cada conjunto de cartas del array devuelto:
     *    - la primera carta es la del jugador
     *    - el resto de cartas pertenecen al conjunto de cartas mesa.
     * @param mesa conjunto de cartas para hallar combinaciones
     * @return todas las posibles combinaciones de cartas con una carta de la mano del jugador y cero o más
     *  de la mesa.
     */
    private ConjuntoDeCartas[] hallarPosiblesBazas(ConjuntoDeCartas mesa) {
        ConjuntoDeCartas[] combinacionesMesa = mesa.combinaciones();
        int totalPosibles = mano.totalCartas()*combinacionesMesa.length;
        ConjuntoDeCartas[] posibles = new ConjuntoDeCartas[totalPosibles];      
        int pos = 0 ;
        for (int i = 0; i < mano.totalCartas(); i++) {          
            for (int j = 0; j < combinacionesMesa.length; j++) {
                posibles[pos] = new ConjuntoDeCartas();
                for (int k = 0; k < combinacionesMesa[j].totalCartas(); k++) {
                    posibles[pos].addCarta(combinacionesMesa[j].getCarta(k));
                }
                posibles[pos].addCarta(mano.getCarta(i), 0);
                pos++;
            }
        }
        return posibles;
    }
    
    
}