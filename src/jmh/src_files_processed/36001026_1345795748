
import java.util.ArrayList;
public class ArrayListMethods
{
    ArrayList<String> list; 
    /**
     * Constructor for objects of class ArrayListMethods
     */
    public ArrayListMethods(ArrayList<String> arrayList)
    {
        list = arrayList;
    }

    /**
     * Determines if the array list is sorted (do not sort)
     * When Strings are sorted, they are in alphabetical order
     * Use the compareTo method to determine which string comes first
     * You can look at the String compareTo method in the Java API
     * @return true if the array list is sorted else false.
     */
    public boolean isSorted()
    {
        boolean sorted = true;
        
            for (int i = 0; i < list.size()-1 && sorted; i ++)
            {
                String wordSorted = list.get(i);
                String anotherString = list.get(i+1);
                int compare = wordSorted.compareTo(anotherString);
                if (compare <=0)
                {
                    sorted = true;
                }
                else
                {
                    sorted = false;
         
                }
            }

        return sorted;
    }

    /**
     * Replaces all but the first and last with the larger of its to neighbors
     * You can use compareT to determine which string is larger (later in alphabetical
     * order.
     * @return a string representation of the array list. (do this with list.toString()
     */
    public void replaceWithLargerNeighbor()
    {

        for(int i=0; i < list.length()-1; i++)
        {
            if(list[i].compareTo(list[i+1])&gt;0)
            {
                for(int j=i+1; j&lt;list.length-1; j++)
                {  
                    list[j]=list[j+1];
                }
            }
        }
}
    /**
     * Gets the number of duplicates in the list.
     * (Be careful to only count each duplicate once. Start at index 0. Does it match any of the 
     * other element?
     * Get the next word. It is at index i. Does it match any of the words with index > i?)
     * @return the number of duplicate words in the list
     */
    public int countDuplicates()
    {
        int duplicates = 0;
        boolean dup = false;
        String w1;
        String w2;
        for(int i = 0; i < list.size(); i++)
        {
            w1 = list.get(i);
            for(int j = i+1; j < list.size(); j++)
            {
                w2 = list.get(j);
                if(w1.equals(w2))
                {
                    dup = true;
                }
            }
            if(dup)
            {
                duplicates++;
            }
            dup = false;
            
        }

        return duplicates;
    }

     /**
     * Moves any word that startw with x, y, or z to the front of the arraylist, but
     * otherwise prserves the order
     */
    public void xyzToFront()
    {
        int insertAt = 0;
        String word;
        String first;
        for(int i = 1; i < list.size(); i++)
        {
            word = list.get(i);
            first = word.substring(0,1);
            if(first.equals("x") || first.equals("y") || first.equals("z"))
            {
                list.add(insertAt,list.remove(i));
                insertAt++;
            }
        }
    }

    /**
     * gets the string representation of this array list
     * @returns the string representation of this array list in
     * standard collectiuon format
     */
    public String toString()
    {
        return list.toString();
    }
}