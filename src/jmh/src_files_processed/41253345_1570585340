import java.util.Random;
  /**
   * ##### ########### ######## ####### ###### #########
   * ## ###### ###### ## ######. ####### ###(), ########()
   * ########() ### #####() ###### # ### #####, #####
   * ###### ##############() ######## ### ##### #### ## ###### 
   * ## ## ######## ## ####.
   * 
   * @###### (######## ########) 
   * @####### (## ##### ####)
   */
  public  class LinearArray
  {
    
   /**
    * Fills a  linear array with radmon data in the range [0..1). The random
    * numbers have precision of 2 decimal digits. 
    *
    * @param  a        The  array to be filled. It cannot be NULL.
    * @return          The result of the multiplication.
    */
    public static void fillRandomData(double a[])
    {
        Random random= new Random(0);
        int len=a.length;

        for (int i=0; i< len; i++)
            a[i]= (double) random.nextInt(100)/100;
    }

   /**
    * Prints the elements of an array, all at the same line.
    * 
    * @param  a   The array of which the ellements are printed.
    */   
    public static void printH(double a[])
    {
        int len=a.length;
        System.out.print("{");
        for( int i=0; i< len-1; i++)
            System.out.print(a[i] + ", " );
        System.out.println(a[len-1] +"}");
    }

   /**
    * Prints the elements of an array, each at a different line.
    * 
    * @param  a   The array of which the ellements are printed.
    */   
    public static void printV(double a[])
    {
        int len=a.length;
        for( int i=0; i< len; i++)
            System.out.println(a[i]);
        System.out.println();
    }

    /**
     * Creates an exact copy of an array.
     * 
     * @param  a    The array to be copied. It cannot be NULL.        double a3[]=new double [a.length];         
     * @return      An exact copy of the argument array.
     */
    public static double[] clone(double original[])
   {
          int len=original.length; 
          double a3[]=new double [len];
          for (int i=0; i<len; i++)
            a3[i]=original[i];
          return a3;
   } 

   /**
    * Implements linear array addition. The two arrays to be added must be of 
    * equal length. 
    *
    * @param  a1    The first array to be added. It cannot be NULL.
    * @param  a2    The second array to be added. It cannot be NULL.
    * @return       The sum of the argument arrays.
    */
     public static double[] add(double a1[], double a2[])
   {
        double a3[]=new double[a1.length];
        int len=a1.length;
        for (int i=0; i<len; i++)
            a3[i]=a1[i]+a2[i];  
        return a3;  
   }           

   /**
    * Implements linear array subtraction. The two arrays which participate  must be of 
    * equal length. 
    *
    * @param  a1    The  array from which we subtract. It cannot be NULL.
    * @param  a2    The  array to be subtracted. It cannot be NULL.
    * @return       The result of the subtraction.
    */
     public static double[] subtract(double a1[], double a2[])
   {
        double a3[]=new double [a1.length];
        int len=a1.length;
        for (int i=0; i<len; i++)
           a3[i]=a1[i]-a2[i]; 
        return a3;
   }

   /**
    * Implements scalar linear array multiplication. 
    *
    * @param  factor   The  factor of the multiplication.
    * @param  a        The  array to be multiplied. It cannot be NULL.
    * @return          The result of the multiplication.
    */
    public static double[] multiply(double factor, double a[])
   {
        double a3[]=new double [a.length];
        int len=a.length;
        for (int i=0; i<len; i++)
           a3[i]=factor*a[i];
        return a3;  
   }

    /**
     * Starting from a specified position of an array, it identifies the 
     * location of the maximum element of the array. The specified position is 
     * included in the search.
     * 
     * @param  a        The array to be searched.
     * @param  start    The search for the maximum starts from this position.
     * @return          The index of the maximum element.
     */

    /**
     * Starting from a specified position of an array, it identifies the 
     * location of the minimum element of the array. The specified position is 
     * included in the search.
     * 
     * @param  a        The array to be searched.
     * @param  start    The search for the minimum starts from this position.
     * @return          The index of the minimum element.
     */
    public static int minLocationFrom(double a[], int start)
    {
         int min=a[start];
         int i2=start;
         int len=a.length;
         for (int i=1; i<len; i++)
           if(min>a[i])
            {
                min=a[i];
            }
         return i2
    }


}