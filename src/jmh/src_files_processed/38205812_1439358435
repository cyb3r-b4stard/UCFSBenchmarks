/**
 *  #### ##### ## ### #### ##### ## ### "##### ## ####" ###########. 
 *  "##### ## ####" ## # #### ######, #### ##### ######### ####.  ##### 
 *  ### #### ###### #### #######. ####'# ###. ## ###### ###### ## ######## 
 *  ## #### ## #### ###########!
 * 
 *  ## #### #### ####, ###### ## ######## ## #### ##### ### #### ### "####"
 *  ######.
 * 
 *  #### #### ##### ####### ### ########### ### ### ######: ## ####### ###
 *  #####, ####### ### ###### ### ###### ### ####.  ## #### ######### ###
 *  ######## ### ######## #### ### ###### #######.
 * 
 * @######  ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */

public class Game 
{
    private Parser parser;
    private Room currentRoom;
        
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        createRooms();
        parser = new Parser();
    }

    /**
     * Create all the rooms and link their exits together.
     */
    private void createRooms()
    {
        Room spawn, heli, frozenLake, bridge, house, cave;
      
        spawn = new Room("You just woke up in the middle of a forrest. Your memory is gone and it just strated to snow");
        heli = new Room("huh, a helicopter.. Looks like it needs fuel.");
        frozenLake = new Room("Just a frozen lake..");
        bridge = new Room("A old bridge made by wood, looks unsafe..");
        house = new Room("A newly build house.. Why is this house build in the middle of nowhere?");
        cave = new Room("A old gold-mine, with old stuff");
        
        spawn.setExits(null, bridge, frozenLake, heli);
        heli.setExits(null, spawn, null, null);
        frozenLake.setExits(spawn, null, null, null);
        bridge.setExits(null, house, null, spawn);
        house.setExits(cave, null, null, bridge);
        cave.setExits(null, null, house, null);
        
        currentRoom = spawn;  
    }

    /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();

                
        boolean finished = false;
        while (! finished) {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing.  Good bye.");
    }

    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("World of Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println("You are " + currentRoom.getDescription());
        System.out.print("Exits: ");
        if(currentRoom.getExit != null) {
            System.out.print("north ");
        }
        if(currentRoom.eastExit != null) {
            System.out.print("east ");
        }
        if(currentRoom.southExit != null) {
            System.out.print("south ");
        }
        if(currentRoom.westExit != null) {
            System.out.print("west ");
        }
        System.out.println();
    }

    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help")) {
            printHelp();
        }
        else if (commandWord.equals("go")) {
            goRoom(command);
        }
        else if (commandWord.equals("quit")) {
            wantToQuit = quit(command);
        }

        return wantToQuit;
    }


    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You are lost. You are alone. You wander");
        System.out.println("around at the university.");
        System.out.println();
        System.out.println("Your command words are:");
        System.out.println("   go quit help");
    }

    /** 
     * Try to go in one direction. If there is an exit, enter
     * the new room, otherwise print an error message.
     */
    private void goRoom(Command command) 
    {
        if(!command.hasSecondWord()) {
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        Room nextRoom = null;
        Room nextRoom.getExit(direction);
        if (nextRoom == null) {
            System.out.println("There is no door!");
        }
          else {
            currentRoom = nextRoom;
            System.out.println("You are " + currentRoom.getDescription());
            System.out.print("Exits: ");
            if(currentRoom.northExit != null) {
                System.out.print("north ");
            }
            if(currentRoom.eastExit != null) {
                System.out.print("east ");
            }
            if(currentRoom.southExit != null) {
                System.out.print("south ");
            }
            if(currentRoom.westExit != null) {
                System.out.print("west ");
            }
            System.out.println();
        }
    }
    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  
        }
    }
    private void printLocationInfo()
    {
        System.out.println("You are " + currentRoom.getDescription());
        System.out.println("Exits: ");
        if(currentRoom.northExit != null)
        {
            System.out.println("north ");
        }
        if(currentRoom.eastExit != null)
        {
            System.out.println("east ");
        }
        if(currentRoom.southExit != null)
        {
            System.out.println("south ");
        }
        if(currentRoom.westExit != null)
        {
            System.out.println("west ");
        }
    }
}