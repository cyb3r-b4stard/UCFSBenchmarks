
/**
 * ##### ###### ### ##### ### ####### ##### ## ###### # ########
 * ## ###### # #####:
 * ######## ## ##### # ######, ########### ### ### ########## ## ## ###### #########
 * ######## ## ####### ### ##### #### ###### ######
 * ######## #### #### ########### ######### ## ######## # #### ###### # ######
 * ######## ## ########### ### ##########. ######## ####() #### ###### # ###########
 * ###### ########### ### ### ####### 
 * 
 * @###### ######
 * @####### ##-##-####
 */
public class Person
{
   public static final int MIN_AGE = 0;
   public static final int MAX_AGE = 125;
   
   public static  final boolean GENDER_MALE = true;          
   public static final boolean GENEDER_FEMALE = false;      
   
   public static final int ADULTHOOD_AGE = 18;              
   public static final int RETIREMENT_AGE = 65;             
   
    
    private String name;        
    private int age;          
    
    private String surname;     
    private boolean gender;     

    /**
     * Constructor para los objetos (de momento sin utilizar)
     * Crea una persona con datos por defecto
     *          Nombre Fernando
     *          Apellido Alonso
     *          Edad (valor aleatorio)
     *          Género Masculino
     */
    public Person()
    {
        setName("Fernando");
        setSurname("Alonso");
        setGender(true);
        setAge(35);
        
        /* código para hacer que la edad sea aleatoria
        Random r = new Random();
        int randomNumber = r.nextInt(120);
        setAge(randomNumber);
        */
    }
    
    /**
     * Constructor con parámetro la edad
     * @param age edad con que se crea la persona, de tipo entero
     */
    public Person(int age)
    {
        this();
        setAge(age);
    }
    
    /**
     * Constructor con parámetros nombre, apellido, edad y género
     * @param name nombre para la persona, de tipo String
     * @param surname apellido para la persona, de tipo String
     * @param age edad para la persona, de tipo entero
     * @param gender  género para la persona,   GENDER_MALE o GENDER_FEMALE
     */
    public Person(String name, String surname, int age, boolean gender)
    {
        this();                 
        setSurname(surname);
        setAge(age);
        setGender(gender);
    }

    /**
     * Método que modifica el valor del atributo name
     * 
     * @param  newName el nuevo nombre, de tipo String
     *
     */
    public void setName(String newName)
    {
        name = newName;
    }
    
    
    /**
     * Método que devuelve el valor del atributo name
     * 
     * @return  name el nombre de la persona, de tipo String
     *
     */
    public String getName()
    {
        return name ;
    }
    
    /**
     * Método que modifica el valor del atributo age
     * 
     * @param  newAge el nuevo nombre, de tipo int
     *
     */
    public void setAge(int age)
    {
        if ((age >= MIN_AGE))
            this.age = age;
    }
    
     /**
     * Método que devuelve el valor del atributo age
     * 
     * @return  age la edad de la persona, de tipo int
     *
     */
    public int getAge()
    {
        return age ;
    }
    
    /**
     * Método que modifica el valor del atributo surname
     * 
     * @param  newSurname el nuevo apellido o apellidos, de tipo String
     *
     */
    public void setSurname(String newSurname)
    {
        surname = newSurname;
    }
    
    
    /**
     * Método que devuelve el valor del atributo surname
     * 
     * @return  surname el apellido de la persona, de tipo String
     *
     */
    public String getSurname()
    {
        return surname ;
    }
    
    /**
     * Método que modifica el valor del atributo gender
     * 
     * @param  newGender el nuevo género, de tipo boolean (true para masculino y false para femenino)
     *
     */
    public void setGender(boolean newGender)
    {
        gender = newGender;
    }
    
    
    /**
     * Método que devuelve el valor del género de la persona (true si masculino y false si femenino) atributo gender
     * 
     * @return  gender representa el género de la persona, de tipo boolean (true masculino, false femenino)
     *
     */
    public boolean getGender()
    {
        return gender  ;
    }
    
    /**
     * Método que imprima un mensaje por pantalla con información de la persona
     */
    public void print()
    {
        System.out.println("Me llamo " + getName() + " y tengo " + getAge() + " años. El año que viene tendré " 
        + (getAge() + 1 )+ " años");
        
        System.out.println("Datos de la persona: " + toString());
    }
    
    /**
     * Método que devuelve los valores de los atributos de la persona en formato Atributo: valor separados por comas
     * @return String valores de los atributos
     */
    public String toString(){
        String data ="Nombre: " + this.getName().toUpperCase() + ", Apellido:" + this.getSurname() + ", Edad: " + this.getAge() ;
        if (this.getGender() == true)
            data = data + " Género:Masculino";
        else
            data = data + " Género: Femenino";
        return data;
    }
    
    /**
     * Método que devuelva:
     * Si la perosna es menor de edad, el número de años que le quedan para llegar a mayoría de edad (18 años)
     * Si la persona es mayor de edad y menor de 65, el número de años que le faltan para llegar a la jubilación (65)
     * Si la persona ha llegado a la jubilación, el número de años que lleva jubilado.
     * 
     * @return int número de años a calcular
     */
    public int getCriticalAge()
    {
        if ( getAge() < ADULTHOOD_AGE )
        {
            return ADULTHOOD_AGE - getAge();    
        }
        else if ( getAge() > RETIREMENT_AGE)
            {
                return getAge() - RETIREMENT_AGE;   
            }
            else
            {
                return RETIREMENT_AGE - getAge();  
            }
    }
    
    
    /** 
     * Método que devuelve un código en función de la edad, que será el suguiente:
     * "CHILD" Si la persona es menor de edad
     * "ADULT" Si es mayor de edad pero no está retirado
     * "RETIRED" Si ya ha cumplido la edad de jubilación
     * 
     * @param código identifica rango de edad ("CHILD", "ADULT" O RETIRED") De tipo String
     * 
     */
    private String getAgeCode()
    {
        if (getAge() < ADULTHOOD_AGE)
            return "CHILD";
        if (getAge() >= RETIREMENT_AGE)
            return "RETIREMENT";
        else
            return "ADULT";
    }
    
    /**
     * Método que genera un código a partir de los atributos de la persona con el siguiente formato:
     *      Edad
     *      guión
     *      Primeras dos letras del nombre en mayúscula
     *      guión
     *      Primeras cuatro letras del apellido en mayúscula
     *      guión
     *      El texto “CHILD”, “ADULT” o “RETIRED” dependiendo de la edad de la persona 
     *      (para obtener este texto, añadir un método privado que use las mismas constantes 
     *      que getCriticalAge).
     *      
     * Ejemplos: “35-FE-ALVA-ADULT”, “75-JU-GOME-RETIRED”.
     */
    public String getHashCode()
    {
        String hashCode;
        hashCode = this.getAge() + "-" + this.getName().toUpperCase().substring(0,1) + "-" +
                   this.getSurname().toUpperCase().substring(0,3) + "-"  + getAgeCode();
        return hashCode;           
    }   
                    
    /**
     * Método que indica la edad de la persona en el año indicado como parámetro
     * Indicará los años que tenía en el año recibdo como parámetro
     * Si no había nacido
     * Si aún no pasó ese año, los años que tendrá
     * 
     * @param year  año en el que se desea saber el estado (años que tenía) 
     * @return String cadena indicando los años que tendría en el año recibido
     */
    public String myAge(int aye)
    {
        String state;
        if ( aye <= CURRENT_YEAR)
        {
            if (CURRENT_YEAR - year > 0)
                return " En el año " + year + "tenía " + CURRENT_YEAR - year + " años";
            else
                return " En el año " + year + " aún no había nacido";
                
        }
        else 
            return " En el futuro año " + year + " tendría " + (year - CURRENT_YEAR) + getAge()) + "años";
    }
}