import java.util.ArrayList;
/**
 * ######### #-# #### ######### # ######'# ##########, ####, ### ##### #### #####.
 * 
 * @ (##### ######) 
 * @(##### ####, ####)
 */
public class Work7_5
{
    /**
     * The constructor, main will create a string array of 10 of my friends, and generate their likability based on RandomInt()
     */
    public static void main()
    {
        final int SIZE = 10;
        ArrayList<MyFriend> friend = new ArrayList<MyFriend>();
        int n, q, l, k, e, g, j, c , v, x;

        System.out.print("Problem number one, an array of friends with their phone index, likability, and name");
        System.out.println();
        friend.add(new MyFriend("Joe", 0, RandomInt(100)));
        friend.add(new MyFriend("Chad", 1, RandomInt(100)));
        friend.add(new MyFriend("Eric", 2, RandomInt(100)));
        friend.add(new MyFriend("Tommy", 3, RandomInt(100)));
        friend.add(new MyFriend("Mitchell", 4, RandomInt(100)));
        friend.add(new MyFriend("Zach", 5, RandomInt(100)));
        friend.add(new MyFriend("Bruce", 6, RandomInt(100)));
        friend.add(new MyFriend("Ethan", 7, RandomInt(100)));
        friend.add(new MyFriend("Kevin", 8, RandomInt(100)));
        friend.add(new MyFriend("Robert", 9, RandomInt(100)));
        for (int i = 0; i < friend.size(); i++)
        {
            System.out.println(friend.get(i) + " ");
        }
        System.out.println();
        MyFriend tmp;
        System.out.print("Problem number two, a sorted array of my friend's likability. ");
        System.out.println();
        for ( n = 1; n < friend.size() - 1; n++)
        {
            for ( q = 0; q < friend.size() - n; q++)
            {
                if(friend.get(q).getLikability() < friend.get(q + 1).getLikability())
                {
                    tmp = friend.get(q);
                    friend.set(q, friend.get(q + 1));
                    friend.set(q + 1,tmp);
                }
            }
            System.out.println(friend.get(q) + "\t");
        }
        System.out.println();
        System.out.print("Problem number three, a sorted array of my friend's names. ");
        System.out.println();
        for(l = 1; l < friend.size() - 1; l++)
        {
            for(k = 0; k < friend.size() - l; k++)
            {
                c = friend.get(k).getName().compareTo(friend.get(k + 1).getName());
                if(c < 0)
                {
                    tmp = friend.get(k);
                    friend.set(k, friend.get(k + 1));
                    friend.set(k + 1, tmp);
                }
            }
            System.out.println(friend.get(k) + "\t");
        }
        System.out.println();
        System.out.print("Problem number four, a sorted array of my friends names, with the lowest likability removed. ");
        System.out.println();
        for(j = 1; j < friend.size() - 1; j++)
        {
            for(v = 0; v < friend.size() - j; v++)
        {
                if(friend.get(v).getLikability() > friend.get(v + 1).getLikability())
                {
                    tmp = friend.get(v);
                    friend.set(v, friend.get(v + 1));
                    friend.set(v + 1,tmp);
                }
        }
        }
        friend.remove(9);
        Printfriend(friend);
    }

    /**
     * RandomInt will generate a random number
     * 
     * @param  y the number to be randomed
     * @return the random number (y)
     */
    public static int RandomInt(int number)
    {
        int y = (int)(Math.random() * number);
        return y;
   }
    /**
     * Printfriend with least likability
     * 
     * @param v the loop to print
     * @Return print the friend array
     */
    public static int Printfriend<friend>(int v)
    {
        for(int v = 0; v < friend.size() - 1; v++)
        {
            System.out.print(friend.get(v) + "/t");
        }
   }
}