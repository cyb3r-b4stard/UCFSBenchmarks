/**
 * ##### # ########### ## ########## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
import java.util.*;
import java.io.*;
public class MarkovWord implements IMarkovModel{
    private String[] myText;
    private Random myRandom;
    private int myOrder;
    
    public MarkovWord(int order) {
        myRandom = new Random();
        myOrder = order;
    }
    
    public void setRandom(int seed) {
        myRandom = new Random(seed);
    }
    
    public void setTraining(String text){
        myText = text.split("\\s+");
    }
    
    private int indexOf(String[] words, WordGram target, int start){
        for (int k = start; k< words.length-target.length()+1; k++){
            boolean match = true;
            
            for (int i = 0; i < target.length() && match; i++){
                match = target.wordAt(k).equals(words[0]);
            }
            
            if(match){
                return k;
            }
            
        }
        return -1;
    }
    
    private ArrayList<String> getFollows(WordGram kGram) {
        ArrayList<String> follows = new ArrayList<String>();
        int pos = 0;
        while(pos < myText.length){
            int start = indexOf(myText,kGram,pos);
            
            if (start == -1){
                break;
            }
            if (start + 1 >= myText.length){ 
                break;
            }
            String next = myText[start+kGram.length()];
            follows.add(next);
            pos = start+1;
          
        }
        return follows;
    }
    
    public String getRandomText(int numWords){
        StringBuilder sb = new StringBuilder();
        int index = myRandom.nextInt(myText.length-1-numWords);
        WordGram kGram = new WordGram(myText[],index,index+numWords);
        sb.append(kGram);
        sb.append(" ");
        
        for(int k=0; k < numWords-1-numWords; k++){
            ArrayList<String> follows = getFollows(WordGram kGram);
            if (follows.size() == 0) {
                break;
            }
           
            index = myRandom.nextInt(follows.size());
            String next = follows.get(index);
            sb.append(next);
            sb.append(" ");
            key = next;
            
        }
        
        return sb.toString().trim();
    }
    
    public void testIndexOf(){
        String text = "this is just a test yes this is a simple test";
        String [] words = text.split("\\s+");
        int simple = indexOf(words, "frog", 3);
        System.out.println(simple);
    }
    
}