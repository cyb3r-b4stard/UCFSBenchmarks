import java.util.Random;

import comp102x.ColorImage;
import comp102x.assignment.GameLogic;
import comp102x.assignment.GameRecord;
import comp102x.assignment.Goal;

public class StudentLogic implements GameLogic{
    
    
    public ColorImage generateIntermediateFootballImage(ColorImage[] depthImages, int initialStep, int currentStep, int finalStep, double initialScale, double finalScale, int initialX, int finalX, int initialY, int finalY) {
        
        int imageIndex = (depthImages.length - 1) * ( (currentStep - initialStep) / (finalStep - initialStep) );
        
        int xPosition = initialX + (finalX - initialX) * ( (currentStep - initialStep) / (finalStep - initialStep) );
        
        int yPosition = initialY + (finalY - initialY) * ( (currentStep - initialStep) / (finalStep - initialStep) );
        
        double scale = initialScale + (finalScale - initialScale) * ( (currentStep - initialStep) / (finalStep - initialStep) );
        
        depthImages[imageIndex].setX(xPosition);
        depthImages[imageIndex].setY(yPosition);
        depthImages[imageIndex].setScale(scale);
        

    }


    public void updateGoalPositions(Goal[][] goals) {
        /*
         * Constant Field Values, 2 = MOVABLE
         * Constant Field Values, 1 = STATIONARY
         * int[] moves = new int[]{goals[i][j-1], goals[i][j+1], goals[i-1][j], goals[i+1][j], goals[i-1][j+1], goals[i+1][j+1], goals[i-1][j-1], goals[i+1][j-1]};
         * goals[i][j-1], horizontal -1
         * goals[i][j+1], horizontal +1
         * goals[i-1][j], vertical -1
         * goals[i+1][j], vertical +1
         * goals[i-1][j+1], NE
         * goals[i+1][j+1], SE
         * goals[i-1][j-1], NW
         * goals[i+1][j-1], SW
         * 
         */        
        Random rand = new Random();
        
        int numOfRows = goals.length;
        int numOfCols = goals[0].length;
        for (int i = 0; i < numOfRows; i++) {
            for (int j = 0; j < numOfCols; j++) {
                if ( goals[i][j].getType() ==  2 ) {
                    Goal temp = goals[i][j];
                    if ( goals[i][j-1].isHit() ) {}
                    }
                }
            }
        }
        

    
    public GameRecord[] updateHighScoreRecords(GameRecord[] highScoreRecords, String name, int level, int score) {
        
        
        
        
        
    }