
/**
 * ##### # ########### ## ##### ######## ####.
 * 
 * @###### ####### ####
 * @####### #/#/####
 */
public class MyString
{
    private String original;
    private char [] arrayOfChars;
    
    public MyString(String inOriginal)
    {
        original = new String (inOriginal);
        arrayOfChars = original.toCharArray();
    }
    
    public char charAt(int index)
    {
        return arrayOfChars[index];
    }
    
    public int compareTo(String inString)
    {
        int length;
        int result = -10000000; 
        char [] arrayOfString;
        arrayOfString = inString.toCharArray();
        length = (arrayOfChars.length < arrayOfString.length) ? arrayOfChars.length : arrayOfString.length;
        
        for(int i=0; i<length && result == -10000000; i++)
        {
            if(arrayOfChars[i] > arrayOfString[i])
            {
                result = 1;
            }
            else if(arrayOfChars[i] < arrayOfString[i])
            {
                result = -1;
            }
        }
        if ( result == -10000000 &&( arrayOfChars.length > arrayOfString.length) )
        {
            result = 1;
        }
        else if ( result == -10000000 &&( arrayOfChars.length < arrayOfString.length ))
        {
            result = -1;
        }
        else if ( result == -10000000 &&( arrayOfChars.length == arrayOfString.length ))
        {
            result = 0;
        }
        
        return result;
    }
    
    public int compareToIgnoreCase(String inString)
    {
        int length;
        int result = -10000000; 
        char [] arrayOfString;
        arrayOfString = inString.toCharArray();
        for(int i =0; i<arrayOfChars.length; i++)
        {
            if(arrayOfChars[i] >= 'A' && arrayOfChars[i] <= 'Z')
            {
                arrayOfChars[i] = (char) (arrayOfChars[i] + 32);
            }
        }
        
        
        for(int i =0; i<arrayOfString.length; i++)
        {
            if(arrayOfString[i] >= 'A' && arrayOfString[i] <= 'Z')
            {
                arrayOfString[i] = (char) (arrayOfString[i] + 32);
            }
        }
        
        length = (arrayOfChars.length < arrayOfString.length) ? arrayOfChars.length : arrayOfString.length;
        
        for(int i=0; i<length && result == -10000000; i++)
        {
            if(arrayOfChars[i] > arrayOfString[i])
            {
                result = 1;
            }
            else if(arrayOfChars[i] < arrayOfString[i])
            {
                result = -1;
            }
        }
        if ( result == -10000000 &&( arrayOfChars.length > arrayOfString.length) )
        {
            result = 1;
        }
        else if ( result == -10000000 &&( arrayOfChars.length < arrayOfString.length ))
        {
            result = -1;
        }
        else if ( result == -10000000 &&( arrayOfChars.length == arrayOfString.length ))
        {
            result = 0;
        }
        
        return result;
    }
    
	public String concat(String inString)
	{
	    String concat;
	    concat = new String(original + inString);
	    return concat;
	 }
	 
	public boolean endsWith(String inString)
	 {
	    boolean result = true;
	    char [] arrayOfString;
        arrayOfString = inString.toCharArray();
        int stringLength = 0;
        
        for( int i = arrayOfChars.length - arrayOfString.length; i < arrayOfChars.length && result == true; i++)
        {
           if (arrayOfChars[i] != arrayOfString[stringLength++])
                {
                    result = false;
                }
        }
        
        return result;
	   }
	
	public boolean equals(MyString other)
	{
	    boolean result = true;
	    
	    f
	    
	    if (this.original() != other.original())
	    {
	        result = false;
	       }
	    return result;
	  }
	   
	   
}