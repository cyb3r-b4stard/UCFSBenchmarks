
/**
 * ##### # ########### ## ##### ## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class im
{
     /**
         * Verifica se uma micro cache foi encontrada na procura que o utilizador fez
         *
        
       
        public boolean encontrarCacheMicro(GregorianCalendar d,GregorianCalendar dateF ,String meteorologia,String tipoDeActividade,ArrayList<Coordenada> cm,int dura) {
            Procura j =new Procura (d, dateF , meteorologia, tipoDeActividade, cm, dura);
            for(Cache u : this.cache.values()) {
            if(u instanceof Micro_cache) {
                if(j.getCaminho().contains(u.getCoord())) {
                return true;
                }
            }
            
            }
            return false;
           
        }
            
         
       /**
        * Verifica se uma mult-cache foi encontrada na procura
        
       public boolean encontrarMulCache(GregorianCalendar d,GregorianCalendar dateF ,String meteorologia,String tipoDeActividade,ArrayList<Coordenada> cm,int dura) {
          Procura j =new Procura (d, dateF , meteorologia, tipoDeActividade, cm, dura);
          int i=0;
           for(Cache u : this.cache.values()) {
            
            if( u instanceof Mult_cache) {
                
                Mult_cache h = (Mult_cache) u;
                
                for(Coordenada coord : h.getLocal()) {
                
                    if(j.getCaminho().contains(coord)) {
                      i++;
                
                        
                
                }
                 
            
            }
            
             if(i==h.getLocal().size()) {
                
                 if(j.getCaminho().contains(h.getCoord())) {return true;}
                
                
                 else return false;
                }
            
                
           }
            
            }
           
         
           return false;
       
    }
       
    
    
     /**
      *Verifica se uma cache misterio foi encontrada na procura que o utilizador fez
      
      
     public boolean encontrarCacheMisterio(GregorianCalendar d,GregorianCalendar dateF ,String meteorologia,String tipoDeActividade,ArrayList<Coordenada> cm,int dura,String resposta){
        
        Procura j =new Procura (d, dateF , meteorologia, tipoDeActividade, cm, dura);
        
        for(Cache u : this.cache.values()) {
        
        if(u instanceof Cache_misterio) {
        
        
            Cache_misterio h =(Cache_misterio) u;
            
            if(j.getCaminho().contains(h.getLocal())) {
            
              
            
            }
            
        
        
        }
        
        
        }
        return false;
        
        
        }
        
      */
     
     
        /**
             * Fazer report de uma cache;
            
            
            public boolean reportCache(String nome,HashMap<Cache> existentes) {
               boolean encontrado=false;
                if(existentes.contains(u)) {encontrado =true ;return encontrado; }
                else { return encontrado;}
            }
            
      */
     
      /**
     * Imprimir os convidados
     * 
     
    
    public String imprimeConvidados(List<Utilizador> convidados){
       StringBuilder s = new StringBuilder();
       
       for(Utilizador u:convidados) {
        s.append(u.toString()+ "\n");
        }
       return s.toString();
    }
    
    /**
    * Uma cache não pode ter a mesma coordenada que a outra, não se pode adicionar o mesmo tipo e a mesma data com o mesmo tipo de actividade
    * Tratar da cena dos convites para os eventos.
    * A cena do report abuse.
    * duracao em minuto
    * na actividade esconder tem em atenção ao vários tipos de cache;
       
     
    public String MenuEditarDadosPessoais() {
        StringBuilder s = new StringBuilder();
        s.append("\n======== EDITAR DADOS ========\n");
        s.append("1 - Editar Email\n");
        s.append("2 - Editar Password\n");
        s.append("3 - Editar Nome\n");
        s.append("4 - Editar Género\n");
        s.append("5 - Editar Morada\n");
        s.append("0 - Voltar\n\n");
        s.append("Opcao: ");
     return s.toString();
    }
    
    
    esconder
    evento
    lazer
    procurar cache
    
     encontrarMicro=this.verificaSeEncontrouMicroCache(caminho,a);
                        encontrarMult=this.verificaSeEncontrouMulCache(caminho,a);
                        pergunta =this.verificaSeEncontrouCacheMisterio(caminho);
                        Coordenada teste = new Coordenada();
                        Coordenada testeM =new Coordenada();
                        
                        if(encontrarMicro && encontrarMult&& !(pergunta.equals(""))) {
                          out.println("Parabens econtrou uma micro cache e mult cache");
                        
                        }
                        
                        else {
                          if(encontrarMicro) { out.println("Parabens encontrou um micro cache");}
                          else {
                              if(encontrarMult) {
                                           out.println("Parabens encontrou um mult cache");
                            } 
                            
                            if(!(pergunta.equals(""))) {
                                do{
                                out.println(pergunta);
                                out.println("Introduza a resposta a esta pergunta");
                                respostaUser=input.lerString();
                              }while(respostaUser.equals(""));
                                
                              teste=this.verificaMisterioCache(caminho,pergunta,respostaUser);
                              if(!(teste.getLocalLatitude()==-1)) {
                                  out.println("Introduza as coordenada da cache final para ficar registado que encontrou a cache misterio");
                                  out.println(teste);
                                  testeM=this.criaCoordenada();
                                }  
                              
                            
                            }
                            
                            
                            
                            
                            }
                            
                            
                        }
                        
    
    
     
        /**
         * Estatistica mensais das actividades 
         * 
         */
         
        public String estatisticaActividades(int mes){
        
        int nrActividadesDeProcura=0;
        int nrPasseios=0;
        int nrEventos=0;
        int nrCachesEscondidas=0;
        
        int tempoPasseios=0;
        int tempoEscondidas=0;
        int tempoProcura=0;
        
        
        
        
        
          
          for(Actividade a:this.actividadesRealizadas) {
                
             
                if(a instanceof Procura) {
                 Procura u =(Procura)a;
                if(u.getData().get(Calendar.MONTH)==mes) { 
                 
                nrActividadesDeProcura++;
                tempoProcura+=u.getDuracao();
            }
            }
            
            else {
                if(a instanceof Virtual) {
                 Virtual u=(Virtual)a;
                 if(u.getData().get(Calendar.MONTH)==mes){
                 nrPasseios++;
                 tempoPasseios+=u.getDuracao();
                }
                 }
                 
             else {
                 if(a instanceof Esconder) {
                 Esconder u =(Esconder)a;
                 
                 if(u.getData().get(Calendar.MONTH)==mes){
                 nrCachesEscondidas++;
                 tempoEscondidas+=u.getDuracao();
            
                }
           
        
            }
        
        
            
            else if(a instanceof Cache_evento) {
                 Cache_evento u =(Cache_evento) a;
                 if(u.getData().get(Calendar.MONTH)==mes){
                nrEventos++;
            }
               }
            
            
        }
    }
    }
      
        
        return new String("Actividade de procura  :  "+ "   "+  nrActividadesDeProcura + "\nTempo gasto na actividade de procura :  " +"    "+ tempoProcura + 
         "\nActividade de Lazer " +"      " +nrPasseios + "\nTempo gasto na actividade de lazer :"+"     "+tempoPasseios + "\nActividade de escoder cache:   "+"      " +nrCachesEscondidas + 
         "\nTempo gasto na activiade de esconder :  "+ "   "+tempoEscondidas + "\nEventos : " +"      "+ nrEventos );
        
        
    }
          
        
        /**
         * Estatistica anual
         */
        
       
        public String estatisticaAnual (int ano)
        {
             int nrActividadesDeProcura=0;
        int nrPasseios=0;
        int nrEventos=0;
        int nrCachesEscondidas=0;
        
        int tempoPasseios=0;
        int tempoEscondidas=0;
        int tempoProcura=0;

          for(Actividade a:this.actividadesRealizadas) {
                
             
                 if(a instanceof Procura) {
                 Procura u =(Procura)a;
                if(u.getData().get(Calendar.YEAR)==ano) { 
                  
                nrActividadesDeProcura++;
                tempoProcura+=u.getDuracao();
            }
            
        }
            
            else{
                
                if(a instanceof Virtual) {
                 Virtual u=(Virtual)a;
                 if(u.getData().get(Calendar.YEAR)==ano){
                 nrPasseios++;
                 tempoPasseios+=u.getDuracao();
                }
                 
            }
                 
             
                 else {
                 
                     if(a instanceof Esconder) {
                 Esconder u =(Esconder)a;
                 
                 if(u.getData().get(Calendar.YEAR)==ano){
                 nrCachesEscondidas++;
                 tempoEscondidas+=u.getDuracao();
            
                }
           
        }
            
               
           else if(a instanceof Cache_evento) {
                 Cache_evento u =(Cache_evento) a;
                 if(u.getData().get(Calendar.YEAR)==ano){
                nrEventos++;
            }
               
        }
            }
            
            
        }
    }
        
        return new String("Actividade de procura : " + "      " +  nrActividadesDeProcura + "     "+ "\nTempo gasto na actividade de procura :" +"        " + tempoProcura + 
         "\nActividade de Lazer " + "   "+ nrPasseios + "\nTempo gasto na actividade de lazer :" + "     " +tempoPasseios + "\nActividade de escoder cache  " +"     " + nrCachesEscondidas + 
         "\nTempo gasto na activiade de esconder : " + "     "+ tempoEscondidas + "\nEventos : "+"     " + nrEventos );
        
        
    
        }
     
        /**
         * Estatistica mensal das caches
         */
        
        public String estatisticaMensalCache(int mes) {
        
         int nrMicroCaches=0;
         int nrMultCaches=0;
         int nrCacheMisterio=0;
         
         for(Cache u :this.caches.values()){
            
             if(u instanceof Micro_cache) {
              if(u.getData().get(Calendar.MONTH) ==mes) {
                nrMicroCaches++;
                
                }
              }
              else if (u instanceof Mult_cache) {
                if(u.getData().get(Calendar.MONTH) ==mes) {
                nrMultCaches++;
                }
                }
                else if (u instanceof Cache_misterio) {
                
                if(u.getData().get(Calendar.MONTH)-1 ==mes) {
                nrCacheMisterio++;
                }
                }
                
            
            }
            return new String("Micro caches encontradas: " +"     " + nrMicroCaches + "\nNumero de Multicaches encontradas" +"   "+nrMultCaches + "\nNumero de caches misterios encontradas" +"   "+  nrCacheMisterio);
            
            
            }
        
            /**
             * Estatisticas anuais das caches
             */
        
        
        public String estatisticaAnualCache(int ano) {
        
         int nrMicroCaches=0;
         int nrMultCaches=0;
         int nrCacheMisterio=0;
         
         for(Cache u :this.caches.values()){
            
             if(u instanceof Micro_cache) {
              if(u.getData().get(Calendar.YEAR) ==ano) {
                nrMicroCaches++;
                
                }
              }
              else if (u instanceof Mult_cache) {
                if(u.getData().get(Calendar.YEAR) ==ano) {
                nrMultCaches++;
                }
                }
                else if (u instanceof Cache_misterio) {
                
                if(u.getData().get(Calendar.YEAR) ==ano) {
                nrCacheMisterio++;
                }
                }
                
            
            }
            return new String("Micro caches encontradas "+"  " + nrMicroCaches +"\n"+ "Numero de Multicaches encontradas" +nrMultCaches + "  "+"\nNumero de caches misterios encontradas" + "   "+nrCacheMisterio);
            
            
            }
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    */
    
    
           
}