import javakarol.Roboter;


/**
 * ############ ##### ######## ##### ### #####
 * 
 * ######### ### #### ############# ### ######## ########## ### ### ### ####### 
 * ##### ######### ### #### ####### ### ########## ###### ######.
 * 
 * ### ###### ####### ### #### ######### ### ######## ### ########## ## ### 
 * ################## ####. ## ###### ### ######## ######## ### ### ##########
 * ### #########. ## ##### #### ###### #### ####### ####### ### ###### ####### ####### 
 * (#.##. ####### #). ### ##### ############# ### #### #### #### ##### ### ###
 * ####### ######.
 * 
 * ### ###### ####### ### #### ########### ### ###### ####### ### ### ##### #########.###.
 * ### #### ## ##### #####-####### ###### ######### ######. ### ### ###### #######
 * ###### ## ### ################### ##### ####### ####### ### ####### ######.
 * ### ############# ### ############### ## ############### ### ##### ###### ###### ######## ###
 * ###### ####### ## ### ###### ####### ###### ######### (##### ###### ### ######## ########).
 * ### ########## ######## ###### #### "###### ### #######" ########## ######.
 * 
 * 
 * @###### #### ##########
 * 
 * @####### #.# (##.#.####)
 * 
 */

public class ROBOTER extends Roboter {

	/**
	 * Erzeugen eines neuen Roboters mit vorgegebener Startposition 
	 * 
	 * Vorher muss ein Objekt der Klasse WELT angelegt werden, in der der Roboter lebt. 
	 * 
	 * @param Startposition (startX, startY) mit 1..WeltBreite bzw. 1..WeltLänge 
	 * @param Startblickrichtung 'S','W','N','O' 
	 * @param Referenz auf die Welt in der der Roboter leben soll 
	 * 
	 */
	public ROBOTER(int startX, int startY, char startBlickrichtung, WELT inWelt)
	{
		super(startX, startY, startBlickrichtung, inWelt);
	}
	
	/**
	 * Erzeugen eines neuen Roboters aufgrund der Einstellungen in einer Karolwelt-Datei 
	 * 
	 * Vorher muss ein Objekt der Klasse WELT angelegt werden, in der der Roboter leben soll. 
	 * Wenn dieses Weltobjekt aus einer Karolwelt-Datei geladen wurde, dann werden 
	 * die dortigen Robotereinstellungen verwendet, sonst ein Default-Roboter 
	 * mit (1,1) und Blickrichtung 'S' 
	 * 
	 * @param Referenz auf die Welt in der der Roboter leben soll
	 * 
	 */
	public ROBOTER(WELT inWelt)
	{
		super(inWelt);
	}
	
	
	/**
	 * Der Roboter macht einen Schritt nach vorne
	 */
	public void Schritt()
	{
		super.Schritt();
	}
	
	
	
	/**
	 * Der Roboter dreht sich nach Links (gegen den Uhrzeigersinn)
	 */
	public void LinksDrehen()
	{
		super.LinksDrehen();
	}
	
	
	/**
	 * Der Roboter dreht sich nach Rechts (im Uhrzeigersinn)
	 */	
	public void RechtsDrehen()
	{
		super.RechtsDrehen();
	}
	
	
	/**
	 * Der Roboter legt vor sich einen Ziegel hin
	 */
	public void Hinlegen()
	{
		super.Hinlegen();
	}
	
	
	/**
	 * Der Roboter hebt vor sich einen Ziegel auf
	 */
	public void Aufheben()
	{
		super.Aufheben();
	}
	
	
	/**
	 * Der Roboter setzt auf der Kachel unter ihm eine Marke
	 */
	public void MarkeSetzen()
	{
		super.MarkeSetzen();
	}
	
	
	/**
	 * Der Roboter entfernt von der Kachel unter ihm eine Marke
	 */	
	public void MarkeLoeschen()
	{
		super.MarkeLoeschen();
	}
	
	
	/**
	 * Der Roboter gibt einen Piep-Ton aus
	 */
	public void TonErzeugen()
	{
		super.TonErzeugen();
	}
	
	
	/**
	 * Abfrage ob der Roboter vor einer Wand bzw. einem Quader steht
	 * 
	 * @return wenn zutrifft dann true
	 */
	public boolean IstWand()
	{
		return super.IstWand();
	}
	
	
	/**
	 * Abfrage ob vor dem Roboter ein Ziegel liegt
	 * 
	 * @return wenn zutrifft dann true
	 */
	public boolean IstZiegel()
	{
		return super.IstZiegel();
	}
	
	
	/**
	 * Abfrage ob links vom Roboter ein Ziegel liegt
	 * 
	 * @return wenn zutrifft dann true
	 */
	public boolean IstZiegelLinks()
	{
		return super.IstZiegelLinks();
	}
	
	
	/**
	 * Abfrage ob rechts vom Roboter ein Ziegel liegt
	 * 
	 * @return wenn zutrifft dann true
	 */
	public boolean IstZiegelRechts()
	{
		return super.IstZiegelRechts();
	}
	
	
	/**
	 * Abfrage ob sich unter dem Roboter eine Marke befindet
	 * 
	 * @return wenn zutrifft dann true
	 */
	public boolean IstMarke()
	{
		return super.IstMarke();
	}
	
	public void GeradeLinie(int n)
	{for (int i=0; i<=n; i++)
	    {super.Hinlegen();
	        super.Schritt();}
	       }
	       
	public void SchrägeLinie(int n)
	{for (int i=0; i<=n; i++)
	    {super.LinksDrehen();
	        super.Hinlegen();
	        super.Schritt();
	        super.Re
}