/**
 * ## ###### ##### ###### # ############# ## ######## ######### ### ###### ## ####### ########.
 */

public class Manipulador
{
    /**
     * Retorna a soma dos números.
     */
    public int retorneSoma(int[] numeros) {
        int soma = 0;
        
        for (int numero : numeros)
            soma = soma + numero;
        
        return soma;
    }

    /**
     * Retorna um array contendo os números que estão nas posições ímpares do array numeros.
     */
    public int[] retorneDePosicoesImpares(int[] numeros) {
        int[] retorneImpares;
        int cont= 0;
        int tamanhoArray= 0;
        
         for (int i=1; i < numeros.length; i = i+2) {
            tamanhoArray++;
        }
        
        retorneImpares= new int [tamanhoArray];
        
         for (int i=1; i < numeros.length; i= i+2) {
            retorneImpares[cont] = numeros[i];
            cont++;
        }
        
        return retorneImpares;
    }

    /**
     * Retorna o primeiro e o último número do array números. O método deve retornar um array
     * de tamanho zero caso o array numeros tiver menos de 2 números.
     */
    public int[] retornePrimeiroEUltimo(int[] numeros) {
        int[] primeiroUltimo;
        
        if (numeros.length < 2) {
            primeiroUltimo = new int [0];
        }
        else {
            primeiroUltimo = new int [] {numeros[0], numeros[numeros.length - 1]};
        }
        return primeiroUltimo;
    }

    /**
     * Retorna quantas vezes o numero aparece no array numeros.
     */
    public int retorneQuantasOcorrencias(int[] numeros, int numero) {
        int cont = 0;
        
        for (int i= 0; i < numeros.length; i++)
            if (numero == numeros[i])
                cont++;
                
        return cont;
    }

    /**
     * Retorna o maior número existente no array numeros. Considere que o 
     * array sempre tem pelo menos um número.
     */
    public int retorneMaiorNumero(int[] numeros) {
        return int numero = numeros[retornePosicaoDoMaiorNumero(numeros)];
    }

    /**
     * Retorna a posição do maior número existente no array numeros. Se o array tiver tamanho zero
     * então o método deve retornar -1.
     */
    public int retornePosicaoDoMaiorNumero(int[] numeros) {
        int posicaoNumero= 0;
        int maiorNumero= 0;
        
        if (numeros.length == 0) 
            posicaoNumero = -1;
        else {    
        
        for (int i= 0; i < numeros.length; i++) {
                if (numeros[i] > maiorNumero && numeros[i] > 0) {
                maiorNumero = numeros[i];
                posicaoNumero= i;
                }
                
                if (numeros[i] > maiorNumero && numeros[i] < 0) {
                maiorNumero = numeros[i];
                posicaoNumero= i;
                }
        }
    }
        return posicaoNumero;
    }

    /**
     *  Retorna quantos números do array numeros estão acima do limite.
     */
    public int retorneQuantidadeAcimaDeLimite(int[] numeros, int limite) {
        
        int cont=0;
        
        for (int i= 0; i < numeros.length; i++)
            if (numeros[i] > limite)
                cont++;
                
             
        return cont;
    }

    /**
     *  Retorna o valor médio do números do array numeros. Considere que o array sempre tem
     *  pelo menos um número.
     */
    public float retorneMedia(int[] numeros) {
        int soma= retorneSoma(numeros);
        
        return 1.0f * soma / numeros.length;
    }

    /**
     * Retorna quantos números do array numeros estão dentro do intervalo
     * (maiores ou iguais a limiteInferior e menores ou iguais a limiteSuperior).
     */
    public int retorneQuantosNoIntervalo(int[] numeros, int limiteInferior, int limiteSuperior) {
        int cont= 0;
        
        for (int i= 0; i < numeros.length; i++)
            if (limiteInferior <= numeros[i] && numeros[i] <= limiteSuperior)
                cont++;
        
        return cont;
    }

    /**
     * Multiplica os números contidos no array numeros por um fator.
     */
    public void multipliquePorFator(int[] numeros, int fator) {
        
        for (int i= 0; i < numeros.length; i++)
            numeros[i]= numeros[i] * fator;   
    }

    /**
     * Retorna novo array contendo os números do array numeros multiplicados por um fator.
     * Exemplo: para o array for [5,2,7] e o fator for 3 então o método deve retornar
     * o array [15, 6, 21]
     */
    public int[] retorneMultiplicadoPorFator(int[] numeros, int fator) {
        int[] copiaArray;
        
        copiaArray = new int [numeros.length];
        
        for (int i= 0; i < numeros.length; i++)
            copiaArray[i] = numeros[i] * fator;

        return copiaArray;
    }

    /**
     * Retorna uma cópia dos n primeiros números do array numeros. Se n for maior
     * que a quantidade de números do array então o método deve retornar uma cópia
     * de todos os números do array.
     */
    public int[] copieNPrimeiros(int[] numeros, int n) {

        int[] copiaArray;
        if (n > numeros.length) {
            copiaArray = new int [numeros.length];
            
            for (int i= 0; i <numeros.length ; i++)
            copiaArray[i] = numeros[i];
        }
        else{
           copiaArray = new int [n];
           
           for (int i= 0; i < n; i++)
           copiaArray[i] = numeros[i];
        }
            
        return copiaArray;
    }

    /**
     *  Retorna uma copia do array numeros.
     */
    public int[] retorneCopia(int[] numeros) {
        
        int[] copiaArray;
        copiaArray = new int [numeros.length];
        
        for (int i= 0; i < numeros.length; i++)
            copiaArray[i] = numeros[i];

        return copiaArray;
    }

    /**
     * Retorna os números do array numeros que estão dentro do intervalo
     * [limiteInferior, limiteSuperior]
     */
    public int[] retorneNumerosNoIntervalo(int[] numeros, int limiteInferior, int limiteSuperior) {
        int[] CopiaArray;
        CopiaArray = new int [limiteSuperior - limiteInferior + 1];
        int cont = 0;
        int []array;
        int tamanho= 0;
   
        for (int i = limiteInferior ; i <= limiteSuperior; i++) {
               CopiaArray [cont ] = i; 
               cont++;
        }
        cont = 0;
        if (numeros.length ==0)
            array = new int [0];
        else {
            
            for (int i = 0 ; i < numeros.length; i++) {
                for (int j = 0 ; j < numeros.length; j++) {
                    if (numeros[i] == CopiaArray[j]) {
                        tamanho++;
                    }
                }  
            }
            
            array = new int [tamanho];
            
            for (int i = 0 ; i < numeros.length; i++) {
                for (int j = 0 ; j < numeros.length; j++) {
                    if (numeros[i] == CopiaArray[j]) {
                        array[cont] = CopiaArray[j];
                        cont++;
                    }
                }  
            }
        }
        return array;   
        }
    
        


    /**
     * Retorna um array contendo os numeros dos arrays a1 e a2.
     */
    public int[] unaArrays(int[] a1, int[] a2) {

        int[] array;
        array= new int [a1.length + a2.length];
        int cont= a1.length;
        
       for (int i= 0; i < a1.length; i++) 
            array[i] = a1[i];
            
       for (int i = 0; i < a2.length;i++) {
            array[cont] = a2[i];
            cont= cont +1;
       }
       
       return array;
    }

    /**
     * Retorna um array contendo apenas os números pares do array numeros.
     */
    public int[] retornePares(int[] numeros) {
        int[] array;
        int quantidade = 0;
        int posicao = 0;
         for(int i= 0; i < numeros.length; i++) {
            if (numeros[i] % 2 == 0)
            quantidade++;
            
        }
    
        array= new int [quantidade];

        for(int i= 0; i < numeros.length; i++) 
            if (numeros[i] % 2 == 0) {
            array[posicao] = numeros[i];
            posicao++;
            }
        
        return array;
    }

    /**
     * Retorna um array com os números do array numeros duplicados.
     * Exemplo: se array for [8,3,2] entao o metodo deve retornar [8,8,3,3,2,2].
     */
    public int[] dupliqueArray(int[] numeros) {
        int[] array;
        array= new int [numeros.length * 2];
        int cont= 0;
        
        for (int i= 0; i < numeros.length; i++) {
            array[cont] = numeros[i];
            cont++;
            array[cont] = numeros[i];
            cont++;
            
        }
        
        return array;
    }

    /**
     *  Verifica se o array numeros possui pelo menos um número par.
     */
    public boolean possuiNumeroPar(int[] numeros) {
        boolean resultado = false;
        int constante= 0;
        
        while (resultado == false && constante < numeros.length) {
            resultado = numeros[constante++] % 2 == 0;
        }
        return resultado;
    }

    /**
     * Retorna a primeira posição de n no array numeros. Se n nao estiver no array deve retornar -1.
     * Exemplos: a) se numeros for [7,3,2,3,8] e n = 3 entao deve retornar 1.
     */
    public int retornePrimeiraPosicaoDeNumero(int[] numeros, int n) {
        int posicao = -1;
        int constante= 0;
        
        if (numeros.length == 0) {
            posicao = -1;
        }
        else {
            while (posicao == -1 && constante < numeros.length) {
             if (numeros[constante] == n) {    
                    posicao = constante;
                }
             constante++;
            }
        }
        
    return posicao;
}

    /**
     * Retorna um array com as posições do número n no array numeros.
     */
    public int[] retornePosicoesDeNumero(int[] numeros, int n) {
        int[] array;
        int cont= 0;
        int tamanhoArray = 0;
        
        if (numeros.length == 0)
                    array= new int [0];
        else {   
            for(int i= 0; i < numeros.length; i++) {
                if(numeros[i] == n) {
                    tamanhoArray++;
                }
            }
            array = new int [tamanhoArray];
            
            for(int i= 0; i < numeros.length; i++) {
                if(numeros[i] == n) {
                    array[cont] = i;
                    cont++;
                }
            }
        }
        return array;
    }

    /**
     * Verifica se o array possui ou não números repetidos. Deve retornar true se não tiver repetições ou false caso contrário.
     */
    public boolean semRepeticoes(int[] numeros) {
       boolean resultado= true;
       int constante1 = 0;
       int constante2 = 0;
        
       int[] array;
       array= new int [numeros.length];
       
        if (numeros.length >= 2) {
       
           for(int i= 0; i < numeros.length; i++) {
           array[i] = numeros[i];
           }
        
            while (constante1 < numeros.length && resultado == true) {
                while(constante2 < numeros.length && resultado == true) {
                    if (constante1 != constante2 && numeros[constante1] == array[constante2]) { 
                        resultado = false;
                    }
                    constante2++;
                }
                constante1++;
                constante2 = 0;
            }
        }
          
       return resultado;
    }
       
    /**
     * Retorna um array contendo os números do array numeros sem as ocorrências do número n.
     * Exemplo: se array for [8,2,3,2] e n for 2 então deve retornar [8,3].
     */
    public int[] retorneSemOcorrencias(int[] numeros, int n) {
       int[] array;
       int tamanhoArray = 0;
       int cont = 0;
       
       if (numeros.length == 0)
            array= new int [0];
       else {
               
           for(int i= 0; i < numeros.length; i++) {
               if (numeros[i] == n)
                    tamanhoArray++;
        }
        
            array= new int [numeros.length - tamanhoArray];

           for(int i= 0; i < numeros.length; i++) {
               if (numeros[i] != n) {
                    array[cont] = numeros[i];
                    cont++;
                }
        }
    }
       return array;
    }
    
}



    