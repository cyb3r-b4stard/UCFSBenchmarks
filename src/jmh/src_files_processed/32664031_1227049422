
/* #### ### #### ### ##########
 * ####: ######## ########
 * ########: ##########
 * ##: #########
 */

import ecs100.*;
import java.io.*;
import java.net.Socket;
import java.util.*; 
import javax.swing.JButton;

/**
 * ##### ### #### ###### 
 */

public class ChatClient implements Runnable{
    private String SERVER = "irc.ecs.vuw.ac.nz";  
    private static final int IRC_PORT = 6667;     

    private static Socket socket;
    private static PrintStream serverOut;
    private static Scanner serverIn;

    private JButton connect;
    private JButton disconnect;
    private JButton joinChannel;
    private JButton listChannels;
    private JButton leaveChannel;
    private JButton listUsers;

    ArrayList<TextWindow> textWindows = new ArrayList<TextWindow>();

    /**
     * main: construct a new ChatClient
     */
    public static void main(String[] args) {
        ChatClient cc = new ChatClient();
        cc.setUpInterface();
    }

    /** Called when a new thread is created to listen to the server */
    public void run(){
        listenToServer(); 
    }

    /**
     * constructor
     */
    public ChatClient (){ 

    }

    /**sets up interface */
    public void setUpInterface(){
        connect = UI.addButton("Connect", this::connect);
        disconnect = UI.addButton("Disconnect", this::closeConnection);
        disconnect.setEnabled(false);
        listChannels = UI.addButton("List channels", this::listChannels).setEnabled(false);
    }

    /**
     * If there is currently an active socket, it should close the
     *  connection and set the socket to null.
     * Creates a socket connected to the server. 
     * Creates a Scanner on the input stream of the socket, 
     *  and a PrintStream on the output stream of the socket.
     * Logs in to the server (calling the loginToServer Message)
     * Once login is successful, starts a separate thread to
     *  listen to the server and process the messages from it.
     */
    public void connect(){
        try {
            if(socket != null){
                if(!socket.isClosed()){
                    closeConnection();
                }
            }

            socket = new Socket(SERVER, IRC_PORT);
            serverIn = new Scanner(socket.getInputStream());
            serverOut = new PrintStream(socket.getOutputStream(), true);

            if(!login()){
                UI.println("Login failed");
                closeConnection();
                return;
            }

            disconnect.setEnabled(true);
            listChannels.setEnabled(true);
            
            ChatClient serverListener = new ChatClient();
            new Thread(serverListener).start();

        }catch(IOException e){UI.println("IO failure "+ e);}

    }

    /*
     * Attempt to log in to the Server and return true if successful, false if not.
     *  Ask user for username and real name
     *  Send info to server (NICK command and USER command)
     *  Read lines from server until get a message containing 004 (success) or
     *   a message containing 433 (failure - nickname in use)
     *  (For debugging, at least, print out all lines from the server)
     */
    private boolean login(){
        String username = UI.askToken("Enter your usercode: ");
        String realname = UI.askString("Enter your real name: ");

        serverOut.print("NICK " + username + " \r\n");
        serverOut.print("USER " + username + " 0 unused :" + realname + "\r\n");

        while(true){ 
            String received = serverIn.nextLine();
            UI.println(received);
            if(received.contains("004")){ 
                break;
            } else if (received.contains("433")){ 
                UI.println("Username in use, try again");
                return false;
            }
        }

        return true;

    }

    /** Asks the server for a list of the available channels */
    public void listChannels(){
        String message = "LIST \r\n";
        serverOut.print(message);
    }
    
    
    
    /**
     * Send a message to the current server:
     *  - check that the socket and the serverOut are not null
     *  - print the message with a \r\n at the end to serverOut
     *  - flush serverOut (to ensure the message is sent)
     */
    private void send(String msg){
        /*# YOUR CODE HERE */

    }

    /**
     * Method run in the the thread that is listening to the server.
     * Loop as long as there is anything in the serverIn scanner:
     *   Get and process the next line of input from the scanner
     *   Simple version: 
     *    prints the line out for the user
     *    Checks if the line contains "SQUIT",
     *       if so, close the socket, set serverIn and serverOut set the quit the program.
     *      if the line contains "PING", send a PONG message back
     *        (must be identical to the line, but with "PING" replaced by "PONG")
     *   Better version parses the line into source, command, params, finalParam
     *    (where the source and finalParam are optional, and params may be empty)
     *    Then deals with the message appropriately.
     */
    private void listenToServer() {
        try{
            while (true) {
                String message = serverIn.nextLine();
                UI.println("Thread 2 Received: "+ message);
                String[] splitMessage = message.split(" ");
                if (splitMessage[0].equals("SQUIT")) {
                    UI.println("Thread 2 stopping because server sent SQUIT");
                    break;
                } else if (splitMessage[0].equals("PING")) { 
                    String response = message.replace("PING", "PONG");
                    UI.println("Thread 2 Sent: " + response);
                    serverOut.print(response+"\r\n");
                } else if (splitMessage[1].equals("PRIVMSG")){
                }
                if(socket.isClosed()){
                    UI.println("Thread 2 stopping because socket is closed");
                    break;
                }
            }
            closeConnection();
        } catch (NoSuchElementException e) { 
            UI.println("Thread 2: Stopped listening to the server");
        }

    }

    /**
     * Close the connection:
     *  - close the socket,
     *  - set the serverIn and serverOut to null
     *  - print a message to the user
     */
    public void closeConnection(){
        try {
            serverOut.print("QUIT\r\n");
            socket.close();
            serverOut = null;
            serverIn = null;
            UI.println("Disconnected from sever");
        } catch(IOException e){ UI.println("Disconnection failed: " + e);}
    }
}