
/**
 * ##### # ########### ## ##### ########## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class ArrayQueue<E> implements Queue<E>
{
    /**
     * the array data is where all the entered values go;
     * because of issues with generic arrays we use an array with component type Object
     */
    private Object data[];
    private int insertLocation;
    private int queueLength; 

    public ArrayQueue(int capacity) {
        if (capacity<1) throw new IllegalArgumentException();
        insertLocation = 0;
        queueLength = 0;
        data = new Object[capacity];
    }

    /**
     * @param e is added to queue at the end
     * @returns false if queue is already full
     */
    public boolean add(E e) {

        return false; 
    }

    public boolean isFull() {
        if(queueLength == capacity)
        {
            return true;
        }
        else
        {
        return false;
        ]
    }

    public boolean isEmpty() {
        if(queueLength == 0)
        {       
            return true;
        }
        else
        {
            return false;
        }
    }

    public int capacity() {
        return data.length;
    }

    /**
    * removes the head of the queue and returns it
    * returns null if queue is empty
    */
    @SuppressWarnings("unchecked")
    public E poll(){
        return null; 
    }
}