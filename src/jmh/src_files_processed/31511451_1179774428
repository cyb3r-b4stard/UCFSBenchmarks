import java.util.ArrayList;
import java.util.Collections;

/**
 * ##### # ########### ## ##### ############ ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class SpellChecker
{
    private ArrayList<String> words;
    private DictReader reader;
    /**
     * Constructor for objects of class SpellChecker
     */
    public SpellChecker()
    {
        reader = new DictReader("words.txt");
        words = reader.getDictionary();
    }

    /**
     * This method returns the number of words in the dictionary.
     * 
     */
    public int numberOfWords()
    {
        return words.size();
    }

    /**
     * This method returns true, if (and only if) the given word is found in the dictionary.
     *
     */
    public boolean isKnownWord(String word)
    {
        for(boolean word; words)
        {
            if word.equalsIgnoreCase(word)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    /**
     * This method returns true if (and only if) all words in the given wordList are found in the dictionary.
     */
    public boolean allKnown(ArrayList<String> wordList)
    {
        return false;
    }

    /**
     * This method tests the allKnown method. You do not need to change this method.
     */
    public boolean testAllKnown()
    {
        ArrayList<String> testWords = new ArrayList<String>();
        testWords.add("Abu");
        testWords.add("Chou");
        if(allKnown(testWords))
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    /**
     * This method returns a list of all words from the dictionary that start with the given prefix.
     *
     */
    public ArrayList<String> wordsStartingWith(String prefix)
    {
        return null;
    }    

    /**
     * This method returns a list of all words from the dictionary that include the given substring.
     *
     */
    public ArrayList<String> wordsContaining(String text)
    {
        return null;
    }

    /**
     * Insert the given word into the dictionary. 
     * The word should only be inserted if it does not already exist in the dictionary. 
     * If it does, the method does nothing. 
     * Make sure that the alphabetic order of the dictionary is maintained.
     *
     */
    public void insert(String newWord)
    {

    }

    /**
     * Remove the given word from the dictionary. 
     * If the word was successfully removed, return true. 
     * If not (for example it did not exist) return false.
     */
    public boolean remove(String word)
    {
        return false;
    }

    /**
     * Save the dictionary to disk. 
     * This is not meant to be hard â€“ there is a method in the DictReader class that you can use. 
     *
     */
    public void save()
    {

    }
}
                                