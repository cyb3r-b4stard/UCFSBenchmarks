public class Battleship
{
private int[][] board;
final int NOSHIP = 0;
final int SHIP = 1;
final
int SUNKENSHIP =-1;
public Battleship(int rows, int columns) {
board = new int[rows][columns];
for (int r = 0; r < rows; r++) {
for (int c = 0; c < columns; c++) {
 board[r][c] = NOSHIP;
}
}
}
public void addShip(int r, int c) {
if (!shipAt(r,c))
board[r][c]
= SHIP
;
}
public boolean shipAt(int r, int c) {
if ( (r>=0 && r< board.length) && (c>=0 && c< board[0].length))
return (board[r][c] == SHIP);
else
System.out.println("Invalid Coordinates");
return false;
}
public boolean sink(int r, int c) {
if (shipAt(r,c)) {
board[r][c] = SUNKENSHIP
;
return true;
} else {
return false;
}
}
public int countSunken(int rows, int columns) {
    int count = 0;
    for (int r = 0; r < rows; r++){
        for (int c= 0; c< columns; c++){
            if (board[r][c] == SUNKENSHIP){
                count++;
            }
        }
    }
    return count;

}
public void print() {
for (int r = 0; r < board.length; r++) {
for (int c = 0; c < board[0].length; c++) {
if (board[r][c] == NOSHIP
) {
System.out.print(" ~ ");
} else if (board[r][c] == SHIP
) {
System.out.print(" v ");
} else {
System.out.print(" x ");
}
}
System.out.println();
}
}
public void fillBoard(int num)
{
    Random generator = new Random();
    for (int count = 0; count< num; count++){
    int xCoord = generator.nextInt(10);
   int yCoord = generator.netInt(10);
   addShip(xCoord, yCoord); }
   
    
}
