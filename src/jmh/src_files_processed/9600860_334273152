/* ### ######### ############# ####:
 * ####:
 */

/*
 * #### ####### ######### ###### ##### ######################### ## ##### ## #######!
 */

public class MyArrayList<E> {

    /* Internal Object counter */
    protected int objectCount;

    /* Internal Object array */
    protected E [] internalArray;

    /* Constructor: Create it with whatever capacity you want? */
    @SuppressWarnings("unchecked")
    public MyArrayList() {
        this.internalArray = (E[])new Object[100];
    }

    /* Constructor with initial capacity */
    @SuppressWarnings("unchecked")
    public MyArrayList(int initialCapacity){
        this.internalArray = (E[])new Object[initialCapacity];
    }

    /* Return the number of active slots in the array list */
    public int size() {
        return internalArray.length;
        /* ---- YOUR CODE HERE ---- */
    }

    /* Are there zero objects in the array list? */
    public boolean isEmpty() {
        if(objectCount==0)
        {
            return true;
        }
        return false;
        /* ---- YOUR CODE HERE ---- */
    }

    /* Get the index-th object in the list. */
    public E get(int index) {
        return internalArray[index];
        /* ---- YOUR CODE HERE ---- */
    }

    /* Replace the object at index with obj.  returns object that was replaced. */
    public E set(int index, E obj) {
        E oldValue = internalArray[index];
        internalArray[index]=obj;
        return oldValue;

        /* ---- YOUR CODE HERE ---- */
    }

    /* Insert an object at index */
    @SuppressWarnings("unchecked")
    public void add(int index, E obj) {
        E[] temp = new Object[internalArray.length+1];
        this.internalArray = (E[])new Object[internalArray.length+1];
        int x= 0;
        int y= 0;
        for(int i=index; i<internalArray.length; i++)
        {
            temp[x].equals(internalArray[i]);
            x++;
        }
        internalArray[index]=obj; 
        for(int i=index+1; i<internalArray.length+temp.length; i++)
        {
            internalArray[i]=temp[y];
            y++; 
        }

        
        /* ---- YOUR CODE HERE ---- */
    }

    /* Add an object to the end of the list; returns true */
    @SuppressWarnings("unchecked")
    public boolean add(E obj) {
        E[] temp;
        this.internalArray = (E[])new Object[internalArray.length+1];

        for(int i=0; i<internalArray.length; i++)
        {
            temp[i]=internalArray[i];
        }
        temp[internalArray.length+1]=obj; 
        return true;

        /* ---- YOUR CODE HERE ---- */
    }

    /* Remove the object at index and shift.  Returns removed object. */
    public E remove(int index) {
        E oldValue=internalArray[index];
        E[] temp;
        this.internalArray = (E[])new Object[internalArray.length-index];
        int x=0;
        int y=0;
        for(int i=index+1; i<temp.length; i++)
        {
            temp[x]=internalArray[i];
            x++;
        }
        for(int i=0; i<internalArray.length-1; i++)
        {
            internalArray[index+i]=temp[y];
            y++;
        }
        return oldValue;
        
        /* ---- YOUR CODE HERE ---- */
    }

    /* Removes the first occurrence of the specified element from this list, 
     * if it is present. If the list does not contain the element, it is unchanged. 
     * More formally, removes the element with the lowest index i such that
     * (o==null ? get(i)==null : o.equals(get(i))) (if such an element exists). 
     * Returns true if this list contained the specified element (or equivalently, 
     * if this list changed as a result of the call). */
    public boolean remove(E obj) {
        if(obj==null)
        {
            return true;
        }
        for(int i=0; i<internalArray.length; i++)
        {
        }
            
                
        /* ---- YOUR CODE HERE ---- */
    

    /* For testing; your string should output as "{ X X X X ... }" where X X X X ... are the elements in the array.
     * If the array is empty, it should return "{ }".  If there is one element, "{ X }", etc.
     * Elements are separated by a space. */
    public String toString() {
        /* ---- YOUR CODE HERE ---- */
    }

}