import java.util.*;
/**
 * ######## ##### #### - ##### # ########### ## ### ##### ####
 * 
 * @###### (#### #### ####)
 * @####### (####### ###### ## #### ####)
 */
public abstract class CarRental implements Car
{
    RegistrationNumber rn = new RegistrationNumber();
    public int a;
    public String b;
    public int c;
    public boolean bool=false;
    HashMap<String, Boolean> smallCar = new HashMap<String, Boolean>();
    HashMap<String, Boolean> largeCar = new HashMap<String, Boolean>();
    public String key;
    public Boolean value;


        
    public CarRental()
    {
       
    }
    
    public void addSmallCars()
    {
        for(int i =0; i <= 29; i++)
        {
           key = rn.registrationNumberS();
           value = rented();
           smallCar.put(key, value);
       }
    }
    
    public void addLargeCars()
    {
        for(int i = 0; i <= 19; i++)
        {
            key = rn.registrationNumberL();
            value = rented();
            largeCar.put(key, value);
        }
    }
    
    public int availableCars(String typeOfCar)
    {
        if(typeOfCar == "small")
        {
              if(smallCar.containsValue(false))
              {
                      c= smallCar.size();
              }   
        }
        else if(typeOfCar == "large")
        {
            if(largeCar.containsValue(false))
            {
                c = largeCar.size();
            }
        }
        else
        {
            System.out.println("not a type");
        }
        return c;
    }
    
    public keySet getRentedCars()
    {
        if(smallCar.containsValue(true))
        {
            Set keyset = smallCar.keySet();
        }
        if(largeCar.containsValue(true))
        {
            Set keyse = largeCar.keySet();
        }
            return keyset+keyse;
    }

        }
    
    public void bol()
    {
        if(bool == true)
        {
            bool = false;
        }
        else
        {
            bool = true;
        }
    }
    
    /**public String changeS()
    {
        smallCar.put(smallCar.get(rn.registrationNumberS()), bol());
    }*/
    
    public boolean rented()
    {
        return bool;
    }
   /** public void rent()
    {
       
        
        Iterator it = smallCar.entrySet().iterator();
        while(it.hasNext())
        {
        if(smallCar.containsValue(false))
        {
            
            change();
        }
        else
        {
            System.out.println("hh");
       }
        
    }*/
        

   
    abstract int getFuel(); 
    abstract int currentFuel();
    abstract boolean fullTank();
    abstract int addFuel(int add);
    abstract int drive(int km);
    
}
