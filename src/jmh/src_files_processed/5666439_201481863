/*## #: ######## ###### ######

###### ### ######## ###### #### ### #### #######.

# "######## ######" ## ###### ### ##### ## ### ########. #### ### ## ###### #########, ##### ####### ####
######## ######## ###### ### ### ######### ## ############ # ###### #### â…“ #### #### ########.

##### ### #### #### ######### ####### ### ### ###### ## ########.####, #### ###'# ## ########. #### ### ## ##
#### #### #### #### ## #### ####### #######.

### ##### ###### ###### #### #### ####:

-----
##### ######## ##: (#/#) (########## ## #.#)
###### ######## ##: (#/#) (########## ## #.################)

###: (#/#)
##########: (-#/#)
#######: (#/#)
########: (#/#)

### ### ######### #####? #####
## ### ##### ##### ## #/#? ####

### ######### ## ### ##### ######## ## #.
### ########### ## ### ##### ######## ## #.
######## ######### ## #, ### ########### ## #...
  ...### ### ###### ##: (#/#)

#### ## # ######## ## (#/#) (########## ## #.#)
######## ######## ## # ######## ## (-#/#) (########## ## -########)
### ## # ######## ## (#/#) (########## ## ###)
-----

### #### #### ## #### ## ########.####.*/

/**
 * ######## ## ## ###### ############ # "########" ######, ## ###
 * ##### ## # ########. ####### #### #### ### ## ###### #### ### ####
 * ## #### #### ##### ##########, ####### ### ######## ###### ########
 * ## <####>######</####>#.
 *
 * @######      ### #######
 * @#######     #.#
 */

class Rational {
    private int num, den;

    /** 
     * Create a new <code>Rational</code>, from its numerator and
     * denominator.
     * @since 1.0
     */
    
    public Rational (int numerator, int denominator) {
        numerator = num;
        denominator = den;
    }

    /** 
     * Add a second <code>Rational</code> to <code>this</code>.
     * @param other the other <code>Rational</code> to add
     * @return the resulting <code>Rational</code>
     * @since 1.0
     */
    
    
    public Rational add(Rational other){
        int addNumerator = num + other.num;
        int addDenominator = den + other.den;
        other = new Rational(addNumerator, addDenominator);
        return other;
    }

    /** 
     * Subtract a second <code>Rational</code> from <code>this</code>.
     * @param other the other <code>Rational</code> to subtract
     * @return the resulting <code>Rational</code>
     * @since 1.0
     */
    
    
    public Rational subtract(Rational other) {
        int subtractNumerator = num - other.num;
        int subtractDenominator = den - other.den;
        other = new Rational(subtractNumerator, subtractDenominator);
        return other;
    }

    /** 
     * Multiply a second <code>Rational</code> by <code>this</code>.
     * @param other the other <code>Rational</code> to multiply
     * @return the resulting <code>Rational</code>
     * @since 1.0
     */
    
    
    public Rational multiply(Rational other) {
        int multiplyNumerator = num * other.num;
        int multiplyDenominator = den * other.den;
        other = new Rational (multiplyNumerator, multiplyDenominator);
        return other;
    }

    /** 
     * Divide <code>this</code> by a second <code>Rational</code>.
     * @param other the other <code>Rational</code> by which to divide
     * @return the resulting <code>Rational</code>
     * @since 1.0
     */
    
    
    public Rational divide(Rational other) {
        int divideNumerator = num % other.num;
        int divideDenominator = den % other.den;
        other = new Rational (divideNumerator, divideDenominator);
        return other;
    }

    /** 
     * Calculate the <code>double</code> whose value best approximates
     * <code>this</code>'s value.
     * @return the approximate value
     * @since 1.0
     */
    
    
    public double toDouble() {
        double toDouble = num/den;
        return toDouble;
    }

    /** 
     * Build a <code>String</code> representing this
     * <code>Rational</code>, as <code>(numerator/denominator)</code>.
     * @return the String <code>(numerator/denominator)</code>
     * @since 1.0
     */
    
    
    public String toString() {
        return "(" + num + "/" + den + ")";
    }

    /** 
     * Build a <code>true</code> if <code>this</code> is equivalent to <code>other</code>; otherwise false.
     * @param other the other <code>Rational</code>
     * @return the whether they are equivalent
     * @since 1.0
     */
    
    
    public boolean equals(Rational other) {
        return (num == other.num && den == other.den);
    }

    /** 
     * Accessor for the numerator.
     * @return the numerator
     * @since 1.0
     */
    
    
    public int getNumerator() {
        return num;
    }

    /** 
     * Accessor for the denominator.
     * @return the denominator
     * @since 1.0
     */
    
    
    public int getDenominator() {
        return den;
    }

    /** 
     * Mutator for the numerator.
     * @param newNumerator the new numerator
     * @since 1.0
     */
    
    
    public void setNumerator(int newNumerator) {
        num = newNumerator;
    }

    /** 
     * Mutator for the denominator.
     * @param newDenominator the new denominator
     * @since 1.0
     */
    
    
    public void setDenominator(int newDenominator) {
        den = newDenominator;
    }

    private static int calcGCD(int int1, int int2) {
        if(int1 == 0 || int2 == 0){
            return 0;
        }
        
        
        int a = 0;
        int b = 0;
        if(Math.abs(int1) > Math.abs(int2)){
            a = Math.abs(int1);
            b = Math.abs(int2);
        }
        else {
            b = Math.abs(int1);
            a = Math.abs(int2);
        }
    
        for(int i = 0; ; i++) {
            if (a%b == 0){
                    break;
                }
            int prevB = b;
            a = prevB;
            b = a%b;
        }
        }
    return b;
    }
    





    private void reduce() {
       num = numerator/calcGCD();
       den = denominator/calcGCD();
    }
}