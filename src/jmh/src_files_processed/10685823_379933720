/*
 *
 * @######: ###### ####### & ###### ## ######
 * @#######: ## ####### ####
 */

public class LibMath {

    /*
     * @pre -
     * @post Retourne la moyenne des 3 nombres réels
     */

    public static double average(double a, double b, double c) {
    double somme = a+b+c;
    double moyenne = somme/3;
    return moyenne;
  }
    
    /*
     * @pre -
     * @post Retourne la valeur minimale des trois nombres réels
     */
    
    public static double minimum(double a, double b, double c) {
    double d = Math.min(a,b);
    double min = Math.min(c,d);
    return min;
  }
    
    /*
     * @pre -
     * @post Retourne la valeur maximale des trois nombres réels
     */
    
    public static double maximum(double a, double b, double c) {
    double d = Math.max(a,b);
    double max = Math.max(c,d);
    return max;
  }
    
    /*
     * @pre -
     * @post Retourne la valeur médiane des trois nombres réels
     */
    
    public static double median(double a, double b, double c) {
    double x = maximum(a,b,c);
    double y = minimum(a,b,c);
    if ((x==a && y==b) || (x==b && y==a)) {
        return c
    }
    if ((x==b && y==c) || (x==c && y==b)) {
        return a;
    }
    if ((x==a && y==c) || (x==c && y==a)) {
        return b;
    }
  }
  
    /*
     * @pre n>0
     * @post Retourne true si n est un nombre sublime, false sinon
     */
    
    public static boolean sublime(int n) {
        int nombre = nDiv(n); 
        int somme = sommeDiviseurs(n); 
        
        if (parfait(nombre) && parfait(somme)) {
            return true;                        
        }                                       
        else {
            return false;
        }
       
    }
    
    /*
     * @pre n>0
     * @post Retourne le nombre de diviseurs de n
     */
    
    public static int nDiv(int n) {
    int divisorCount = O;
    for (int testDivisor = 1; testDivisor <= n; testDivisor++) {
       if (n%testDivisor == 0) {
        divisorCount++;
       }
    }
    return divisorCount;
}
    
    /*
     * @pre n>0
     * @post retourne la somme des diviseurs entiers de n
     */
   
    public static int sommeDiviseurs(n) {
    int somme = 0
    for (int testDivisor = 1; testDivisor <= n; testDivisor ++) {
        if (n%testDivisor == 0) {
            somme = somme + testDivisor;
        }
    }
    return somme;
}

   /*
    * @pre n>0
    * @post Retourne true si n est un nombre parfait, false sinon
    */

   public static boolean parfait(int n) {
       
    }

    /*
     * @pre -
     * @post A teste la methode minimum
     */
    public static void test_minimum() {

    double a=1.0;
    double b=2.0;
    double c=3.0;
    int erreur=0;

    if(minimum(a,b,c)!=1.0) {
        System.out.println("Erreur : minimum(1.0,2.0,3.0)!=1.0");
        erreur++;
    }

    if(minimum(a,a,a)!=1.0) {
        System.out.println("Erreur : minimum(1.0,1.0,1.0)!=1.0");
        erreur++;
    }

    if(minimum(c,c,c)!=3.0) {
        System.out.println("Erreur : minimum(3.0,3.0,3.0)!=3.0");
        erreur++;
    }

    if(minimum(c,b,a)!=1.0) {
        System.out.println("Erreur : minimum(3.0,2.0,1.0)!=1.0");
        erreur++;
    }

    if(minimum(c,b,c)!=2.0) {
        System.out.println("Erreur : minimum(3.0,2.0,3.0)!=2.0");
        erreur++;
    }

    if(erreur==0) {
        System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode minimum");
    }
    else {
        System.out.print(erreur);
        System.out.print(" erreurs ont ete trouvees en utilisant la methode minimum");
    }

    }

    /*
     * @pre -
     * @post A teste la methode maximum
     */

    public static void test_maximum() {

    double a=1.0;
    double b=2.0;
    double c=3.0;
    int erreur=0;

    if(maximum(a,b,c)!=3.0) {
        System.out.println("Erreur : maximum(1.0,2.0,3.0)!=3.0");
        erreur++;
    }

    if(maximum(a,a,a)!=1.0) {
        System.out.println("Erreur : maximum(1.0,1.0,1.0)!=1.0");
        erreur++;
    }

    if(maximum(c,c,c)!=3.0) {
        System.out.println("Erreur : maximum(3.0,3.0,3.0)!=3.0");
        erreur++;
    }

    if(maximum(c,b,a)!=3.0) {
        System.out.println("Erreur : maximum(3.0,2.0,1.0)!=3.0");
        erreur++;
    }

    if(maximum(a,b,a)!=2.0) {
        System.out.println("Erreur : maximum(1.0,2.0,1.0)!=2.0");
        erreur++;
    }

    if(erreur==0) {
        System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode maximum");
    }
    else {
        System.out.print(erreur);
        System.out.print(" erreurs ont ete trouvees en utilisant la methode maximum");
    }
    
    }


    /*
     * @pre -
     * @post A teste la methode average
     */
    public static void test_average() {

    double a=1.0;
    double b=2.0;
    double c=3.0;
    int erreur=0;

    if(average(a,b,c)!=2.0) {
        System.out.println("Erreur : average(1.0,2.0,3.0)!=2.0");
        erreur++;
    }

    if(average(a,a,a)!=1.0) {
        System.out.println("Erreur : average(1.0,1.0,1.0)!=1.0");
        erreur++;
    }

    if(average(c,c,c)!=3.0) {
        System.out.println("Erreur : average(3.0,3.0,3.0)!=3.0");
        erreur++;
    }

    if(average(c,b,a)!=2.0) {
        System.out.println("Erreur : average(3.0,2.0,1.0)!=2.0");
        erreur++;
    }

    if(average(a,b,a)!=1.3333333333333333) {
        System.out.println("Erreur : average(1.0,2.0,1.0)!=1.3333333333333333");
        erreur++;
    }

    if(erreur==0) {
        System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode average");
    }
    else {
        System.out.print(erreur);
        System.out.print(" erreurs ont ete trouvees en utilisant la methode average");
    }
    
    }

    /*
     * @pre -
     * @post A teste la methode median
     */
    public static void test_median() {

    double a=1.0;
    double b=2.0;
    double c=3.0;
    int erreur=0;

    if(median(a,b,c)!=2.0) {
        System.out.println("Erreur : median(1.0,2.0,3.0)!=2.0");
        erreur++;
    }

    if(median(a,a,a)!=1.0) {
        System.out.println("Erreur : median(1.0,1.0,1.0)!=1.0");
        erreur++;
    }

    if(median(c,c,c)!=3.0) {
        System.out.println("Erreur : median(3.0,3.0,3.0)!=3.0");
        erreur++;
    }

    if(median(c,b,a)!=2.0) {
        System.out.println("Erreur : median(3.0,2.0,1.0)!=2.0");
        erreur++;
    }

    if(median(a,b,a)!=1.0) {
        System.out.println("Erreur : median(1.0,2.0,1.0)!=1.0");
        erreur++;
    }

    if(erreur==0) {
        System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode median");
    }
    else {
        System.out.print(erreur);
        System.out.print(" erreurs ont ete trouvees en utilisant la methode median");
    }
    
    }
    

    public static void main (String[] args) {


    test_minimum();
    test_maximum();
    test_average();
    test_median();

    }


}
