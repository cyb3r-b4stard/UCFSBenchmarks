
/*
 * ##### ###########;
##### ######.###########;

###### ##### ############### : ###############
{
    ###### ####### ######## = #######.####;

    ###### ######## ####### ###################(####### #####)
    {
        ##### #### = ########.# * #####.#######;
        ##### #### = ########.# * #####.#######;
        ##### #### = ########.# * #####.#######;
        ##### #### = #####.###(####);
        ##### #### = #####.###(####);
        ##### #### = #####.###(####);
        ##### #### = #####.###(####);
        ##### #### = #####.###(####);
        ##### #### = #####.###(####);


        #### = ### #######(#### * ####, -#### * ####, ####, #);
        #### = ### #######(#### * #### + #### * #### * ####, #### * #### - #### * #### * ####, -#### * ####, #);
        #### = ### #######(#### * #### - #### * #### * ####, #### * #### + #### * #### * ####, #### * ####, #);
        #### = ### #######(#, #, #, #);

        ###### ####.###################(#####);
    }
}
 */

public class Matrix{
    public Vector4 row1;
    public Vector4 row2;
    public Vector4 row3;
    public Vector4 row4;
    
    public Matrix(){
        row1 = new Vector4(0,0,0,0);
        row2 = new Vector4(0,0,0,0);
        row3 = new Vector4(0,0,0,0);
        row4 = new Vector4(0,0,0,0);
    }
    
    public void SetRotationMatrix(Vector3 euler){
        float radX = (float) Math.toRadians(euler.x);
        float radY = (float) Math.toRadians(euler.y);
        float radZ = (float) Math.toRadians(euler.z);
        float sinX = (float) Math.sin(radX);
        float cosX = (float) Math.cos(radX);
        float sinY = (float) Math.sin(radY);
        float cosY = (float) Math.cos(radY);
        float sinZ = (float) Math.sin(radZ);
        float cosZ = (float) Math.cos(radZ);


        row1 = new Vector4(cosY * cosZ, -cosY * sinZ, sinY, 0);
        row2 = new Vector4(cosX * sinZ + sinX * sinY * cosZ, cosX * cosZ - sinX * sinY * sinZ, -sinX * cosY, 0);
        row3 = new Vector4(sinX * sinZ - cosX * sinY * cosZ, sinX * cosZ + cosX * sinY * sinZ, cosX * cosY, 0);
        row4 = new Vector4(0, 0, 0, 1);
    }
    
    public Vector3 ApplyMatrix(Vector3 inVec){
        Vector4 point = new Vector4(row1.x * inVec.x + row1.y * inVec.y + row1.z * inVec.z + row1.w,
        row2.x * inVec.x + row2.y * inVec.y + row2.z * inVec.z + row2.w,
        row3.x * inVec.x + row3.y * inVec.y + row3.z * inVec.z + row3.w,
        row4.x * inVec.x + row4.y * inVec.y + row4.z * inVec.z + row4.w);
        return ((Vector3)point) / point.w;
    }
    }
}