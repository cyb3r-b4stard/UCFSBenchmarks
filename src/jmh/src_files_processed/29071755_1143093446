import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; 

/**
 * # ##### #### ########## # #######.  #### ##### ######## #### 
 * ############# ### ###### ### ####### ## ### ############# ##
 * ### ####### #####.  
 * 
 * @###### ####### ####### #######@##.######.###
 */
public class Picture extends SimplePicture 
{

    /**
     * Constructor that takes no arguments 
     */
    public Picture ()
    {
        /* not needed but use it to show students the implicit call to super()
         * child constructors always call a parent constructor 
         */
        super();  
    }

    /**
     * Constructor that takes a file name and creates the picture 
     * @param fileName the name of the file to create the picture from
     */
    public Picture(String fileName)
    {
        super(fileName);
    }

    /**
     * Constructor that takes the width and height
     * @param height the height of the desired picture
     * @param width the width of the desired picture
     */
    public Picture(int height, int width)
    {
        super(width,height);
    }

    /**
     * Constructor that takes a picture and creates a 
     * copy of that picture
     * @param copyPicture the picture to copy
     */
    public Picture(Picture copyPicture)
    {
        super(copyPicture);
    }

    /**
     * Constructor that takes a buffered image
     * @param image the buffered image to use
     */
    public Picture(BufferedImage image)
    {
        super(image);
    }


    /**
     * Method to return a string with information about this picture.
     * @return a string with information about the picture such as fileName,
     * height and width.
     */
    public String toString()
    {
        String output = "Picture, filename " + getFileName() + 
            " height " + getHeight() 
            + " width " + getWidth();
        return output;

    }

    /** Method to set the blue to 0 */
    public void zeroBlue()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setBlue(0);
            }
        }
    }

    /** Method to set the red to 0 */
    public void zeroRed()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setRed(0);
            }
        }
    }

    /** Method to set the green to 0 */
    public void zeroGreen()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setGreen(0);
            }
        }
    }

    public void negatePixels()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                pixelObj.setGreen(255 - pixelObj.getGreen());
                pixelObj.setBlue(255 - pixelObj.getBlue());
                pixelObj.setRed(255 - pixelObj.getRed());
            }
        }
    }

    public void grayScale()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                int average = (pixelObj.getGreen() + pixelObj.getRed() + pixelObj.getBlue()) / 3;
                pixelObj.setGreen(average);
                pixelObj.setBlue(average);
                pixelObj.setRed(average);
            }
        }
    }

    public void fixUnderwater()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (Pixel[] rowArray : pixels)
        {
            for (Pixel pixelObj : rowArray)
            {
                if(pixelObj.getBlue() > 173)
                {
                    pixelObj.setBlue(225);
                }
                if(pixelObj.getBlue() < 173)
                {
                    pixelObj.setBlue(pixelObj.getBlue() - 100);
                }
            }
        }
    }

    /** Method that mirrors the picture around a 
     * vertical mirror in the center of the picture
     * from left to right */
    public void mirrorVertical()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int width = pixels[0].length;
        for (int row = 0; row < pixels.length; row++)
        {
            for (int col = 0; col < width / 2; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][width - 1 - col];
                rightPixel.setColor(leftPixel.getColor());
            }
        } 
    }

    public void mirrorHorizontal()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel originalPixel = null;
        Pixel copyPixel = null;
        int numRows = pixels.length;
        for (int row = 0; row < numRows / 2; row++)
        {
            for (int col = 0; col < pixels[0].length; col++)
            {
                originalPixel = pixels[row][col];
                copyPixel = pixels[numRows - 1 - row][col];
                copyPixel.setColor(originalPixel.getColor());
            }
        } 
    }

    public void mirrorHorizontalBotToTop()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel originalPixel = null;
        Pixel copyPixel = null;
        int numRows = pixels.length;
        for (int row = 0; row < numRows / 2; row++)
        {
            for (int col = 0; col < pixels[0].length; col++)
            {
                originalPixel = pixels[numRows - 1 - row][col];
                copyPixel = pixels[row][col];
                copyPixel.setColor(originalPixel.getColor());
            }
        } 
    }

    public void mirrorDiagonal()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel originalPixel = null;
        Pixel copyPixel = null;
        int numRows = pixels.length;
        for (int row = 0; row < numRows; row++)
        {
            for (int col = 0; col < numRows; col++)
            {
                originalPixel = pixels[row][col];
                copyPixel = pixels[col][row];
                copyPixel.setColor(originalPixel.getColor());
            }
        } 
    }

    public void BlueScreen()
    {
        Pixel[][] pixels = this.getPixels2D();
        Picture back = new Picture("20160222_132207.jpg");
        Pixel[][] background = back.getPixels2D();
        for (int i = 0; i < pixels.length; i++)
        {
            for (int j = 0; j < pixels[0].length; j++)
            {
                if(pixels[i][j].getBlue() > 50 && pixels[i][j].getRed() < 90)
                {
                    pixels[i][j].setBlue(background[i][j].getBlue());
                    pixels[i][j].setRed(background[i][j].getRed());
                    pixels[i][j].setGreen(background[i][j].getGreen());
                }
            }
        }
    }

    public void Posterize()
    {
        Pixel[][] pixels = this.getPixels2D();
        for (int i = 0; i < pixels.length; i++)
        {
            for (int j = 0; j < pixels[0].length; j++)
            {
                if(pixels[i][j].getBlue() > 0 && pixels[i][j].getBlue() < 63)
                {
                    pixels[i][j].setBlue(32);
                }
                if(pixels[i][j].getBlue() > 63 && pixels[i][j].getBlue() < 127)
                {
                    pixels[i][j].setBlue(96);
                }
                if(pixels[i][j].getBlue() > 127 && pixels[i][j].getBlue() < 198)
                {
                    pixels[i][j].setBlue(160);
                }
                if(pixels[i][j].getBlue() > 198 && pixels[i][j].getBlue() < 255)
                {
                    pixels[i][j].setBlue(224);
                }
                if(pixels[i][j].getRed() > 0 && pixels[i][j].getRed() < 63)
                {
                    pixels[i][j].setRed(32);
                }
                if(pixels[i][j].getRed() > 63 && pixels[i][j].getRed() < 127)
                {
                    pixels[i][j].setRed(96);
                }
                if(pixels[i][j].getRed() > 127 && pixels[i][j].getRed() < 198)
                {
                    pixels[i][j].setRed(160);
                }
                if(pixels[i][j].getRed() > 198 && pixels[i][j].getRed() < 255)
                {
                    pixels[i][j].setRed(224);
                }
                if(pixels[i][j].getGreen() > 0 && pixels[i][j].getGreen() < 63)
                {
                    pixels[i][j].setGreen(32);
                }
                if(pixels[i][j].getGreen() > 63 && pixels[i][j].getGreen() < 127)
                {
                    pixels[i][j].setGreen(96);
                }
                if(pixels[i][j].getGreen() > 127 && pixels[i][j].getGreen() < 198)
                {
                    pixels[i][j].setGreen(160);
                }
                if(pixels[i][j].getGreen() > 198 && pixels[i][j].getGreen() < 255)
                {
                    pixels[i][j].setGreen(224);
                }
            }
        }
    }

    public void mirrorArms()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel originalPixel = null;
        Pixel copyPixel = null;
        int numRows = pixels.length;
        for (int row = 162; row < 227; row++)
        {
            for (int col = 0; col < pixels[0].length; col++)
            {
                originalPixel = pixels[row][col];
                copyPixel = pixels[pixels.length - row + 120][col];
                copyPixel.setColor(originalPixel.getColor());
            }
        } 
    }

    public void mirrorGull()
    {
        Pixel[][] pixels = this.getPixels2D();
        Pixel originalPixel = null;
        Pixel copyPixel = null;
        int numRows = pixels.length;
        for (int row = 230; row < 326; row++)
        {
            for (int col = 219; col < 351; col++)
            {
                originalPixel = pixels[row][col];
                copyPixel = pixels[row][pixels[0].length - 1 - col];
                copyPixel.setColor(originalPixel.getColor());
            }
        } 
    }

    /** Mirror just part of a picture of a temple */
    public void mirrorTemple()
    {
        int mirrorPoint = 276;
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        int count = 0;
        Pixel[][] pixels = this.getPixels2D();

        for (int row = 27; row < 97; row++)
        {
            for (int col = 13; col < mirrorPoint; col++)
            {

                leftPixel = pixels[row][col];      
                rightPixel = pixels[row]                       
                [mirrorPoint - col + mirrorPoint];
                rightPixel.setColor(leftPixel.getColor());
                count++;
            }
        }
        System.out.println(count);
    }

    /** copy from the passed fromPic to the
     * specified startRow and startCol in the
     * current picture
     * @param fromPic the picture to copy from
     * @param startRow the start row to copy to
     * @param startCol the start col to copy to
     */
    public void copy(Picture fromPic, 
    int startRow, int startCol)
    {
        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();
        for (int fromRow = 0, toRow = startRow; 
        fromRow < fromPixels.length &&
        toRow < toPixels.length; 
        fromRow++, toRow++)
        {
            for (int fromCol = 0, toCol = startCol; 
            fromCol < fromPixels[0].length &&
            toCol < toPixels[0].length;  
            fromCol++, toCol++)
            {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }   
    }

    public void Pixelate(int squaresize)
    {
        System.out.println("height = " + this.getHeight());
        System.out.println("width = " + this.getWidth());
        for(int r = 0; r < this.getHeight() - squaresize; r = r + squaresize)
        {
            for(int c = 0; c < this.getWidth() - squaresize; c = c + squaresize)
            {
                System.out.println("row = " + r + ", column = " + c);

                int red = 0;
                int green = 0;
                int blue = 0;
                for(int i = r; i < r + squaresize; i++)
                {
                    for(int j = c; j < c+ squaresize; j++)
                    {
                        Pixel p = getPixel(j,i);
                        red = red + p.getRed();
                        blue = blue + p.getBlue();
                        green = green + p.getGreen();
                    }
                }

                red = red / (squaresize * squaresize);
                green = green / (squaresize * squaresize);
                blue = blue / (squaresize * squaresize);

                Color z = new Color(red, green, blue);
                System.out.println(z);

                for(int i = r; i < r + squaresize; i++)
                {
                    for(int j = c; j < c+ squaresize; j++)
                    {
                        Pixel p = getPixel(j,i);
                        p.setColor(z);
                    }
                }

            }
        }             
    }

    public void floodFill(int row, int col, Color c)
    {
        System.out.println("row = " +row + "col = "+ col);   
        
        if(row > this.getHeight() || col > this.getWidth())
        {
            System.out.println("Out of grid");
            return;
        }
        
        Pixel p = this.getColor(row, col);
        Color current = p.getColor();
        
        if(! current.getColor(Color.WHITE)
        {
            System.out.println("Not white");            
        }
    }

    public void colorCounter(Color c)
    {
        Pixel[][] pixels = this.getPixels2D();
        int counter = 0;
        for(int i = 0; i < pixels.length; i++)
        {
            for(int j = 0; j < pixels[0].length; j++)
            {
                if(pixels[i][j].getRed() == c.getRed() && pixels[i][j].getBlue() == c.getBlue() && pixels[i][j].getGreen() == c.getGreen() )
                {
                    counter++;
                }
            }
        }
        System.out.println(counter);
    }

    public void mostFrequentColor()
    {
        Pixel[][] pixels = this.getPixels2D();
        int[][][] colors = new int[256][256][256];
    }

    public void copy2(Picture fromPic, 
    int startRow, int startCol, int endRow, int endCol)
    {
        Pixel fromPixel = null;
        Pixel toPixel = null;
        Pixel[][] toPixels = this.getPixels2D();
        Pixel[][] fromPixels = fromPic.getPixels2D();
        for (int fromRow = startRow, toRow = endRow; 
        fromRow < fromPixels.length &&
        toRow < toPixels.length; 
        fromRow++, toRow++)
        {
            for (int fromCol = startCol, toCol = endCol; 
            fromCol < fromPixels[0].length &&
            toCol < toPixels[0].length;  
            fromCol++, toCol++)
            {
                fromPixel = fromPixels[fromRow][fromCol];
                toPixel = toPixels[toRow][toCol];
                toPixel.setColor(fromPixel.getColor());
            }
        }   
    }

    /** Method to create a collage of several pictures */
    public void createCollage()
    {
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");
        this.copy(flower1,0,0);
        this.copy(flower2,100,0);
        this.copy(flower1,200,0);
        Picture flowerNoBlue = new Picture(flower2);
        flowerNoBlue.zeroBlue();
        this.copy(flowerNoBlue,300,0);
        this.copy(flower1,400,0);
        this.copy(flower2,500,0);
        this.mirrorVertical();
        this.write("collage.jpg");
    }

    public void myCollage()
    {
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");
        Picture mainpic = new Picture("snowman.jpg");
        this.copy(flower1,0,0);
        this.copy(flower2,100,0);
        this.copy(flower1,200,0);
        this.mirrorVertical();
        this.copy(mainpic, 0, 150);

    }

    public void myCollage2()
    {
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");
        Picture mainpic = new Picture("caterpillar.jpg");
        this.copy(flower1,0,0);
        this.copy(flower2,100,100);
        this.copy(flower1,200,200);
        this.copy(mainpic, 0, 150);
        this.mirrorDiagonal();

    }

    public void myCollage3()
    {
        Picture flower1 = new Picture("flower1.jpg");
        Picture flower2 = new Picture("flower2.jpg");
        Picture mainpic = new Picture("robot.jpg");
        this.copy(flower1,0,0);
        this.copy(flower2,100,0);
        this.copy(flower1,200,0);
        this.copy(flower1,0,0);
        this.copy(flower2,100,100);
        this.copy(flower1,200,200);
        this.copy(mainpic, 0, 150);
        this.mirrorHorizontal();

    }

    /** Method to show large changes in color 
     * @param edgeDist the distance for finding edges
     */
    public void edgeDetection(int edgeDist)
    {
        Pixel leftPixel = null;
        Pixel rightPixel = null;
        Pixel[][] pixels = this.getPixels2D();
        Color rightColor = null;
        for (int row = 0; row < pixels.length; row++)
        {
            for (int col = 0; 
            col < pixels[0].length-1; col++)
            {
                leftPixel = pixels[row][col];
                rightPixel = pixels[row][col+1];
                rightColor = rightPixel.getColor();
                if (leftPixel.colorDistance(rightColor) > 
                edgeDist)
                    leftPixel.setColor(Color.BLACK);
                else
                    leftPixel.setColor(Color.WHITE);
            }
        }
    }


    /* Main method for testing - each class in Java can have a main 
     * method 
     */
    public static void main(String[] args) 
    {
        Picture beach = new Picture("beach.jpg");
        beach.explore();
        beach.zeroBlue();
        beach.explore();
    }

} 
