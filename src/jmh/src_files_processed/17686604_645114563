
/**
 * ### ############# ######## ####### ### ########## ###
 * ######### ####### ###### ### # #####.
 * 
 * @###### ##### #######
 * @####### ####### ####
 */
public class StockAnalyzer
{
    private String symbol;
    private double[] prices;
    
    /**
     * Create a new StockAnalyzer for the specified number of days.
     * This constructor also allocates space for the array that will 
     * hold the data.
     * 
     * @param tickerSymbol the symbol for the stock to analyze.

     * @param days the number of days for which to collect data.
     */
    public StockAnalyzer(String tickerSymbol, int days) { 
    }
    
    /**
     * Get the tickerSymbol for this StockAnalyzer.
     * 
     * @return the ticker symbol.
     */
    public String getTickerSymbol() {
        return "";
    }
    
    /**
     * Get the number of days of data that this StockAnalyzer contains.
     * 
     * @return the number of days of data.
     */
    public int getDays() {
        return 0;
    }
    
    /**
     * Set the closing price for a specified day. The closing price
     * for the most distant day is stored at index 0 and the closing
     * price for the most recent day is stored at the final index.
     * If accessing the specified day would cause an 
     * ArrayIndexOutOfBoundsError then print an error message.
     * 
     * @param day the day for which to set the closing price.
     * @param value the closing price of the stock.
     */
    public void setPrice(int day, double value) {
        if ((day >= 0 && day < (prices.length)) {
            prices[day] = value;
        } 
        else {
            System.out.println("Invalid Day!");
        }
    }
    
    /**
     * Get the closing price for a specified day. The closing price
     * for the most distant day is stored at index 0 and the closing
     * price for the most recent day is stored at the final index.
     * If accessing the specified day would cause an 
     * ArrayIndexOutOfBoundsError then print an error message.
     * 
     * @return the closing price of the stock on the specified day,
     * or -1 if the day is not valid.
     */
    public double getPrice(int day) {
        return 0;
    }
    
    /**
     * Fetch stock data from Yahoo Finance starting on the specified
     * day (or the first weekday following the specified day) and load 
     * the closing price data into the prices array. The oldest closing 
     * price is stored at index 0. The most recent closing price is stored
     * at the last index.
     * 
     * @param year the year in which to start fetching the data.
     * @param month the month in which to start fetching the data.
     * @param day the day on which to start fetching the data.
     */
    public void fetchClosingPrices(int year, int month, int day) {
        StockDataReader sdr = new StockDataReader(symbol, year, month, day);

       for (int dayNum=0; dayNum < prices.length; dayNum++) {
            StockData data = sdr.getNextDaysData();
            prices[dayNum] = data.getClosingPrice();
        }
    }
    
    /**
     * Compute and return the net change in value of the
     * stock over the period being analyzed.
     * 
     * @return the change in the value of the stock.
     */
    public double getNetChangeInValue() {
        return 0;
    }
    
    /**
     * Print the closing price data in this StockAnalyzer. The output
     * has the format shown below.  The closing price data is listed 
     * starting with the oldest data first.
     * <pre>
     * IBM: 32.19, 33.28, 28.98, ... , 29.74
     * </pre>
     */
    public void printClosingPrices() {
    }
    
    /**
     * Compute and return the average closing price of the stock 
     * during the period being analyzed.
     */
    public double getAveragePrice() {
        return 0;
    }
    
    /**
     * Find and return the maximum closing price of the stock
     * during the period being analyzed.
     * 
     * @return the maximum closing price.
     */
    public double getMaxPrice() {
        return 0;
    }
    
    /**
     * Find and return the minimum closing price of the stock
     * during the period being analyzed.
     * 
     * @return the minimum closing price.
     */
    public double getMinPrice() {
        return 0;
    }
    
    /**
     * Find and return the index of the day on which the
     * price of the stock was the highest of the period
     * being analyzed.  If there are ties, return the 
     * index of the most recent occurence of the maximum
     * price.
     * 
     * @return the index of the day with the maximum closing
     * price.
     */
    public int getDayOfMaxPrice() {
        return -1;
    }
    
    /**
     * Find and return the index of the day on which the
     * price of the stock was the lowest of the period
     * being analyzed.  If there are ties, return the 
     * index of the most recent occurence of the minimum
     * price.
     * 
     * @return the index of the day with the maximum closing
     * price.
     */
    public int getDayOfMinPrice() {
        return -1;
    }
   
    /**
     * Get the largest price difference during the period being
     * analyzed.  If the lowest price occurred before the highest 
     * price then the value returned by this method will be positive. 
     * If the highest price occurs first then the value returned by 
     * this method will be negative.
     * 
     * @return the largest price difference.
     */
    public double getLargestPriceDifference() {
        return 0;
    }
    
    /**
     * Determine if the stock price is volitile. The stock price is
     * volitile if the maximum and minimum prices are separated by
     * no more than the specified number of days.  Otherwise the stock
     * price is not volitile.
     * 
     * @param days a number of days.
     * @return true if the stock price is volitile and false otherwise.
     */
    public boolean isVolatilePeriod(int days) {
        return false;
    }
    
    /**
     * Determine if there are any pairs of days on which buying the
     * stock on one day and selling it on the other would lead to 
     * breaking even.  In other words, are there two days that have
     * the same closing price. If so, return true, otherwise return 
     * false.
     * 
     * @return true if there are break-even days and false if not.
     */
    public boolean hasBreakEvenDays() {
        return false;
    }
    
    /**
     * Compute the maximum profit per share that could be made on this stock 
     * using a single buy and a single sell during the period being analyzed.
     * If no profit can be made, this method returns 0.
     * 
     * @return the maximum profit or 0 if no profit can be made.
     */
    public double maxProfitPerShare() {
        return 0;
    }
    
    /**
     * Compute the profit or loss that would be experienced if the following 
     * trading strategy is used: Buy the specified number of shares on the 
     * first day of the period, sell the specified number of shares on the 
     * second day of the period, buy again on the third day, sell again on 
     * the fourth day, etc...  You can assume that there are at least two 
     * days in the period and that the number of days in the period is even.
     * 
     * @param shares the number of shares to buy and sell.
     * @return the profit or loss experienced by using the silly trading strategy.
     */
    public double sillyTrader(int shares) {
        return 0;
    }
   
    /**
     * Compute the profit or loss that would be experienced if the following
     * trading strategy is used: Buy the specified number of shares on the
     * first price increase of the period.  Sell the shares at the end of the
     * period. If there are no price increases during the period then this
     * method should return 0.
     * 
     * @param shares the number of shares to buy and sell.
     * @return the profit or loss experienced by using this trading strategy.
     */
    public double buyOnFirstIncrease(int shares) {
        return 0;
    }
    
    /**
     * Compute the profit or loss that would be experienced if the following
     * trading strategy is used.  Every time the stock price increases, buy
     * the specified number of shares.  Sell all of the shares on the final
     * day of the period being analyzed. If there are no price increases during 
     * the period then this method should return 0.
     *
     * @param shares the number of shares to buy and sell.
     * @return the profit or loss.
     */
    public double buyOnEveryIncrease(int shares) {
        return 0;
    }
    
    /**
     * Determine if the stock being analized is a dog or not.  The stock
     * is a dog if its price has decreased every day for the specified
     * number of days at the end of the period being analyzed.  Otherwise
     * it is not a dog. This method returns true if the stock is a dog and
     * false if it is not. If the specified number of days is greater than
     * one less than the number of days being analyzed then this method 
     * also returns false.
     * 
     * @param days the number of days.
     * @return true if the stock is a dog and false otherwise.
     */
    public boolean dogDetector(int days) {
        return false;
    }
}