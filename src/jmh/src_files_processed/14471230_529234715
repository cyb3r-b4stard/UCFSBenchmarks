import java.util.Scanner;
import java.io.FileInputStream;
import java.io.PrintWriter;
import java.io.FileNotFoundException;
import java.io.*;

/**
 * ###########:
 * 
 * ### ############### ##### ###### ### ######### ## #######, ###### # ##### 
 * #### ####, ## ## ##### #### ## ######## (### ### #### ###### ## ### ########), 
 * ##### #### ### ##### #### ###### #### ### ## #########. #### ### ###-##########
 * ########## ### #######.
 * 
 *  ########:    ###############.####
 *  #######:     ########## ##
 *  ######:      ######### #####
 *  ### ####:    ##/##/####
 */
public class LetterInventory {

    public final int invMax = 26;

    private int[] inventory = new int[invMax]; 

    /**
     * Constructs an empty inventory array.
     */
    public LetterInventory()
    {
        for ( int i = 0; i < invMax; i++){
            inventory[i] = 0;
        }
    }

    /**
     * Constructs an inventory of the alphabetic letters in "data"
     * 
     * @param  data   the given string   
     */
    public LetterInventory(String data)
    {
        int dataLength = data.length();
        int charValue;
        data.toLowerCase();

        for ( int i = 0; i < data.length(); i++){
            char dataChar = data.charAt(i);
            charValue = (int) dataChar;
            if ( charValue >= 97 && charValue <= 122){
                inventory[dataChar - 'a']++;
            }
        }
    }

    /**
     * Provides the count of of the given "letter" count are in the inventory.
     *
     * @param  letter   the letter being counted
     * @return          the number of occurences of the chosen letter 
     */
    public int get(char letter)
    {
        return inventory[letter - 'a'];
    }

    /**
     * Sets the count for the given "letter" to the given "value".
     * 
     * @param  letter   the letter of choice
     * @param  value    the count of the letter
     */
    public void set(char letter, int value)
    {

    }

    /**
     * Determines the sum of all of the counts in this inventory.
     * 
     * @return   the sum all the counts in the inventory
     */
    public int size()
    {
        int inventorySize = 0;

        for ( int i = 0; i < invMax; i++ ){
            inventorySize = inventorySize + inventory[i];
        }

        return inventorySize;
    }

    /**
     * Determines if the inventory is empty (all counts are 0).
     * 
     * @return   whether the inventory is empty (true or false)
     */
    public boolean isEmpty()
    {
        int zeros = 26;

        for( int i = 0; i < invMax ; i++){
            if ( inventory[i] == 0)
                zeros--;
        }

        if ( zeros == 0)
            return true;
        else
            return false;
    }

    /**
     * Returns a String representation of the inventory with all the letters in 
     * lowercase, in sorted order, and surrounded by square brackets.
     * 
     * @return   a String representing the letter inventory        
     */
    public String toString()
    {
        char[] alphabet = {a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z};
        String inventoryString;

        for ( int i = 0; i < invMax; i++){
            for ( int j = 1; j <= inventory[i]; j++){
                inventoryString = "[" + inventoryString + alphabet[i] "]";
            }
        }
    }

    /**
     * Constructs and returns a new LetterInventory object that represents the sum
     * of this LetterInventory and the "other" given LetterInventory. The counts for
     * each letter are added together.
     * 
     * @param  other   a given letter inventory object 
     */
    public LetterInventory add(LetterInventory other)
    {

    }

    /**
     * Constructs and returns a new LetterInventory object that represents the 
     * difference of this letter inventory and the "other" given LetterInventory. The
     * counts from the "other" inventory are subtracted from the counts of "this" one.
     * Returns null if the resulting count is negative.
     * 
     * 
     * @param  LetterInventory   the given string   
     */
    public LetterInventory subtract(LetterInventory other)
    {

    }

    /**
     * Constructs an inventory of the alphabetic letters
     * 
     * @param  data   the given string   
     */
    public double getLetterPercentage(char letter)
    {

    }
}   