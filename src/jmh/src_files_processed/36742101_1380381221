
/**
 * ###########.####  
 *
 * @######:
 * ########## #:
 * 
 * ##### ####### ###########:
 * 
 *
 */
/*###### ###### ######## # #### ## ####
 * ######/#######
 * ##### #######
 * ##### ####
 */
public class BagofMandMs
{
    /*#instance variables are defined first. They describe
     * the current state of the object. There can be as many as you 
     * need and can be of any type
     * 
     * Instance variables should ALWAYS be defines as private
     * 
     * Declare at the top of the class to ensure they are available to
     * all the methods in the class.
     * 
     * 
     */
    private String type;
    private double weight;      
    private int number;
    private boolean open=false;
    /*# The Constructer
     * This method is responsible for setting up the class and
     * usually initializes the instance variables
     *  Has NO return type - not even void
     */
    public BagofMandsMs (String kind, double size)
    {
        /**instance variable on the left, inpur parameter on the right
         */
        type=kind;
        weight = size;
        number=0;
 

    }
    /*#overloaded constructer- an overloaded method has the same 
     * name as another methiod, but has a different parameter 
     * list
     */
    public BagofMandMs (String kind,double size)
    {
        type =kind;
        weight=size;
        number = 0;
    }
    public String toString()
    {
        return "This bag of " + type + "M&M weighs " + weight + "ounces and contains" + number;
    }
    

    /*#methods-behaviors associated with a class- ways
     * the object can be changed or things rge object can perform
     * 
     * method header format;
     * pub/pri returnType methondName (Parameter list)
     * 
     */
    public void openbag()
    {
        if(open){
            System.out.println("It's already open");
        }
        else{
            open=true;
            System.out.println("mmm......candy...");
        }
        /*#last statement of a mathod is the return statement
         * this sends back the result of the method. Since this
         * is a voild method, no return is required. However,
         * an empty return
         * 
         */
        return;
        /**eatCandy takes one input(iterger indicating how many you plant to eat), returns and interger
         * (indicates how amany candies are left in the bag.
         */

    }
    public int getNumber()
    {
        return number;
    }
    public void setNumber(int num)
    {
        number=num;
        return;
    }
    public int eatCandy(int numEaten)
    {
        if(!open)
        Systme.out.println("You gotta open the bag!");
        else if (number===0)
        System.out.println("Bummer, I'm out!");
        else
        number -= numEaten;
        if(number<0)
        number=0;
        return number;
    }
        
    }

}