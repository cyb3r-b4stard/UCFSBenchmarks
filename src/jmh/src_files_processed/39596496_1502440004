package question3;

import question3.tp3.PileI;
import question3.tp3.PileVideException;
import question3.tp3.PilePleineException;
import java.util.Observer;
import java.util.Observable;
import java.util.Stack;

public class PileModele<T> extends Observable implements PileI<T> {

    private PileI<T> pile;
    
    

    /* à compléter */

    public PileModele(PileI<T> pile) {
        
        this.pile = pile;
        pile= new Stack<T>;
    }

    public void empiler(T o) throws PilePleineException {
        if ( estPleine()){
            throw new PilePleineException();     
        }

        pile.push(o);
    
    }

    public T depiler() throws PileVideException {
        setChanged();
        notifyObservers();
        return pileInterne.pop();
    }

    public T sommet() throws PileVideException {
        return pileInterne.peek();
    }

    public int taille() {
        return pile.taille();
    }

    public int capacite() {
        return pile.capacite();
    }

    public boolean estVide() {
        return pile.estVide();
    }

    public boolean estPleine() {
        return pile.estPleine();
    }

    public String toString() {
        return pile.toString();
    }
}

/**
 * notez qu'un message d'alerte subsiste à la compilation (unsafe ...) dû à
 * l'emploi de notifyObservers, incontournable et sans conséquence ici
 */