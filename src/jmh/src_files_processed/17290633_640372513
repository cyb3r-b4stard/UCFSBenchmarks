import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 * ##### # ########### ## ##### #### ####.
 * 
 * @###### (####### ##### #########) 
 * @####### (#.#.#)
 */
public class Sala
{
    private int numeroSala;
    private int butacas;
    private ArrayList<Sesion>sesiones;
    
    /**
     * Constructor for objects of class Sala
     */
    public Sala(int numeroSala,int butacas)
    {
        this.numeroSala= 3;
        this.butacas=butacas;
        this.sesiones=new ArrayList<Sesion>();
    }
    /**
     * Constructor for objects of class Sala
     */
    public String toString()
    {
        return "La sesion, con numero de sala:" + numeroSala + " tiene un aforo de butacas:" + butacas;
    }
        /**
     * Metodo get para informar del numero de butacas en función de la Sala
     * @return butacas
     */
    public int getButacas()
    {
        return butacas;
    }
    /**
     * Metodo get para informar del numero de identificacion de Sala
     * @return sala
     */
    public int getNumeroSala()
    {
        return numeroSala;
    }
    /**
     * Metodo get para informar del atributo Sesion
     * @return sesiones
     */
    public ArrayList<Sesion>getSesiones()
    {
        return sesiones;
    }
    /**
     * Metodo set que modifica el atributo sesiones
     * @param ArrayList<Sesion>sesiones
     */
    public void setSesiones (ArrayList<Sesion>sesiones)
    {
        this.sesiones=sesiones;
    }
     /**
     * Metodo para eliminar una sesion concreta de la lista de sesiones a partir de la fecha de proyeccion mediante metodo iterator
     * 
     */
    public void eliminarSesion (Date fecha)
    {
        Iterator<Sesion>it=sesiones.iterator();
        Sesion sesionActual;
        boolean encontrado=false;
        while( it.hasNext()&&(!encontrado){
            sesionActual=it.next();        
            if(sesionActual.getFecha().equals(fecha)){
                encontrado=true;
                sesiones.remove(sesionActual);
                System.out.println ("La sesion ha sido borrada");
            }
        }
        if (encontrado=false){
                System.out.println ("La sesion no ha sido encontrada");
            }
    }
    
    /**
     * Metodo para añadir una sesion concreta a la lista de sesiones mediante el metodo iterator
     * 
     */                                                                                                                                                                                                                                                                                                                                                                                                                                                        
     
      public void anadirSesion(Sesion sesion)
    {
        Iterator<Sesion>it=sesiones.iterator();
        Sesion sesionActual;
        boolean encontrado=false;
        while( it.hasNext()&&!encontrado){
            sesionActual=it.next();
            if(sesionActual.getFecha().equals(sesion.getFecha())){
                encontrado=true;
            }
        }
        if (encontrado=false){
                sesiones.add(sesion);
                System.out.println ("La sesion ha sido encontrada");
        }
    }
    
     /**
     * Metodo que devuelve una sesion, a partir de un for-each que recorre todas las sesiones, comparando fechas. En cada iteracion la sesion toma un valor en secuencia
     * de las sesiones contenidas en la lista y ejecuta las sentencia del cuerpo del bucle tantas veces como sesiones haya en la lista
     */
    public Sesion getSesion(Date fecha)
    {
        for (Sesion sesion:this.sesiones) {
            if ( sesion.getFecha()==(fecha)) {
                return sesion;
            }
        }
        return null;
    }
    /**
     * Informacion de todas las sesiones que se proyectan en la Sala
     * 
     */
    public void mostrarInfoSesiones()
    {
       for(Sesion sesion:sesiones)
       {
            System.out.println(sesion.toString());
       }
    }
       /**
     * Metodo que devuelve una sesion concreta, a partir de la fecha de proyeccio
     * 
     */
    public void mostrarInfoSesion(Date fecha)
    {
        boolean encontrado= false;
        for (Sesion sesion:this.sesiones)
        {
            if (sesion.getFecha().equals(fecha))
            {
                System.out.println (sesion.toString());
                encontrado=true;
            }
        if(encontrado = false){
            System.out.println ("No se ha encontrado ninguna sesion con la fecha de proyeccion indicada");            
        }
        }
    }    
}
     
     
     
     
     
     
     
     
     
     

    
    
       