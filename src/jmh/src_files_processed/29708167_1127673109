
/**
 * ####'# ########
 * 
 * @###### ########## ####
 * @####### ##.#.####
 */
public class Database
{
    private RBTree<String> clients;
    private RBTree<Double> balances;
    private Client maxBalance;
    
    /**
     * Constructor that creats the database of the bank
     */
    public Database()
    {
        RBTree<String> clients = new RBTree<String> (null);
        RBTree<String> balances = new RBTree<String> (null);
        Client maxBalance = null;
    }
    
    public void addClient( Client newClient)
    {
        
    
        clients.insert( newClient.getClientNum());
        balances.insert(newClient.getBalance());
        
        if (maxBalance == null)
        {
            maxBalance = newClient;
        }
        else
        {
            if (newClient.getBalance() >= maxBalance.setBalance())
            {
                maxBalance = newClient;
            }
        }
    }
    
    public void deposit ( Client client, Double amount)
    {
        client.SetBalance( client.getBalance() + amount );
        if (cliemt.getBalance() >= maxBalance.getBalance())
        {
            maxBalance = client;
            }
            balances.delete( client.getBalance());
        balances.insert(client.getBalance());
    }
    
    public void deleteClient (Client client)
    {
        if (client == maxBalance)
        {
            maxBalance = balances.pressesor( client);
        }
        
        client.setBalance(0);
        clients.delete(client.delete(cient.getClientNumber()));
        balances.delete(client.delete(client.getBalance());
        client = null;
        
    }
    
   
    /** 
     * pharse line of input
     * the type of the input (add client, delete client, deposite, etc) determined by the first word in the input
     * validity check - check if the number of the word in the input adjust with the type of the input
     */
    public parseInput()
    {
        
        Scanner scanner = new Scanner(System.ini);
         input = scanner.next();
         
         
        /*    
        if ( input.isEquel("+"))
        {
            
        }
        
        
        else if (input == '-')
        else if (input == '?')
        {
            if (!scanner.hasNext()) 
            {
                printInputError();
                return;
            }
            else
            {
                input = scanner.next();
            }
            if (scanner.hasNext())
            {
                printInputError();
                return;
            }
                       
            if (input.isEquel("MAX"))
            {
                printMax();
            }
            else if (input.isEquel("MINUS"))
            {
                printMinus();
            }
            else 
            {
                printBalance(input);
            }
        }
        else
        {
        }
        */
        scanner.close();
    }
}