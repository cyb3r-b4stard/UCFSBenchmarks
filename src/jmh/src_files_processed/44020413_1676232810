
/**
 * ########### ### #### ### ###### #######.
 * 
 * @###### (### ####) 
 * @####### (#### ############## #### ### #####)
 */
public class Picture
{
    private Square frei; 
    private Square wand;
    private Square feld;
    private Square exit;
    private Square border;
    private Square used;
    private Square won;
    private boolean inside=true;
    public static final int nord=0;
    public static final int ost=1;
    public static final int sued=2;
    public static final int west=3;
    private int size = 10;
    private int posX=1;
    private int posY=1; /** Position 1 bedeutet, innerhalb der Grenze. Der Rand ist nicht begehbar und verhindert, dass der Roboter´dem Labyrinth entkommt.*/
    private int blickrichtung=1; 
    private int[][] spielfeld = {
                                {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                                {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
                                {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
                                {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
                                {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
                                {3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3},
                                {3,-2,0,2,0,2,2,0,0,0,0,0,0,0,0,3},
                                {3,0,2,0,0,2,0,2,0,0,0,0,0,0,0,3},
                                {3,2,0,2,0,2,2,0,0,0,0,0,0,0,0,3},
                                {3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3},
                                };
                                private int[][] lab = {
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
            {-1, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1},
            {-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1},
            {-1, 0,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0,-1},
            {-1, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1},
            {-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1},
            {-1, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0, 0,-1},
            {-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1},
            {-1, 0,-1, 0,-1, 0,-1, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0,-1},
            {-1, 0,-1, 0,-1, 0,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1},
            {-1, 0,-1, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0,-1},
            {-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1, 0,-1,-1, 0,-1,-1,-1,-1,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1, 0, 0,-1, 0, 0, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1, 0,-1, 0,-1},
            {-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0, 0,-1, 0,-1},
            {-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1, 0,-1},
            {-1, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0,-1, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0,-1}, 
            {-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0, 0,-1, 0,-1},
            {-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1,-1, 0,-1, 0,-1,-1,-1, 0,-1},
            {-1, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0,-1, 0, 0,-1, 0,-1, 0, 0, 0,-1},
            {-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1,-1, 0,-1,-1, 0,-1, 0,-1,-1,-1},
            {-1, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0, 0, 0,-1},
            {-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0,-1,-1,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0,-1},
            {-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1, 0,-1},
            {-1, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0,-1},
            {-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1, 0,-1, 0,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1, 0,-1,-1,-1, 0,-1,-1,-1, 0,-1,-1},
            {-1, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0,-1, 0, 0, 0, 0,-1,-1,-1},
            {-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1, 0,-1},
            {-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,-1},
            {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
        }


    /**
     * Konstruktor für Objekte der Klasse Picture
     */
    public Picture()
    {
        draw();
        for(int i=0; i<100;i++)
        {
            if (inside==true)
            {
               move();
            }
        }
    }

    /**
     * Ein Beispiel einer Methode - ersetzen Sie diesen Kommentar mit Ihrem eigenen
     * 
     * @param  y    ein Beispielparameter für eine Methode
     * @return        die Summe aus x und y
     */
    
    public void move()
    {
        if(spielfeld[posY][posX] ==-2)
        {
            System.out.println("");
            System.out.println("Ich stehe auf dem Ziel!");
            won = new Square();
            won.moveVertical(100+posY*size);
            won.changeSize(size);
            won.changeColor("yellow");
            won.makeVisible();
            won.moveHorizontal(100+posX*size);
            inside=false;
        }
        else if(spielfeld[posY+1][posX] ==-2)
        {
            use();
            wait(100);
            used.erase();
            System.out.println("");
            System.out.println("Ich habe das Ziel gefunden! Es ist suedlich!");
            won = new Square();
            won.moveVertical(100+(posY+1)*size);
            won.changeSize(size);
            won.changeColor("yellow");
            won.makeVisible();
            won.moveHorizontal(100+posX*size);
            inside=false;
        }
        else if(spielfeld[posY-1][posX] ==-2)
        {
            use();
            wait(100);
            used.erase();
            System.out.println("");
            System.out.println("Ich habe das Ziel gefunden! Es ist noerdlich!");
            won = new Square();
            won.moveVertical(100+(posY-1)*size);
            won.changeSize(size);
            won.changeColor("yellow");
            won.makeVisible();
            won.moveHorizontal(100+posX*size);
            inside=false;
        }
        else if(spielfeld[posY][posX+1] ==-2)
        {
            use();
            wait(100);
            used.erase();
            System.out.println("");
            System.out.println("Ich habe das Ziel gefunden! Es ist oestlich!");
            won = new Square();
            won.moveVertical(100+posY*size);
            won.changeSize(size);
            won.changeColor("yellow");
            won.makeVisible();
            won.moveHorizontal(100+(posX+1)*size);
            inside=false;
        }
        else if(spielfeld[posY][posX-1] ==-2)
        {
            use();
            wait(100);
            used.erase();
            System.out.println("");
            System.out.println("Ich habe das Ziel gefunden! Es ist westlich!");
            won = new Square();
            won.moveVertical(100+posY*size);
            won.changeSize(size);
            won.changeColor("yellow");
            won.makeVisible();
            won.moveHorizontal(100+(posX+1)*size);
            inside=false;
        }
        else
        {
            use();
            wait(100);
            used.erase();
            if(blickrichtung ==nord)
        {
            if(spielfeld[posY][posX+1] == 0) 
            {
                drehe_rechts(); 
                vor(); 
            }
            else
            {
                if(spielfeld[posY-1][posX] == 0) 
                {
                    posY=posY-1; 
                }
                else
                {
                    drehe_links();
                }
            }
        }
        else if(blickrichtung ==ost)
        {
            if(spielfeld[posY+1][posX] == 0) 
            {
                drehe_rechts(); 
                vor(); 
            }
            else
            {
                if(spielfeld[posY][posX+1] == 0)
                {
                
                    posX=posX+1;
                }
                else
                {
                    drehe_links();
                }
            }
        }
        else if(blickrichtung ==sued)
        {
            if(spielfeld[posY][posX-1] == 0) 
            {
                drehe_rechts(); 
                vor(); 
            }
            else
            {
                if(spielfeld[posY+1][posX] == 0)
                {
                    posY=posY+1; 
                }
                else
                {
                    drehe_links();
                }
            }
        }
        else if(blickrichtung ==west)
        {
            if(spielfeld[posY-1][posX] == 0) 
            {
                drehe_rechts(); 
                vor(); 
            }
            else
            {
                if(spielfeld[posY][posX-1] == 0)
                {
                    posX=posX-1;
                }
                else
                {
                    drehe_links();
                }
            }
        }
       }
    }
    
    public void vor()
    {
        if(blickrichtung ==nord)
        {
            if(spielfeld[posY-1][posX] == 0||spielfeld[posY][posX+1] == 2) 
                {
                    posY=posY-1; 
                }
        }
        else if(blickrichtung ==ost)
        {
            if(spielfeld[posY][posX+1] == 0||spielfeld[posY][posX+1] == 2)
                {
                    posX=posX+1;
                }
        }
        else if(blickrichtung ==sued)
        {
            if(spielfeld[posY+1][posX] == 0||spielfeld[posY][posX+1] == 2)
                {
                    posY=posY+1; 
                }
        }
        else if(blickrichtung ==west)
        {
            if(spielfeld[posY][posX-1] == 0||spielfeld[posY][posX+1] == 2)
                {
                    posX=posX-1;
                }
        }
    }
    
    public void drehe_rechts()
    {
        if(blickrichtung<3)
        {
         blickrichtung=blickrichtung+1;
        }
        else if(blickrichtung==3)
        {
            blickrichtung=0;
        }
        else {System.out.println("Die Blickrichtung ist verbuggt. Pls fix!");}
    }
    public void drehe_links()
    {
        if(blickrichtung>0)
        {
         blickrichtung=blickrichtung-1;
        }
        else if(blickrichtung==0)
        {
            blickrichtung=3;
        }
        else {System.out.println("Die Blickrichtung ist verbuggt. Pls fix!");}
    }
    
    public void draw()
    {

        for(int i=0;i<spielfeld.length;i++)
        {
            for (int j=0;j<spielfeld[i].length;j++)
            {
                if(spielfeld[i][j]==0)
                {
                    frei = new Square();
                    frei.moveVertical(100+i*size);
                    frei.changeSize(size);
                    frei.changeColor("blue");
                    frei.makeVisible();
                    frei.moveHorizontal(100+j*size);
                }
                else if(spielfeld[i][j]==1)
                {
                    wand = new Square();
                    wand.moveVertical(100+i*size);
                    wand.changeSize(size);
                    wand.changeColor("black");
                    wand.makeVisible();
                    wand.moveHorizontal(100+j*size);
                }
                else if(spielfeld[i][j]==-2)
                {
                    exit = new Square();
                    exit.moveVertical(100+i*size);
                    exit.changeSize(size);
                    exit.changeColor("green");
                    exit.makeVisible();
                    exit.moveHorizontal(100+j*size);
                }
                else if(spielfeld[i][j]==3)
                {
                    border = new Square();
                    border.moveVertical(100+i*size);
                    border.changeSize(size);
                    border.changeColor("red");
                    border.makeVisible();
                    border.moveHorizontal(100+j*size);
                }
                else if(spielfeld[i][j]==4)
                {
                    used = new Square();
                    used.moveVertical(100+i*size);
                    used.changeSize(size);
                    used.changeColor("magenta");
                    used.makeVisible();
                    used.moveHorizontal(100+j*size);
                }
            }
        }
        

    }

    /**
     * Change this picture to black/white display
     */
    public void setBlackAndWhite()
    {
        if(frei != null)   
        {
            frei.changeColor("black");
            wand.changeColor("white");
        }
    }

    /**
     * Change this picture to use color display
     */
    public void setColor()
    {
        if(frei != null)   
        {
            frei.changeColor("red");
            wand.changeColor("black");
        }
    }
    
    public void use()
    {
        if(spielfeld[posY][posX] == 0)
        {
            used = new Square();
            used.moveVertical(100+posY*size);
            used.changeSize(size);
            used.changeColor("magenta");
            used.makeVisible();
            used.moveHorizontal(100+posX*size);
        }
    }
    
    public void win()
    {
        inside=false;
    }
    
    public void wait(int milliseconds)
    {
        try
        {
            Thread.sleep(milliseconds);
        } 
        catch (Exception e)
        {
        }
    }
}