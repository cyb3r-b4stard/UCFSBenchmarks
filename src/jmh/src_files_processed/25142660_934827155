import java.util.ArrayList;

/**
 * # ###### ##### ## ## #######.
 * ### ####### ######### # #### ## #### ## ######### ######.
 *
 * @###### ##### #. ###### ### ####### #######.
 * @####### ####.##.##
 */
public class Auction
{
    private ArrayList<Lot> lots;
    private int nextLotNumber;

    /**
     * Create a new auction.
     */
    public Auction()
    {
        lots = new ArrayList<Lot>();
        nextLotNumber = 1;
    }

    /**
     * Enter a new lot into the auction.
     * @param description A description of the lot.
     */
    public void enterLot(String description)
    {
        lots.add(new Lot(nextLotNumber, description));
        nextLotNumber++;
    }

    /**
     * Show the full list of lots in this auction.
     */
    public void showLots()
    {
        for(Lot lot : lots) {
            System.out.println(lot.toString());
        }
    }
    
    /**
     * Make a bid for a lot.
     * A message is printed indicating whether the bid is
     * successful or not.
     * 
     * @param lotNumber The lot being bid for.
     * @param bidder The person bidding for the lot.
     * @param value  The value of the bid.
     */
    public void makeABid(int lotNumber, Person bidder, long value)
    {
        Lot selectedLot = getLot(lotNumber);
        if(selectedLot != null) {
            Bid bid = new Bid(bidder, value);
            boolean successful = selectedLot.bidFor(bid);
            if(successful) {
                System.out.println("The bid for lot number " +
                                   lotNumber + " was successful.");
            }
            else {
                Bid highestBid = selectedLot.getHighestBid();
                System.out.println("Lot number: " + lotNumber +
                                   " already has a bid of: " +
                                   highestBid.getValue());
            }
        }
    }

    /**
     * Return the lot with the given number. Return null
     * if a lot with this number does not exist.
     * @param lotNumber The number of the lot to return.
     */
    public Lot getLot(int lotNumber)
    {
        if((lotNumber >= 1) && (lotNumber < nextLotNumber)) {
            Lot selectedLot = lots.get(lotNumber - 1);
            if(selectedLot.getNumber() != lotNumber) {
                System.out.println("Internal error: Lot number " +
                                   selectedLot.getNumber() +
                                   " was returned instead of " +
                                   lotNumber);
                selectedLot = null;
            }
            return selectedLot;
        }
        else {
            System.out.println("Lot number: " + lotNumber +
                               " does not exist.");
            return null;
        }
    }
    
    /*
    public void close(){
        for(Lot l: lots){
            assert l !=null;
            if(l!=null){
                Bid b=l.getHighestBid();
                if(b!=null){
                    System.out.println("Lot " + l.getNumber() +
                    "\tBidder: " + b.getBidder().getName() + 
                    "\tBid: " + b.getValue());
                }else{
                    System.out.println("Unsold: " + l.getNumber());
                }
            }
        }
    }
    */
    
   
    public void close(){
        for(Lot l: lots){
            assert l !=null; 
            
            Bid b=l.getHighestBid();
                if(b!=null){
                    System.out.println("Lot " + l.getNumber() +
                    "\tBidder: " + b.getBidder().getName() + 
                    "\tBid: " + b.getValue());
                }else{
                    System.out.println("Unsold: " + l.getNumber());
                }
            
        }
    }
    
    public ArrayList<Lot> getUnsold(){
        ArrayList<Lot> unsold = new ArrayList<Lot>();
        for(Lot l:lots){
            assert l != null;
            
            if(l.getHighestBid() ==null){
                unsold.add(l);
            }
        }
        return unsold;
    }
    
    public Lot removeLot(int lotNumber){
        if(lotNumber >= 1 && lotNumber <= lots.size()){
            /*
            Lot l = lots.get(lotNumber -1);
            lots.remove(l);
            return l;
            */
            for(Interator<Lot> iter = lots.iterator();iter.hasNext();){
                Lot l = iter.next();
                if(l.getNumber()==lotNumber){
                    iter.remove();
                    return l;
                }
        }else{
            return null;
        }
    }
}