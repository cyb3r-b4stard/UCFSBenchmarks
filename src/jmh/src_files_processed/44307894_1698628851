/**
 * ########## # ######## ######
 * 
 * @###### ###
 * @####### #/##/##
 */
public class Rational 
{
    private int num;
    private int denom;

    /**
     * Constructor for objects of class Rational.  
     * If the denom is 0, set the number to 0/1
     */
    public Rational(int num, int denom)
    {
        this.num=num;
        this.denom=denom;
        if (denom==0){
            this.num=0;
            this.denom=1;
        }
    }
    
    /**
     * returns String rep of number
     **/
    public String toString(){
        return num + "/" + denom;
    }
    
  
    /**
     * Returns a Rational number representing the result of adding this and r.  
     * The returned number need not be in its lowest form
     */
    public Rational add(Rational r){
        int newNum1=this.num * r.denom;
        int newNum2=this.denom * r.num;
        int newDenom=this.denom * r.denom;
        int newNum=newNum1+newNum2;
        Rational unreduced=new Rational(newNum,newDenom);
 
        return unreduced;
    }
    
    /**
     * Return a double (floating point) representation of the number
     */
    public double toDouble(){
        return ((double) num)/denom; 
    }
    
    /**
     * Adds r to this number (so this number is changed)
     * The result need not be in its lowest form
     */
    public void addTo(Rational r)
    {
        Rational number = new Rational (int num1, int denom1);
        int newNum1 = this.num * r.denom;
        int newNum2 = this.denom * r.num;
        int newDenom = this.denom * r.denom;
        int newNum = newNum1 + newNum2;
        Rational this.number = Rational (newNum, NewDenom);
        
        return this.num;
    }
    
}