import javafx.application .*;
import javafx.event .*;
import javafx.scene .*;
import javafx.scene.control .*;
import javafx.scene.layout .*;
import javafx.stage .*;
import javafx.scene.shape .*;
import javafx.embed.swing .*;
import javafx.application .*;
import javafx.scene.text .*;
import java.util .*;
import javafx.scene.paint.Color;

/** #### ######## ### ###### ## 
 * ###### ######## ## ########## # ###### ##
 * ######### ########### ## ####
 * ## ####/##/##
 * -----------------------------------------------------
 * #### ###### #### ## ######## ########## ###### ### ######## ###### ## ##### #
 * ### ## "####" #### ####### ## "######"
 * 
 * #### ##### ## ###### ## ###### ### # ###### ###### # ###### ######()
 * 
 * @#### ###### ####### ### ####### #### 
 * @###### ####### ####### # ###### #########
 * @####### #/##/##
 * 
 * # ######## #### ### ####### ## ######.
 */

/**
 * ##### ######## ##### ######## ### ### ####### ## ### ####### 
 */
class MainPane extends BorderPane  {
    final int circ_x = 33;
    final int circ_y = 33;
    /**
     * MainPane class constructor that contains the buttons which execute each method
     */
    public MainPane() 
    {
        Pane drawingPane = new Pane();
        this.setCenter(drawingPane);
        drawingPane.setStyle("-fx-background-color:azure");

        FlowPane buttonsPane = new FlowPane();
        this.setTop(buttonsPane);

        Button button1 = new Button("GridOfCircles"); 
        button1.setOnAction( event -> {this.gridOfCirc(drawingPane, this.circ_x, this.circ_y); }); 
        buttonsPane.getChildren().add(button1); 

        Button button2 = new Button("FilledRect");
        button2.setOnAction( event -> {this.drawFilledRect(drawingPane, 100, 100, 400, 100, false); });
        buttonsPane.getChildren().add(button2);

        Button button3 = new Button("DrawRandRectangles");
        button3.setOnAction( event -> {this.randomRectangles(drawingPane, 5, 10, 100, 300); });
        buttonsPane.getChildren().add(button3);

        Button button6 = new Button("Clocks");
        button6.setOnAction( event -> {this.drawAnalogClock(drawingPane, 100, 5, 30); });
        buttonsPane.getChildren().add(button6);

        Button button4 = new Button("Clear");
        button4.setOnAction( event -> {drawingPane.getChildren().clear();});
        buttonsPane.getChildren().add(button4);

        Button button5 = new Button("Exit");
        button5.setOnAction( event -> {System.exit(0);});
        buttonsPane.getChildren().add(button5);
    }

    /**
     * With a "for" cycle, this method create circles
     *@param Pane drawingPane is the window of the draws
     *@param circ_x defines the centre (cordinates) of the circle
     *@param circ_y defines the centre (cordinates) of the circle
     *@param j is the variable wich start the "for" cycle
     *@param rad is the variable wich define the radius
     *@param nColumns define a random number of circles 
     */
    private void lineOfCirc(Pane drawingPane, int circ_x, int circ_y, int j, int rad, double nColumns)
    {
        for (int i=0; i < nColumns; i++) 
        {
            Circle circ = new Circl
            circ.setCenterX(circ_x + (j*(rad * 2)));
            circ.setCenterY(circ_y + (i*(rad * 2)));
            circ.setRadius(rad);
            circ.setFill(this.getRandomColor());
            drawingPane.getChildren().add(circ);
        }
    }

    /**
     *This method draws a random grid of circles from another method (lineOfCirc)that runs a line of circles
     *@param Pane drawingPane is the window of the draws
     *@param circ_x defines the centre (cordinates) of the circle
     *@param circ_y defines the centre (cordinates) of the circle
     */
    private void gridOfCirc(Pane drawingPane, int circ_x, int circ_y)
    {
        drawingPane.getChildren().clear();
        double nLine = (int)(Math.random() * ((20-1) + 1) + 1);
        double nColumns = (int)(Math.random() * ((10-1) + 1) + 1) ;
        final int rad = 33;
        for (int j=0; j < nLine; j++)
        {
            this.lineOfCirc(drawingPane, circ_x, circ_y, j, rad, nColumns);
        }
    }

    /**
     * This method returns a random color
     */
    private Color getRandomColor()
    {
        int red = (int)(Math.random()*255 + 0.5);
        int green = (int)(Math.random()*255 + 0.5);
        int blue = (int)(Math.random()*255 + 0.5);
        return Color.rgb(red, green, blue);
    }

    /**
     *This method creates a rectangle wich is composed by lines( vertical or horizontal )
     *@param Pane drawingPane is the window of the draws
     *@param x is the x cordenate, wich belong to the upper left corner
     *@param y is the y cordenate, wich belong to the upper left corner
     *@param widht defines the width of the rectangle
     *@param height defines the height of the rectangle
     *@param vertical is the method that if it is true it does the rectangle only using vertical lines and if not it does horizontal lines
     */
    private void drawFilledRect(Pane drawingPane, int x, int y, int width, int height, boolean vertical)
    {
        drawingPane.getChildren().clear();

        if (vertical == true)

            for( int i = 0; i <= width; i++) 
            {
                Line line2 = new Line(x, y, x, y + height);
                line2.setStroke(this.getRandomColor());
                drawingPane.getChildren().add(line2); 
                x++;
            }

        if(vertical == false)
        {
            for( int i = 0; i <= height; i++)
            {
                Line line2 = new Line(x, y, x + width, y);
                line2.setStroke(this.getRandomColor());
                drawingPane.getChildren().add(line2);
                y++;
            }
        }
    }

    /**
     **This method creates a rectangles with a random color 
     *@param Pane drawingPane is the window of the draws
     *@param x is the x cordenate, wich belong to the upper left corner
     *@param y is the y cordenate, wich belong to the upper left corner
     *@param widht defines the width of the rectangle
     *@param height defines the height of the rectangle
     */

    private void drawRect(Pane drawingPane, int x, int y, int width, int height)
    {
        Rectangle rectangle = new Rectangle(x, y, width, height);
        rectangle.setFill(this.getRandomColor());
        drawingPane.getChildren().add(rectangle);
    }

    /**
     **This method creates a random number of rectangles and sizes
     *@param Pane drawingPane is the window of the draws
     *@param minNRectangles defines the minimum number of rectangles
     *@param maxNRectangles defines the maximum number ofrectangles
     *@param minSizes defines the minimum size of the rectangles
     *@param maxSize defines the maximum size of the rectangles
     */

    private void randomRectangles(Pane drawingPane, int minNRectangles, int maxNRectangles, int minSize, int maxSize)
    {
        int random = (int )(Math.random() * maxNRectangles + minNRectangles);
        double maxX = drawingPane.getWidth();
        double maxY = drawingPane.getHeight(); 
        drawingPane.getChildren().clear();

        for(int i = 0; i < random; i++)

        {
            int randomWidth =  minSize + (int )(Math.random() * maxSize);
            int randomHeight = minSize + (int )(Math.random() * maxSize);
            double randomX = (int)(0 + ((maxX - randomWidth) - 0 + 1) * Math.random());
            double randomY = (int)(0 + ((maxY - randomHeight) - 0 + 1) * Math.random());
            this.drawRect(drawingPane, (int)randomX, (int)randomY, randomWidth, randomHeight); 
        }
    }  

    /**
     **This method creates a circle  
     *@param Pane drawingPane is the window of the draws
     *@param diameter represents the diameter of the circle
     *@param hours represents the hours (numbers) on the clock
     *@param minutes represents the minutes (numbers) on the clock
     */

    private void drawAnalogClock(Pane drawingPane, int diameter, int hours, int minutes)
    {       
        drawingPane.getChildren().clear();
        final double x = drawingPane.getWidth() / 2.0; 
        final double y = drawingPane.getHeight() / 2.0; 
        for(int i = 0; i < 2; i++)
        {
            for(int j = 0; j < 5; j++)
            {
                int randomHours = (int)(1 + (12 - 1 + 1) * Math.random());
                int randomMinutes = (int)(1 + (60 - 1 + 1) * Math.random());
                this.drawClockBody(drawingPane, x + diameter * (j - 2), y - diameter * (i - 0.5), diameter, randomHours, randomMinutes);
            }
        }
    }

    /**
     * This method drack the complete "body" of the clock
     * @param variable x is the x coordinate of the center of the circle
     * @param variable y is the y coordinate of the center of the circle
     * @ diameter is the diameter of the circle
     * @param hours represents the hours (numbers) on the clock
     * @param minutes represents the minutes (numbers) on the clock
     */
    private void drawClockBody(Pane drawingPane, double x, double y, int diameter, int hours, int minutes)
    {
        double rad = diameter / 2.0; 
        Circle clock = new Circle(x, y, rad);
        clock.setFill(this.getRandomColor());
        clock.setStroke(Color.BLACK);
        drawingPane.getChildren().add(clock);
        this.drawNumbers(drawingPane, x, y,rad);
        this.drawHourPointer(drawingPane, x, y, hours, rad); 
        this.drawMinutesPointer(drawingPane, x, y, minutes, rad);
    }

    /**
     * @param variable x is the x coordinate of the center of the circle
     * @param variable y is the y coordinate of the center of the circle
     * @param minutes represents the minutes (numbers) on the clock
     * @param rad is the degree between "the hours" of the clock
     */
    private void drawMinutesPointer(Pane drawingPane, double x, double y, int minutes, double rad) 
    {
        double space = 360.0 / 60; 
        Line line = new Line();
        line.setStartX(x);
        line.setStartY(y);
        line.setEndX(x + (rad / 1.3) * Math.cos(Math.toRadians(space * minutes)));
        line.setEndY(y + (rad / 1.3) * Math.sin(Math.toRadians(space * minutes)));
        line.setStroke(Color.BLACK);
        drawingPane.getChildren().add(line);
    }

    /** 
     *This method originates the pointers if the clock 
     *@param Pane drawingPane is the window of the draws
     *@param x is the  x coordinate of the line
     *@param y is the  y coordinate of the line
     * @param hours represents the hours (numbers) on the clock
     * @param rad is the degree between "the hours" of the clock
     */
    private void drawHourPointer(Pane drawingPane, double x, double y, int hours, double rad)
    {
        double space = 360.0 / 12;
        Line line = new Line();
        line.setStartX(x);
        line.setStartY(y);
        line.setEndX(x + (rad / 2.2) * Math.cos(Math.toRadians(space * hours)));
        line.setEndY(y + (rad / 2.2) * Math.sin(Math.toRadians(space * hours)));
        line.setStroke(Color.BLACK);
        drawingPane.getChildren().add(line);
    }

    /**
     * This method put the mumbers on the clock
     * @param x is the coordinate wich defines the position of the numbers of the clock
     * @param y is the coordinate wich defines the position of the numbers of the clock
     * @param rad is the degree between "the hours" of the clock
     */
    private void drawNumbers(Pane drawingPane, double x, double y, double rad)
    {
        double space = 360.0 / 12; 
        for(int i = 1; i < 13; i ++) 
        {
            int number = i;
            if(i == 11) 
            {
                number = -1;
            } 

            else if(i == 12) 

            {
                number = 0;
            }
            double spaceRad = Math.toRadians(space * (i - 1));
            Text text = new Text("" + (number + 2));
            text.setX((x - 5) + (rad / 1.1) * Math.cos(spaceRad));
            text.setY((y + 4) + (rad / 1.3) * Math.sin(spaceRad));
            drawingPane.getChildren().add(text);
        }
    }
}
