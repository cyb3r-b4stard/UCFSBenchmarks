/** ###### ### ########## #### #/# ########.
 *
 * ####### #####:
 *
 * ###### ## = ### ######(######.##, ######.###);
 *
 * ##### (##.#############()) {
 *    ### # = ##.######();
 *    ###### # = ##.#########();
 *    ###### ### = #*#;
 *
 *    ##.#######("######: " + ###);
 * }
 *
 * ##.#####();
 *
 *
 * #### #####:
 *
 * - #### ####, ### ###### ###### ## ##.#####() ## ##.#####() ## ###
 *   ######-########, #########, ### ### #### ######.
 *
 * - ### ######(), #########(), ### #######() ####### #### ##### ##
 *   ######### ## ##### ## ## #### #### ## ### #####, ## ## ## #########
 *   # #### #### ## ### #############() ## ##### ### ###-##-####.
 *
 * @######: ######
 */

import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.OutputStream;

class Kattio extends PrintWriter {
    public Kattio(InputStream i) {
    super(new BufferedOutputStream(System.out));
    r = new BufferedReader(new InputStreamReader(i));
    }
    public Kattio(InputStream i, OutputStream o) {
    super(new BufferedOutputStream(o));
    r = new BufferedReader(new InputStreamReader(i));
    }

    public boolean hasMoreTokens() {
    return peekToken() != null;
    }

    public int getInt() {
    return Integer.parseInt(nextToken());
    }

    public double getDouble() { 
    return Double.parseDouble(nextToken());
    }

    public long getLong() {
    return Long.parseLong(nextToken());
    }

    public String getWord() {
    return nextToken();
    }



    private BufferedReader r;
    private String line;
    private StringTokenizer st;
    private String token;

    private String peekToken() {
    if (token == null) 
        try {
        while (st == null || !st.hasMoreTokens()) {
            line = r.readLine();
            if (line == null) return null;
            st = new StringTokenizer(line);
        }
        token = st.nextToken();
        } catch (IOException e) { }
    return token;
    }

    private String nextToken() {
    String ans = peekToken();
    token = null;
    return ans;
    }
}

public class Cirkel
{
    static Kattio io = new Kattio(System.in, System.out);
    public static void main(String[] args)
    {
        while(io.hasMoreTokens())
        {
            double rad = io.getInt();
            int pnk = io.getInt();
            int trf = io.getInt();
            if(rad == 0 && pnk == 0 && trf == 0)
            {
                break
            }
            else
            {
                double area = rad*rad*Math.PI;
                double est = (pnk/trf);
                System.out.println(area + " " + est);
            }
        }
    }
}