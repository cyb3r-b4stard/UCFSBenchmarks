import java.util.ArrayList;

public class Sevens {
    private ArrayList<GVdie> dice;
    private GVdie d1;
    private GVdie d2;
    private GVdie d3;
    private GVdie d4;
    private GVdie d5;
    private GVdie d6;
    int p1score=0;
    int p2score=0;
    int rolls;
    boolean player1=true;

    public Sevens(){
        d1=new GVdie();
        d2=new GVdie();
        d3=new GVdie();
        d4=new GVdie();
        d5=new GVdie();
        d6=new GVdie();
        dice=new ArrayList<GVdie>();
        dice.add(d1);
        dice.add(d2);
        dice.add(d3);
        dice.add(d4);
        dice.add(d5);
        dice.add(d6);
        d1.setBlank();
        d2.setBlank();
        d3.setBlank();
        d4.setBlank();
        d5.setBlank();
        d6.setBlank();
    }

    public void rollDice()
    {  

        for(GVdie d:dice){
            if(!d.isHeld()){
                d.roll();
                System.out.println(d.getValue());
            }
        }
    }


    public GVdie getDie(int num)
    {
        if(num==1){
            return d1;
        }
        if(num==2){
            return d2;
        }
        if(num==3){
            return d3;
        }
        if(num==4){
            return d4;
        }
        if(num==5){
            return d5;
        }
        else
        {
            return d6;
        }
    }

    public void setPlayer1turn(boolean p)
    {
        player1=p;
    }

    public boolean isPlayer1turn()
    {
        return player1;
    }

    public int getScore1()
    {

        return pointsP1();
    }

    public int getScore2()
    {
        return 1;
    }

    public void resetGame()
    {

    }

    public static void main(String[]args)
    {

    
    }

   public int pointsP1() {
       int points=0;
       if(d1.isHeld()==false){
       points+=d1.getValue;
    }
       if(d2.isHeld()==false){
       points+=d2.getValue();
    }
       if(d3.isHeld()==false){
       points+=d3.getValue();
    }
       if(d4.isHeld()===false){
       points+=d4.getValue();
    }
       if(d5.isHeld()==false){
       points+=d5.getValue();
    }
       
           if(d6.isHeld()=false){
       points+=d6.getValue();
    }
    
    return points;
}
}
    
        

        /*
         ********************************************************************

        public boolean turnOver(){
        if (rolls>=3){
        return true;
        }
        }

        public boolean gameOver(){
        if (getScore1()>=77 || getScore2()>=77){
        return true;
        }
        }

        private boolean isValidHand(){

        if(rolls=0 && numHeld=0 || rolls=1 && numHeld=2 && sumhHeld=7
        ||
        rolls=3 && numHeld=4 && sumHeld=14){
        return true;
        }

        }

        private void checkValidOptions(){
        if(numHeld=2 || numHeld=4){
        rolldice();}
        else{
        rolls=3;
        freezeDice();
        }
        }

        private int getDiceTotal()
        {
        return diceTotal;
        }

        private int getNumHeld()
        { numHeld= 6-d.isHeld();
        return numHeld;
        }

        private void showDice()
        {
        System.out.print(d1.getvalue + " "+ d2.getvalue + " "+ 
        d3.getvalue + " "+ d4.getvalue + " "+ d5.getvalue + " " + d6.getvalue);
        }

        }
         */