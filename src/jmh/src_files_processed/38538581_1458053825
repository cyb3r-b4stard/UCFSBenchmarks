import java.io.*;
public class Project
{
    BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
  int ch, s;
    public void display()throws IOException
    {
        
        System.out.println("                                   WELCOME TO THE WORLD OF NUMBERS          ");
        System.out.println(" ENTER YOUR CHOICE: ");
        System.out.println("      ");
       
        System.out.println("1.NEON : A neon number is a number where the sum of digits of square of the number is equal to the number.");
        System.out.println("      ");
        System.out.println("2.DIASARIUM:A number will be called DISARIUM if sum of its digits powered with their respective position is equal to the original number. ");
        System.out.println("      ");
        System.out.println("3.PALINDROME:A palindromic number or numeral palindrome is a number that remains the same when its digits are reversed. ");
        System.out.println("      ");
        System.out.println("4.ARMSTRONG:An Armstrong number of three digits is an integer such that the sum of the cubes of its digits is equal to the number itself.");
        System.out.println("      ");
        System.out.println("5.PERFECT:Perfect number, a positive integer that is equal to the sum of its proper divisors. ");
        System.out.println("      ");
        System.out.println("6.AUTOMORPHIC:An automorphic number  is a number whose square ends in the same digits as the number itself.  ");
        System.out.println("      ");
        System.out.println("7.MAGIC NO: A Magic number is a number whose sum of digits eventually leads to 1.");
        System.out.println("      ");
        
        mainclass check=new mainclass();
        int k= check.main(br.readLine());
   do
   {switch(k)
    {
        case 1:
        
        Neon n=new Neon();
         n.calcneon();
         break;
         
        
         case 2:
       
       special s1=new special();
         s1.calcspecial();
         break;
        
         case 3:
         
       palindrome p1=new palindrome();
          p1.calcpalindrome();
         break;
         
         case 4:
         
       armstrong a1=new armstrong();
         a1.calcarmstrong();
         break;
          
         case 5:
         
         perfect perfect1=new perfect();
         perfect1.calcperfect();
         break;
         
         case 6:
         automorphic a2=new automorphic();
         a2.calcautomorphic();
         break;
         
         case 7:
         magicno m=new magicno();
         m.calcarmagic();
         break;
         
         default:
         System.out.println("oops!! Enter a valid choice.");
         break;
        
         
       
    
}
}while(ch=1||ch=2||ch=3||ch=4||ch=5||ch=6||ch=7);
}
}

         