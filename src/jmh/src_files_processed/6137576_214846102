

public class Fehlersuche1
{
double[] solve(double a, double b, double c, double d) {
double p, q, dk, u, v, r, phi;
ind n;

p = c/a - Math.pow(b/a, 2) / 3;
q = d/a + 2 * Math.pow(b/(3*a), 3);
q -= b * c/(3*a*a);
dk = Math.pow(p/3, 3) + Math.pow(q/2, 2);
 n = (dk > 0) ? 1 : ((Math.abs(dk) < 1E-7 ? 2 : 3));
 double x[] = new double[n];

 if (Math.abs(dk) <= 1E-7) {
   x[0] = -b/(3*a) - Math.cbrt(q/2);
   x[1] = 2 * Math.cbrt(-q/2) - b/(3*a);
} else if (dk > 0) {
  u = Math.cbrt(Math.sqrt(dk) - q/2);
  v = Math.cbrt(-q/2 - Math.sqrt(dk));
  x[0] = u + v - (b/3*a);
} else {
r = Math.sqrt( Math.pow(-p/3, 3) );
phi = Math.acos(-q/(2*r));
for (int i = 0; i < n; i ++) {
  x[i] = Math.cos((phi + 2*i * Math.pi)/3);
  x[i] =* 2 * Math.cbrt(r);
  x[i] -= b/3a;
}
}
return x;
}
 }