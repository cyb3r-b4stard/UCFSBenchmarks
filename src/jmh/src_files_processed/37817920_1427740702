/**
 * ############## #### ###### ### ###### ## ######, ####### ### ############# ###### ## ####, ### #### ### #### ### #### #### ### ###### ### ## ## ## ### ##### ####
 * 
 * @###### (####### #######) 
 * @####### (####### #, ####)
 */
public class VendingMachine
{
    private int myTokens;
    private int myCans;
    /**
     * Constructor for objects of class VendingMachine- two of them; constructor is overloaded
     * Two constructors- one with set values for the instances vars and one that uses a parameter for values of myCans
     * In both, the value of tokens is set to 0
     * In the one without a parameter variable, myCans is set to 10
     * In the one with a parameter variable, set myCans to a different value
     */
    public VendingMachine()
    {
        myTokens = 0;
        myCans = 10;
    }
    public VendingMachine(int cans)
    {
        myTokens = 0;
        myCans = cans;
    }
    /**
     * Method- insertTokens- based on the number of tokens added, add that to the token count and subtract it from the can count
     * If it means that there won't be any more cans, fill it up and tell the user that this was done
     * Note: For me, it is most logical to use the elongated increment operator (variable = variable + amount) even though I understand it can be done
     * in a shorter way
     * @param  tokens   integer value of of number of tokens
     */
    public void insertTokens(int tokens)
    {
        myTokens = myTokens + tokens;
        myCans = myCans - tokens;
        if (myCans <= 0){
            System.out.print("Ran out of cans! ");
            fillUp(10);
            System.out.println("Added 10 more.");
        }
        return tokens
    }
    /**
     * Method getCans- getter or accessor method to find the number of cans and display it to the user
     *
     * @return The returned value is myCans, which changes based on the number of tokens inserted/whether it is filled
     */
    public int getCans()
    {
        return myCans;
    }
    /**
     * Method getTokens- getter or accessor method to find the number of tokens and display it to the user
     *
     * @return The returned value is myTokens, which is printed
     */
    public int getTokens()
    {
         return myTokens;
    }
    /**
     * Method fillUp- given a desired value expressed in parameter, add to the nubmer of cans so that it doesn't run out
     *
     * @param cans A parameter that is an integer that is how many cans should be added, for example add 10 to fill the vending machine
     */
    public void fillUp(int cans)
    {
       myCans = myCans + cans;
    }
}