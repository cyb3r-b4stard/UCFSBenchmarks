import javax.imageio.*;
import java.awt.*;
import java.awt.image.*;
import java.io.*;

/**
 *  ######### ## #### ## ##### ###### #######.  ## ##### #####,
 *  ####### #### ### ## ###### ####### ### ##### ####.  ###
 *  #######:
 *  
 *  ##### ### = #########.#########();  
 *  #########.############();  
 *  
 *  ## "####### ####### ### ##### ####," # #### #### ### #########
 *  #### ##
 *  ##### #### [###] ###### #### [### #### ###########]
 *  
 *  ### ########### ######## ### ###### ## ### ######.  #### ####
 *  #### ## ### #### ## ###### ## # ######, ### ##### #### ####
 *  ## ### ########### ## #### ### ######.  ## ##### #####, ###
 *  ########### ### ###### #####.
 * 
 * @###### (#### ####) 
 * @####### ####### ##, ####
 */
public class MyMethods
{
    /**
     * readImage returns the picture of the westbound Dragster
     * from the images folder of this application.
     * It's too bad this method hasn't been "parameterized"--
     * which would be far more flexible!  With a parameter,
     * you could return ANY image on a machine.
     * 
     * @param  None   
     * @return A dragster Image
     */
    public static Image readImage()
    {
        String path = "images/dragster westbound.png";
        File input = new File( path );
        BufferedImage image = null;
        
        try
        {
            image = ImageIO.read( input );
        }
        catch ( IOException ex )
        {
            String problemDescription = "Ee-ouch!"
                + "  A problem occurred while attempting to"
                + " read the image file named:\n"
                + "\"" +  path + "\""
                + "\n\nCheck the spelling of the file name"
                + " and also make sure the file exists in the"
                + " folder you're thinking of."
                + "  Anyhow, here is the message the system"
                + " came up with: " + ex.getMessage()
                ;
            System.out.println( problemDescription );
        }
    
        return (image);
    }
    
   /**
     * readImage takes the name of an image file
     * (such as a JPG, PNG, or GIF)
     * and returns the image for use in graphics apps.
     * 
     * @param  path   The location and name of the file
     * @return        An Image object
     */
    
    /**
     * pause1Second triggers a 1-second delay 
     * (i.e. 1,000 milliseconds)
     * 
     * @param None
     * @return None
     */
    public static void pause1Second()
    {
        try 
        {
            Thread.sleep( 1000 );
        }
        catch ( InterruptedException ex )
        {
            System.out.println( ex.getMessage() );
        }
    }

    /**
     * pause3Seconds triggers a 3-second delay 
     * (i.e. 3,000 milliseconds)
     * 
     * @param None
     * @return Nothing
     */
    public static void pause3Seconds()
    {
        try 
        {
            Thread.sleep( 3000 );
        }
        catch ( InterruptedException ex )
        {
            System.out.println( ex.getMessage() );
        }
    }
    
    /**
     * pauseNSeconds triggers an N-second delay
     * (i.e. N,000 milliseconds)
     * 
     * @param n  The number of seconds to delay
     * @return Nothing
     */
    public static void pauseNSeconds( int )
    {
        int ms = 0;
        int ms = AnimationDemo.run;
        try
        {
            Thread.sleep( milliseconds );
        }
        catch ( InterruptedException ex )
        {
            System.out.println( ex.getMessage() );
        }
    }
    
    
    /**
     * pause50Millis triggers a 50 millisecond delay
     * 
     * @param None
     * @return Nothing
     */
    public static void pause50Millis()
    {
        try 
        {
            Thread.sleep( 50 );
        }
        catch ( InterruptedException ex )
        {
            System.out.println( ex.getMessage() );
        }
    }
    
    /**
     * pause triggers a delay for the given number
     * of milliseconds
     * 
     * @param millis  The number of milliseconds to pause
     * @return Nothing
     */
    

}