public class BallWorld extends JPanel {

 
   private static final int MAX_BALLS = 25; 
   private int currentNumBalls;             
   private Ball[] balls = new Ball[MAX_BALLS];
   
   /** Constructor to create the UI components and init the game objects. */
   public BallWorld() {
     
  

      currentNumBalls = 11;
      balls[0] = new Ball(100, 410, 25, 3, 34, Color.YELLOW);
      balls[1] = new Ball(80, 350, 25, 2, -114, Color.YELLOW);
      balls[2] = new Ball(530, 400, 30, 3, 14, Color.GREEN);
      balls[3] = new Ball(400, 400, 30, 3, 14, Color.GREEN);
      balls[4] = new Ball(400, 50, 35, 1, -47, Color.PINK);
      balls[5] = new Ball(480, 320, 35, 4, 47, Color.PINK);
      balls[6] = new Ball(80, 150, 40, 1, -114, Color.ORANGE);
      balls[7] = new Ball(100, 240, 40, 2, 60, Color.ORANGE);
      balls[8] = new Ball(250, 400, 50, 3, -42, Color.BLUE);
      balls[9] = new Ball(200, 80, 70, 6, -84, Color.CYAN);
      balls[10] = new Ball(500, 170, 90, 6, -42, Color.MAGENTA);
      
      for (int i = currentNumBalls; i < MAX_BALLS; ++i) {
         balls[i] = new Ball(20, CANVAS_HEIGHT - 20, 15, 5, 45, Color.RED);
      }
    
   }
   
   /** Update the game objects, detect collision and provide response. */
   public void gameUpdate() {
      float timeLeft = 1.0f;  
      
      do {
         float tMin = timeLeft;
         
         for (int i = 0; i < currentNumBalls; ++i) {
            for (int j = 0; j < currentNumBalls; ++j) {
               if (i < j) {
                  balls[i].intersect(balls[j], tMin);
                  if (balls[i].earliestCollisionResponse.t < tMin) {
                     tMin = balls[i].earliestCollisionResponse.t;
                  }
               }
            }
         }
         for (int i = 0; i < currentNumBalls; ++i) {
            balls[i].intersect(box, tMin);
            if (balls[i].earliestCollisionResponse.t < tMin) {
               tMin = balls[i].earliestCollisionResponse.t;
            }
         }
     
         for (int i = 0; i < currentNumBalls; ++i) {
            balls[i].update(tMin);
         }
     
         timeLeft -= tMin;                
      } while (timeLeft > EPSILON_TIME);  
   }
  
   ......

   /** The control panel (inner class). */
   class ControlPanel extends JPanel {
     
      /** Constructor to initialize UI components */
      public ControlPanel() {
         JCheckBox pauseControl = new JCheckBox();
         this.add(new JLabel("Pause"));
         this.add(pauseControl);
         pauseControl.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
               paused = !paused;  
            }
         });
  
         final float[] ballSavedSpeedXs = new float[MAX_BALLS];
         final float[] ballSavedSpeedYs = new float[MAX_BALLS];
         for (int i = 0; i < currentNumBalls; ++i) {
            ballSavedSpeedXs[i] = balls[i].speedX;
            ballSavedSpeedYs[i] = balls[i].speedY;
         }
         int minFactor = 5;    
         int maxFactor = 200;  
         JSlider speedControl = new JSlider(JSlider.HORIZONTAL, minFactor, maxFactor, 100);
         this.add(new JLabel("Speed"));
         this.add(speedControl);
         speedControl.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
               JSlider source = (JSlider)e.getSource();
               if (!source.getValueIsAdjusting()) {
                  int percentage = (int)source.getValue();
                  for (int i = 0; i < currentNumBalls; ++i) {
                     balls[i].speedX = ballSavedSpeedXs[i] * percentage / 100.0f;
                     balls[i].speedY = ballSavedSpeedYs[i] * percentage / 100.0f;
                  }
               }
            }
         });
  
         final JButton launchControl = new JButton("Launch New Ball");
         this.add(launchControl);
         launchControl.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               if (currentNumBalls < MAX_BALLS) {
                  ++currentNumBalls;
                  if (currentNumBalls == MAX_BALLS) {
                     launchControl.setEnabled(false);
                  }
               }
            }
         });
      }
   }
}
