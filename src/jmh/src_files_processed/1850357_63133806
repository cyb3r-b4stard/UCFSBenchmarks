package question3;

import question2.FahrenheitCelsius;

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JRootPane;
import javax.swing.JTextField;



/**
 * ###### ################## - # ####### ### ######## ## ######### ### ########## ## ###### #######
 * 
 * @######:  (######)
 * @#######: (## ####### ####)
 */
public class AppletteFahrenheit extends JApplet implements ActionListener{
      private JTextField entree = new JTextField( 6 );
    /** Le bouton de conversion. */
      private JButton  boutonDeConversion = new JButton( "convertir" );
    /** La sortie en degré Celsius. */
    private JTextField sortie = new JTextField( 6);
    
     /**
     * Appelée par le navigateur ou le visualiseur afin de signaler à l'Applet
     * qu'il est maintenant pris en charge par le système.
     * Il est garanti que ceci précédera le premier appel de la méthode start.
     */
    public void init(){
        JRootPane rootPane = this.getRootPane();    
        rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);
        
      setLayout(new FlowLayout());
      add( entree ); add( boutonDeConversion ); add( sortie );
    sortie.setEditable( false );
    getContentPane().setBackground( Color.pink );
    boutonDeConversion.addActionListener( this );
    
   }

    /** 
     * méthode déclenchée lorsque le bouton de conversion est appuyé. 
     * remarquer que le champs de droite (les degrés Celsius) n'est pas éditable.
     * @param ae l'événement transmis
     */
    public void actionPerformed( ActionEvent ae ){
        try {
        
            String valeur = entree.getText();
            FahrenheitCelsius t1 = new FahrenheitCelsius();

            float celsius =  t1.fahrenheitEnCelsius(Integer.parseInt(valeur)); 
            
             if(celsius < -273.1F) celsius = -273.1F
  
            sortie.setText( Float.toString( celsius ) );
        }
        
        catch (NumberFormatException e) {
            
            sortie.setText("Error !" );
           
        }
        
    }



    /**
     * Retourne quelques renseignements à propos de cet applet. 
     * Un applet devrait remplacer cette méthode afin de retourner un String
     * décrivant l'auteur, la version et les droits d'auteur.
     *
     * @return un String décrivant l'Applet
     */
    public String getAppletInfo()
    {
        return "AppletteFahrenheit Applet, Version 1 " 
        + "Victor Dantas - Cnam - 2013";
    }


    /**
     * Retourne quelques renseignements à propos des paramètres acceptés
     * par l'Applet.  Vous devriez retourner un tableau de Strings décrivant
     * chaque paramètre séparément (premier indice).
     * Le second indice du tableau correspond aux nom, type et description
     * de chaque paramètre.
     *
     * @return  un String[][] décrivant l'Applet
     */
    public String[][] getParameterInfo()
    {
        String paramInfo[][] = {
             {"backgroundcolor",  "#hhhhhh",    "la couleur en hexadécimal"}
        };
        return paramInfo;
    }

}