
/* #### ### ########## #, #### ### 
 * ####:######## #'#####
 * ########:##########  
 * ##:#########
 */

import ecs100.*;
import java.awt.Color;
/**
 * # ####### #### ##### # ######## #### ## ##### ### ########  "###### ##"
 * # ###### ####### # ### ## (## ### ####### ### ### #### ######## #######),
 * ### #### ##### ### ###### # ####### ###### ## ####### ## ##### ### ######(#). 
 * ## ### ###### ####### ### ###### ###### ### ####### ###### ## #######, #### ### ######.
 * ### ####### ###### ###### ### ###### ### #### #####, ### #### ####### #### #####
 * ## # #### ## # "###### ####" ## ### ######## ####,
 * ## ###### #### #### ### ###### ####### ### ##### ## #######, ## ### ### ## ### ####.
 * 
 * ### ### ###### (####) #######, 
 *  ### ####### #### #### ###### ## ### #### ##### ### ###### #### #### #### ### ######.
 *  ### #### #####, ### ###### ### # ####### ## ##### ### ######.
 *  ##### #### #####, ### ####### #### ####### ### ##### ## #######, ### ###, ## ### ####.
 *  ## ### ###### ####### ### ###### ###### ### # #######, ### ###### ##### # #####
 *   #########, ### ###### ##### # ##### (### ### ##### ##### #### ##### #).
 *  ## ### ###, ### ####### ####### ### ######'# #####
 *  ## ### #### ##### ### ####,  ### ####### ###### #### #### #### #####
 *   ## # ####### ## ### ######## ####.
 *
 * ### ### ########## #######,
 *  - ### ####### ###### ##### ## ### (#########) ####### #### ##### ### ####
 *    ### ####### # ##### ##### ## #### #### ### ####### ######, #######
 *    #### ### ###### ######, ## ####### ### #######.
 *    ### ###### #### #### ### ##### ## #### ##### #### ####### (### ## ####
 *     ##### ### ###### #####!)
 *    ### ####### ###### ##### ####### ### ####### ## ### ######## ####.
 *    ### ####### ###### ######## ### ####### ####### ### ##### # ## ##, ### #### ###
 *      ###### ##### ### ##### #####.
 *  - ### ###### ##### # ##### ### ### ##### ## #### ##### #### #######, ####
 *    ## ##### ##### ### #### ######### ##### #### #### ####'# ### ##.  ### ######
 *    ##### # ##### ## #### ####'# ##### ###### ###### (###### ### ##### #####
 *    ##### #### ##### #).
 * 
 * ### ### ######### #######,
 *  - ### ####### ###### ####### ### ####### ## ### ###### #### #### ### ###
 *    ##########. ### #######, ## ### ###### ####### # ### ### ####### #### ####
 *    #### ## #### #### #### #######, #### ### ####### ######'# ## ####### # ### #,
 *    ## ### ####### ###### ####### #### ###### ## ### #### ## "##########".
 *  - #### ###### (###### #### ######## #### ######## ## #### #### ### ######## ####
 *    ####### ## ###) ### ####### ###### ### ##### ### ###### ## #### # ##### ####
 *    ## ## ### ## ### ########## ####### (##, ## ###### #### ### #### #### ## ##
 *    ########## ### #### #### ##### # ##### #####).
 *  - ### ### #### ## #### ### ###### #### ###### ### ## ### #### #### ########
 *    #####. 
 */
public class GuessingGame{

    public static final int maxValue = 40;
    public static final int maxGuessesCore = 5;
    public static final int maxGuessesCompletion = 8;
    
    public static final int barLeft = 50;
    public static final int barTop = 100;
    public static final int size = 10;   
    

    /** CORE
     * Plays one round of the one-number version of the guessing game
     * Computer randomly chooses an integer between 1 and maxValue (40)
     * Draws a horizontal line in the graphics pane labeled with 1 at one end
     *  and maxValue at the other end.
     * Player is offered up to maxGuesses chances to guess this number
     *    Whenever they guess outside the range 1 to maxValue, it asks them to try again
     *    Displays their guess on the line by drawing a bar at the appropriate place
     *     and putting the number above it.
     *    Tells Player if their guess is higher or lower than the answer
     *    Tells the player when they have guessed correctly and stops if they win
     * Returns true if the player guessed correctly, else returns false.
     */
    public boolean playRound(){
        double answer = (int)(1+Math.random()*39);
        int turn = 1;
        this.displayBar();
        UI.println("I've thought of a number between 1 and 40. Can you guess it?");
        while(turn<=maxGuessesCore) {
            int guess = UI.askInt("Guess " + turn + " of " +maxGuessesCore +":");
            if (guess == answer) {
                this.displayGuess(guess, Color.green);
                UI.println("Yes, you won with " + turn + " guesses!");
                return true;
            }
            else if ((guess < answer)&&(guess >=1)) {
                this.displayGuess(guess, Color.blue);
                UI.println("No, that was too low");
                turn= turn +1;
            }
            else if ((guess > answer) && (guess <= maxValue)) {
                this.displayGuess(guess, Color.red);
                UI.println("No, that was too high");
                turn = turn +1;
            }
            else if ((guess<1)||(guess>40)){
                UI.println("Try again");
            }
        }
        UI.println("That's all your guesses; you lost");
        UI.println("The number was " + answer);
        return false;
    }



    /** CORE
     * Plays the guessing game.
     * Prints an introduction, then
     * repeatedly calls playRound to play a single round of the game,
     * keeping track of the score.
     * After each round, it asks if they want to play again.
     * When finished it prints the score (how many times they guessed and how
     * many times they tried).
     */
    public void playGame(){
        UI.initialise();
        UI.println("-----CORE GAME-----------");
        UI.println("Hello, let's play the guessing game");
        UI.println("Each round, you must guess my number;");
        int roundNumber = 0;
        int score = 0;
        boolean success = this.playRound();
        roundNumber = roundNumber +1;
        if (success == true) {
            score = score +1;
        }
        else {
            score = 0;
        }
        String repeat = UI.askString("Play again? (y or n)");
        while (repeat.equals("y")) {
            success = this.playRound();
            roundNumber = roundNumber+1;
            if (success ==  true) {
                score = score +1;
            }
            else{
               if(score >=1){
                   score=score-1;
                }
                else {
                    score=score;
                }
            }            
            repeat = UI.askString("Play again? (y or n)");
        }
        UI.printf("Your score was %d from %d games", score, roundNumber);
    }


    /**
     * Displays the bar.
     * Clears the graphics pane then draws line labeled with 1 and maxValue at the ends
     */
    public void displayBar(){
        UI.clearGraphics();
        UI.setColor(Color.black);
        UI.setLineWidth(4);
        UI.drawLine(barLeft, barTop, barLeft+(maxValue*size), barTop);
        UI.drawString("1", barLeft-size, barTop);
        UI.drawString("40", barLeft+(maxValue*size)+size, barTop);
    }

    /**
     * Displays a guess on the bar, using the specified color.
     * Clears the graphics pane then draws line labeled with 1 and maxValue at the ends
     */
    public void displayGuess(int guessBar, Color col ){
        int height = 5; 
        UI.setColor(col);
        UI.drawLine(barLeft+(size*guessBar), barTop+height, barLeft + (size*guessBar), barTop-height);
        UI.drawString(" "+ guessBar, barLeft+((size-1/2.0)*guessBar), barTop - 2*height);
    }



    /** playRound: COMPLETION
     * Computer randomly chooses two different numbers between 1 and maxValue
     * Draws a horizontal line in the graphics pane labeled with 1 at one end
     *  and maxValue at the other end.
     * User is offered up to maxGuesses chances to guess these two numbers 
     *  Whenever they guess outside the range 1 to maxValue, it asks them to try again
     *  Displays their guess on the line by drawing a bar at the appropriate place
     *  After each guess, it tells the user whether  their guess is:
     *  - correct,
     *  - higher than both numbers,
     *  - lower than both numbers, or
     *  - between the two numbers.
     * Stops when they have used up all their guesses, or have guessed both numbers correctly
     * It returns a score which is
     *  -1, if they guessed neither number,
     *  0, if they guessed just one number
     *  1 plus the number of remaining guesses that they didn't
     *    use, if they guessed both numbers
     */
    public int playRoundCompletion(){
        double answer1 = (int)(1+Math.random()*39);
        double answer2 = (int)(1+Math.random()*39);
        while (answer1==answer2) {                                                   
            answer2 = (int)(1+Math.random()*39);
        }
        int turn = 1;
        boolean result1 = false;                                                     
        boolean result2 = false;
        this.displayBar();
        UI.println("I've thought of 2 numbers between 1 and 40. Can you guess them?");
        while(turn<=maxGuessesCompletion && ((result1==false) || (result2 ==false))) {  
            int guess = UI.askInt("Guess " + turn + " of " +maxGuessesCompletion +":");
            if (guess == answer1) {                                                     
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer1 + " is one of the answers!");               
                result1 = true;                                                         
                turn=turn+1;        
            }
            else if (guess == answer2) {
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer2 + " is one of the answers!");
                result2 = true;
                turn = turn+1;
            }
            else if ((guess < answer1)&&(guess <answer2)&&(guess >=1)) {
                this.displayGuess(guess, Color.blue);
                UI.println("No, that was too low");
                turn= turn +1;
            }
            else if ((guess > answer1) && (guess > answer2) && (guess <= maxValue)) {
                this.displayGuess(guess, Color.red);
                UI.println("No, that was too high");
                turn = turn +1;
            }
            else if (((guess<answer1)&&(guess>answer2))||((guess>answer1)&&(guess<answer2))) {
                this.displayGuess(guess, Color.yellow);
                UI.println("No, that's in between the numbers");
                turn = turn +1;
            }
            else if ((guess<1)||(guess>40)){
                UI.println("Try again");
            }
        }
        if ((result1 == true) && (result2 == true)) {
            return 1+(maxGuessesCompletion-turn+1);     
        }
        else if (result1 == true || result2 == true) {
            return 0;
        }
        else if (result1 != true && result2!= true) {
            return -1;
        }
        return 0;                                  /*this will never be used,the program will always terminate at 1 of the 3 return values above, 
        but it wouldn't compile until I put a return value here. it doesn't seem to be able to find the ones in the if clauses.
        */
    }


    /** playGame:  COMPLETION  
     * Plays a better version of the guessing game.
     * Prints an introduction, then
     * repeatedly calls playRound to play a single round of the game,
     * keeping track of the score.
     * After each round, it asks if they want to play again.
     * When finished it prints the score and how many rounds they went through
     */
    public void playGameCompletion(){
        UI.initialise();
        UI.println("-----CORE GAME-----------");
        UI.println("Hello, let's play the guessing game");
        UI.println("Each round, you must guess my numbers;");
        int roundNumber = 0;
        int score = 0;
        int roundScore = this.playRoundCompletion();
        roundNumber = roundNumber+1;
        if (roundScore != -1) {
            score = score + roundScore;
        }
        if (roundScore==-1){
            if(score >0){
                score=score+roundScore;
            }
            else {
            score = 0;
        }
        }
        String repeat = UI.askString("Play again? (y or n)");
        while (repeat.equals("y")) {
           roundScore = this.playRoundCompletion();
           roundNumber = roundNumber+1;
           if (roundScore != -1) {
               score = score + roundScore;
            }
        
           if (roundScore==-1){
                if(score >0){
                    score=score+roundScore;
                }
                else {
                    score = 0;
                }
           }
           repeat = UI.askString("Play again? (y or n)");
        }
        UI.printf("Your score was %d from %d games", score, roundNumber);
    }
    
    public int playRoundChallenge(){
        double answer1 = (int)(1+Math.random()*39);
        double answer2 = (int)(1+Math.random()*39);
        while (answer1==answer2) {                                                   
            answer2 = (int)(1+Math.random()*39);
        }
        int turn = 1;
        int maxPossible = maxValue;
        int minPossible = 1;
        boolean result1 = false;                                                     
        boolean result2 = false;
        this.displayBar();
        UI.println("I've thought of 2 numbers between 1 and 40. Can you guess them?");
        while(turn<=maxGuessesCompletion && ((result1==false) || (result2 ==false))) {  
            int guess = UI.askInt("Guess " + turn + " of " +maxGuessesCompletion +":");
            if (guess == answer1) {                                                     
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer1 + " is one of the answers!");               
                result1 = true;                                                         
                turn=turn+1;        
            }
            else if (guess == answer2) {
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer2 + " is one of the answers!");
                result2 = true;
                turn = turn+1;
            }
            else if ((guess < answer1)&&(guess <answer2)&&(guess >minPossible)) {
                this.displayGuess(guess, Color.blue);
                UI.println("No, that was too low");
                minPossible = guess;
                UI.setColor(Color.red);
                UI.drawLine(barLeft, barTop, barLeft+(guess*size), barTop);
                turn= turn +1;
            }
            else if ((guess > answer1) && (guess > answer2) && (guess < maxPossible)) {
                this.displayGuess(guess, Color.red);
                UI.println("No, that was too high");
                maxPossible = guess;
                UI.setColor(Color.red);
                UI.drawLine(barLeft+(guess*size), barTop, barLeft+(maxValue*size), barTop);
                turn = turn +1;
            }
            else if (((guess<answer1)&&(guess>answer2))||((guess>answer1)&&(guess<answer2))) {
                this.displayGuess(guess, Color.yellow);
                UI.println("No, that's in between the numbers");
                turn = turn +1;
            }
            else if ((guess<=minPossible)||(guess>=maxPossible)){
                UI.println("Try again");
            }
        }
        if ((result1 == true) && (result2 == true)) {
            return 1+(maxGuessesCompletion-turn+1);     
        }
        else if (result1 == true || result2 == true) {
            return 0;
        }
        else if (result1 != true && result2!= true) {
            return -1;
        }
        return 0;                                  /*this will never be used,the program will always terminate at 1 of the 3 return values above, 
        but it wouldn't compile until I put a return value here. it doesn't seem to be able to find the ones in the if clauses.
        */
    }
    
    public int playRoundChallengeRigged(){
        double answer1 = (int)(1+Math.random()*39);
        double answer2 = (int)(1+Math.random()*39);
        while (answer1==answer2) {                                                   
            answer2 = (int)(1+Math.random()*39);
        }
        int turn = 1;
        int maxPossible = maxValue;
        int minPossible = 1;
        boolean result1 = false;                                                     
        boolean result2 = false;
        this.displayBar();
        UI.println("I've thought of 2 numbers between 1 and 40. Can you guess them?");
        while(turn<maxGuessesCompletion && ((result1==false) || (result2 ==false))) {  
            int guess = UI.askInt("Guess " + turn + " of " +maxGuessesCompletion +":");
            if (guess == answer1) {                                                     
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer1 + " is one of the answers!");               
                result1 = true;                                                         
                turn=turn+1;        
            }
            else if (guess == answer2) {
                this.displayGuess(guess, Color.green);
                UI.println("Yes, " +answer2 + " is one of the answers!");
                result2 = true;
                turn = turn+1;
            }
            else if ((guess < answer1)&&(guess <answer2)&&(guess >minPossible)) {
                this.displayGuess(guess, Color.blue);
                UI.println("No, that was too low");
                minPossible = guess;
                UI.setColor(Color.red);
                UI.drawLine(barLeft, barTop, barLeft+(guess*size), barTop);
                turn= turn +1;
            }
            else if ((guess > answer1) && (guess > answer2) && (guess < maxPossible)) {
                this.displayGuess(guess, Color.red);
                UI.println("No, that was too high");
                maxPossible = guess;
                UI.setColor(Color.red);
                UI.drawLine(barLeft+(guess*size), barTop, barLeft+(maxValue*size), barTop);
                turn = turn +1;
            }
            else if (((guess<answer1)&&(guess>answer2))||((guess>answer1)&&(guess<answer2))) {
                this.displayGuess(guess, Color.yellow);
                UI.println("No, that's in between the numbers");
                turn = turn +1;
            }
            else if ((guess<=minPossible)||(guess>=maxPossible)){
                UI.println("Try again");
            }
        }
        if (turn<maxGuessesCompletion && ((result1==false) || (result2 ==false))){
            if (result1 == false) {
                int guess = UI.askInt("Guess " + turn + " of " +maxGuessesCompletion +"(Hint: Answer=" + answer1 ") :");
            }
        }
        if ((result1 == true) && (result2 == true)) {
            return 1+(maxGuessesCompletion-turn+1);     
        }
        else if (result1 == true || result2 == true) {
            return 0;
        }
        else if (result1 != true && result2!= true) {
            return -1;
        }
        return 0;                                  /*this will never be used,the program will always terminate at 1 of the 3 return values above, 
        but it wouldn't compile until I put a return value here. it doesn't seem to be able to find the ones in the if clauses.
        */
    }
    public static void main(String[] arguments){
        GuessingGame game = new GuessingGame();
        UI.initialise();
        game.playGame();
        
    }        

}