
/**
 * ### ######### ##### #### ####### # ######### #### ## ## ####
 * ######## ### ### ### ## ### #-####.
 * 
 * @###### (##### #######) 
 * @####### (## ######## ####)
 */
public class Rectangle
{
    private ClosedInterval closedInterval;
    private ClosedInterval contains;
    private ClosedInterval top;
    private ClosedInterval left;
    private ClosedInterval right;
    private ClosedInterval bottom;
    private ClosedInterval length;
    private int rectangle;
    private int xInterval;
    private int yInterval;

    /**
     * NC means not complete !!
     * COMPLETE(?) #1 of 8 Constructor that takes two closed intervals
     * 
     * @param  y   for both fields input ("new ClosedInterval(#,#)")
     * @return     none
     */
    public Rectangle(ClosedInterval top, ClosedInterval left)
    {
        this.left = left;
        this.top = top;
    }
    
    /**
     * COMPLETE(?) #2 of 8 Constructor that takes 4 parameters; one of the left and length
     * and one of the right and length (two so far).
     * The "next" two are the bottom endpoint AND the length.
     *
     * @param  y   input into each field just a number, "nothing else"
     * @return     the sum of x and y
     */
    public Rectangle(int left, int top,
    int bottom, int length)
    {
        this.left = new ClosedInterval();
        this.top = new ClosedInterval();
        this.bottom = new ClosedInterval();
        this.length = new ClosedInterval();
    }

    /**
     * WORKS #3 of 8 A boolean method that returns a value based on whether given
     * coordinates fall within the rectangle
     *
     * @param  y   
     * @return     the sum of x and y
     */
    public boolean contains(int x, int y)
    {
        if(this.left.contains(x) && this.top.contains(y)) {
        return true;
        }
        return false;    
    }

    /**
     * WORKS #4 of 8 Describe the rectangle object.
     *
     * @param      !! Only used with Constructor having to fields   
     * @return     the sum of x and y
     */
    public String toString()
    {
        return "(xleft = " + left.toString() +
               " , " + "xright = " + top.toString() + ")";
    }

    /**
     * #5 of 8 Returns true only of the Rectangle called and the 
     * rectangle referenced return true for isSame
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    public boolean isSame(Rectangle rectangle)
    {
        if((this.left == rectangle.left) && (this.top == rectangle.top)) {
            return true;
        }
        return false;
    }

    /**
     * #6 of 8 Method that determines whether the rectangles intersect
     * using Rectangle object(?)
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    public int intersection(Rectangle rectangle)
    {
        new Rectangle = rectangle();
        return this.left;
    }

    /**
     * #7 of 8 Getter method that returns the X interval
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    public int getxInterval(int xInterval)
    {
        return xInterval;
    }

    /**
     * #8 of 8 Getter method that returns the Y interval
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    public int getyInterval(int yInterval)
    {
        return yInterval;
    }

}