import java.util.Map;
import java.util.List;
import java.util.Collections

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.lang.IllegalArgumentException;

import java.util.HashSet;
import java.util.Arrays;

/**
 * ####### #-#### ######## ## # ######.
 * 
 * ######## ### ######### #### ##### ######## #-#####, ## ###### #,
 * ###### ## ## ##### ######. ### ### ######## ## ### ######## ## ### #####
 * ######, ### ##### #-# #-##### ######### ## ### ###### ###### ##
 * "###### ###" ## # ###### ## # ##########, ## ######
 * # ######## ## ########## ########## #### ### ##### ## ### ######.
 * #.#. "####" ######## "###" ### "###" ## ### #-#####
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class NgramAnalyser
{
    /** dictionary of all distinct n-grams and their frequencies */
    private HashMap<String,Integer> ngram;

    /** number of distinct characters in the input */
    private int alphabetSize;

    /** n-gram size for this object (new field) */
    private int ngramSize;

    /** 
     * Analyse the frequency with which distinct n-grams, of length n,
     * appear in an input string. 
     * n-grams at the end of the string wrap to the front
     * e.g. "abbbbc" includes "bca" and "cab" in its 3-grams
     * @param int n size of n-grams to create
     * @param String inp input string to be modelled
     */
    public NgramAnalyser(int n, String inp) 
    { 
        ngramSize = n;
        alphabetSize = 0;
        ArrayList<Character> characters = new ArrayList<Character>();
        if (inp == "" || inp == null || ngramSize == 0 || ngramSize > inp.length()){
            throw new IllegalArgumentException();
        }
        for (int begin = 0; begin < inp.length(); begin++){
            if(begin + ngramSize < inp.length()){
                String finalString = inp.substring(begin, begin+ngramSize);
                int freq = ngram.get(finalString);
                ngram.put(finalString, freq+1);
            }
            else{
                String finalString = inp.substring(begin, inp.length()-1) + inp.substring(0, inp.length() - (begin+ngramSize));
                int freq = ngram.get(finalString);
                ngram.put(finalString, freq+1);
            }
        }

        for (char letter : inp.toCharArray()){
            if (!characters.contains(letter)){
                characters.add(letter);
                alphabetSize = alphabetSize + 1;
            }
        }
    }

    /** 
     * Analyses the input text for n-grams of size 1.
     */
    public NgramAnalyser(String inp) 
    {
        this(1,inp);
    }

    /**
     * @return int the size of the alphabet of a given input
     */
    public int getAlphabetSize() {
        return alphabetSize;
    }

    /**
     * @return the total number of distinct n-grams appearing
     *         in the input text.
     */
    public int getDistinctNgramCount() {
        return ngram.size();
    }

    /** 
     * @return Return a set containing all the distinct n-grams
     *         in the input string.
     */
    public Set<String> getDistinctNgrams() {
        return null;
    }

    /**
     * @return the total number of n-grams appearing
     *         in the input text (not requiring them to be distinct)
     */
    public int getNgramCount() {
        int totalFreq = 0;
        for (Integer freq : ngram.values()){
            totalFreq = totalFreq + freq;
        }
        return totalFreq;
    }

    /** Return the frequency with which a particular n-gram appears
     * in the text. If it does not appear at all, return 0.
     * 
     * @param ngram The n-gram to get the frequency of
     * @return The frequency with which the n-gram appears.
     */
    public int getNgramFrequency(String ngram) {
        Map<String, Integer> map = new HashMap<String, Integer>();
        int freq = map.get(ngram);
        if (freq == 0){
            return 0;
        }
        else{
            return freq;
        }
    }


    /**
     * Generate a summary of the ngrams for this object.
     * @return a string representation of the n-grams in the input text 
     * comprising the ngram size and then each ngram and its frequency
     * where ngrams are presented in alphabetical order.     
     */
    public String toString()
    {
        String strNgram = String.valueOf(ngramSize);
        HashMap<Integer, String> map = new HashMap<Integer, String>();
        List<String> list = new ArrayList<String>(map.values());
        Collections.sort(list);
        return strNgram;
    }

}