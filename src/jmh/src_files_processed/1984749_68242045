/**
 * ##### # ########### ## ##### ########### ####.
 * 
 * @###### (##### ####) 
 * @####### (#.#)
 */
public class ArrayCustom{
   private Comparable[] data;
   private Comparable next[];
   private Comparable [] queue;
   private Comparable [] total;
   private int nil = 0;
   private int first = 0; 
   private int length = 0;
   private int y = 0;
   private int g = 0;

   /**
     * Constructor for objects of class ArraySorter
     */
   public ArrayCustom(){
       data = new Comparable[]{5,1,2,3,4}; 
       next = new Integer[];
       queue = new Comparable[data.length*2];
       mergeSort(data);
   }
    
   public void mergeSort(Comparable[] input){
    setUp(input);
    writeBack(input,0);
   }
   
   public void setUp (Comparable[] input){
   int i = 0;
   for(Comparable d: input){
       queue[i]= d;
       next[i]= nil;
       next[i] = d;
       i++;
   }
   
   for(int j = 0; j < queue.length; j++){
   g = y + 1;
   if(g != queue.length){
       String x = queue[y].toString();
       String z = queue[g].toString();
       int first = Integer.valueOf(x);
       int second = Integer.valueOf(z);
       merge(poll(),poll());
       y++;
   }
   else{
   
   }
   }
  }
   
  public int merge(int list1, int list2){
   Integer l1 = Integer.valueOf(list1);
   Integer l2 = Integer.valueOf(list2);
   int result = l1.compareTo(l2);
   if(result > 0) {
       return l1;
   }
     else if(result < 0) {
       return l2;
   }
   return result;
  }
  
  public void writeBack(Comparable[] ar, int list){
      System.arraycopy(queue, list, ar, list, data.length);
      System.out.println(data[0]);
      System.out.println(data[1]);
      System.out.println(data[2]);
      System.out.println(data[3]);
      System.out.println(data[4]);
  }
  
  public void add(int list) {
        next[(first+length) % next.length] = list;
        length++;
   }

  public boolean isEmpty() {
       return length==0;
  }
   
  public int poll(){
   if (isEmpty());
   Integer result = (Integer) queue[first];
   first = (first+1) % queue.length;
   length-- ;
   int y = Integer.valueOf(result);
   return result;
  }
}