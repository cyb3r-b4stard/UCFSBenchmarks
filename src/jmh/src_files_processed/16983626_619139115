
/**
 * ##### # ########### ## ##### ########### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class TestProgram
{

    private ArrayQueue myArrayQueue;

    public static void main()
    {
        TestProgram myTestProgram = new TestProgram();

        myTestProgram.display();
        System.out.println("The queue is empty");
        System.out.println("Run isEmpty()");
        myTestProgram.isEmpty();

        System.out.println("The queue is empty");
        System.out.println("Run isFull()");
        result = myTestProgram.isFull();
        System.out.println("isFull() returns: " + result + "\n");

        System.out.println("The queue is empty");
        System.out.println("Run serve()");
        myTestProgram.serve();
        System.out.println();

        System.out.println("The queue is empty");
        System.out.println("Run peek()");
        myTestProgram.peek();
        

        System.out.println("The queue is empty");
        System.out.println("Run queueLength()");
        result1 = myTestProgram.queueLength();
        System.out.println("queueLength() returns: " + result1 + "\n");

        System.out.println("The queue is empty");
        System.out.println("Run enQueue() with 1");
        myTestProgram.enQueue(1);
        myTestProgram.display();

        System.out.println("The queue is empty");
        System.out.println("Run serve() with 1");
        myTestProgram.enQueue(1);
        myTestProgram.display();

        
        
    }
    public TestProgram()
    {
        myArrayQueue = new ArrayQueue();
    }

    public void display()
    {
        myArrayQueue.displayQueue();
        myArrayQueue.displayArray();
    }

    public void isEmpty()
    {
        boolean result = myArrayQueue.isEmpty();
        System.out.println("isEmpty() returns: " + result + "\n");
    }

    public void isFull()
    {
        return myArrayQueue.isFull();
    }

    public void serve()
    {
        try
        {
            int result = myArrayQueue.serve();
            System.out.println("serve() returns: " + result)
        }
        catch (QueueBoundaryException e)
        {
            System.out.println("A QueueBoundaryException occured.");
        }

    }

    public void peek()
    {
        try
        {
            int result = myArrayQueue.peek();
            System.out.println("peek() returns: " + result);
        }
        catch (QueueBoundaryException e)
        {
            System.out.println("A QueueBoundaryException occured.");
        }

    }

    public void queueLength()
    {
        return myArrayQueue.queueLength();
    }

    public void enQueue(int item)
    {
        myArrayQueue.enQueue(item);
    }
}