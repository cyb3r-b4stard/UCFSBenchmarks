
/* #### ### #######, ########## #
 * ####:
 * ########:
 * ##:
 */

import ecs100.*;
import java.awt.Color;
import java.util.*;

/** 
 * ######## ######## #########
 * 
 * ######### ######## ######### ## ########### ######## ###### ####
 * ###-###### ### ####### #### #### ### ####### ######## #######. 
 * 
 */
public class Mondrian {

    static final int MondrianLineWidth = 12;    
    static final int MondrianSideMinimum = 48;  

    static final Color mondrianBlack   = new Color(25,23,26);
    static final Color mondrianWhite   = new Color(229,227,228);
    static final Color mondrianYellow  = new Color(255,221,10);
    static final Color mondrianRed     = new Color(223, 12, 29);
    static final Color mondrianBlue    = new Color(8,56,138);

    static int level = 2;   
    static int chance = 45; 

    static List<Color> mondrianColours = new ArrayList<Color>(); 

    public Mondrian() {
        UI.setWindowSize(900,600);
        UI.setDivider(0.1); 

        UI.addButton("Create", this::drawMondrian);
        UI.addButton("Level+", this::increaseLevel);
        UI.addButton("Level-", this::decreaseLevel);
        UI.addButton("More", this::increaseChance);
        UI.addButton("Less", this::decreaseChance);

        mondrianColours.add(mondrianWhite);
        mondrianColours.add(mondrianWhite);
        mondrianColours.add(mondrianWhite);
        mondrianColours.add(mondrianYellow);
        mondrianColours.add(mondrianRed);
        mondrianColours.add(mondrianBlue);

        drawMondrian();
    }

    /**
     * Increases the level, up to a maximum of 9.
     */
    public void increaseLevel() {
        if (level < 9)
            level++;

        drawMondrian(); 
    }

    /**
     * Decreases the level, up to a minimum of 0.
     */
    public void decreaseLevel() {
        if (level > 0)
            level--;

        drawMondrian();
    }

    /**
     * Increases the likelihood of creating a sub-Mondrian
     * up to a maximum of 1.
     */
    public void increaseChance() {
        if (chance <= 95)
            chance += 5;    

        drawMondrian();
    }

    /**
     * Decreases the likelihood of creating a sub-Mondrian
     * up to a minimum of 0.
     */
    public void decreaseChance() {
        if (chance >= 5)
            chance -= 5;  

        drawMondrian();
    }

    /**
     * @return a random Mondrian colour.
     */
    Color randomMondrianColour() {
        return mondrianColours.get((int)(mondrianColours.size()*Math.random()));
    }

    /** 
     * Draws a Mondrian within a frame specified by
     * the coordinates (x1, y1) and (x2, y2).
     * 
     * Always fills the specified frame with one (random) Mondrian colour.
     * 
     * Generates a split point within the frame to potentially 
     * draw further sub-Mondrians. The split point is within a subframe that 
     * is centred in the original frame with margins extending from 25%-75%
     * of the original frame. 
     * 
     * Only draws the dividing black lines and further sub-Mondrians, if all of the following hold:
     *    1. the currentLevel is not zero yet. 
     *    2. the filled rectangle has no sides that are smaller than MondrianSideMinimum.
     *    3. the chance of creating a sub-Mondrian is > 0%.
     * 
     */
    public void drawMondrian(int x1, int y1, int x2, int y2, int currentLevel) {

        UI.setColor(randomMondrianColour());
        UI.fillRect(x1+MondrianLineWidth/2, y1+MondrianLineWidth/2,    
            x2-x1-MondrianLineWidth, y2-y1-MondrianLineWidth);

        UI.setLineWidth(MondrianLineWidth);              
        UI.setColor(mondrianBlack);

        UI.drawRect(x1, y1, x2-x1, y2-y1);
        /*# YOUR CODE HERE */
        if(currentLevel == 0 || chance <= 0 || (x2-x1 < MondrianSideMinimum) ||  (y2-y1 < MondrianSideMinimum) ){
            return;
        }
         int distX = ((int)((x2*Math.random()))x1+MondrianLineWidth);
        int distY = (y2-y1)/2;

        int x3 = x1+distX;
        int y3 = y1+distY;
   
   
        int rand = (int)(Math.random()*100);

        if (chance >= rand) {
            drawMondrian(x1,y1,x3,y3, currentLevel-1);
            drawMondrian(x3,y1,x2,y3, currentLevel-1);
            drawMondrian(x1,y3,x3,y2, currentLevel-1);
            drawMondrian(x3,y3,x2,y2, currentLevel-1);
        }
        /*    rand = (int)(Math.random()*100);
        if (chance >= rand) {
        drawMondrian(x2-distX,y1,x2,y1+distY, currentLevel-1);
        }
        rand = (int)(Math.random()*100);
        if (chance >= rand) {
        drawMondrian(x1,y2-distY,x1+distX,y2, currentLevel-1);
        } 
        rand = (int)(Math.random()*100);
        if (chance >= rand) {
        drawMondrian(x2-distX,y1+distY,x2,y2, currentLevel-1);
         */     

    }

    /**
     * Paints a Mondrian painting by drawing the outer frame and
     * calling drawMondrian.
     * 
     */
    public void drawMondrian() {
        int margin = 20;    

        int width = UI.getCanvasWidth() - margin;
        int height = UI.getCanvasHeight();

        UI.clearGraphics();
        UI.setLineWidth(MondrianLineWidth);

        UI.clearText();
        UI.print("Level: " + level + "\n");
        UI.print("Chance: " + chance + "%");

        int x1 = margin;
        int y1 = margin;
        int x2 = margin + (width - margin);
        int y2 = margin + (height - 2*margin);

        drawMondrian(x1, y1, x2, y2, level);

        UI.setColor(mondrianBlack);
        UI.drawRect(x1, y1, x2-x1, y2-y1);
    }

    public static void main(String[] arguments) {
        new Mondrian();
    }   
}