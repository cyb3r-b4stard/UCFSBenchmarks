import java.util.ArrayList;
import java.awt.Color;

/**
 * # ####### ## # ########## ## #########.
 * ### ####### ###### ### ###### # #######.
 * 
 * @######  (#### ####)
 * @####### (####)
 */
public class Collage
{
    /**
     * A collage (picture) comprises a collection of Fragments (image components)
     */
    private ArrayList<Fragment> collage;

    /**
     * Construct a new Collage object.
     */
    public Collage()
    {
        collage = new ArrayList<Fragment>();
    }

    /**
     * Add a new Fragment (line) to the collage.
     * @param f Fragment to add
     */
    public void addFragment(Fragment f)
    {
        collage.add(f);
    }

    /**
     * Get the Fragment at position i.
     * @param  i  int the position of the Fragment object
     * @return Fragment object at position i
     */
    public Fragment getFragment(int i)
    { 
        collage.get(i);
        return collage.get(i);
    }

    /**
     * Get the size of the collage.
     * @return  int the number of Fragments in the Collage
     */
    public int numberOfFragments() 
    {   
        return collage.size();
    }

    /**
     * Move every fragment in the collage by a given amount.
     * @param xDelta int pixels of horizontal move
     * @param yDelta int pixels of vertical move
     */
    public void move(int xDelta, int yDelta)
    {
        for (fragment : collage) {
            Fragment.moveHorizontal(xDelta);
            Fragment.moveVertical(yDelta);
        }
    }

    /**
     * Set every fragment in the collage to have size tileWidth by tileHeight.
     * @param tileWidth new int x-size for the Fragment
     * @param tileHeight new int y-size for the Fragment
     */
    public void makeTiles(int tileWidth, int tileHeight)
    {
    }

    /**
     * Scale the collage (relative to 0,0) by moving each image to a new position and scaling the image size. 
     * @param scale double where less than one means shrink and more than one means expand the collage
     */
    public void explode(double scale)
    {
    }

    /**
     * Find smallest x position in the collage, assuming that the Collage has at least one Fragment.
     * @return int minimum x-value of any Fragment
     */
    public int minX() 
    {
        return 0; 
    }

    /**
     * Find smallest y position in the collage, assuming that the Collage has at least one Fragment.
     * @return int minimum y-value of any Fragment
     */
    public int minY() 
    {
        return 0; 
    }

    /**
     * Find largest x position in the collage, assuming that the Collage has at least one Fragment.
     * @return int maximum x-value of any Fragment
     */
    public int maxX() 
    { 
        return 0; 
    }

    /**
     * Find largest y position in the collage, assuming that the Collage has at least one Fragment.
     * @return int maximum y-value of any Fragment
     */
    public int maxY() 
    {
        return 0; 
    }

    /**
     * Choose any one of the fragments in the collage at random and remove it from the collage.
     */
    public void removeRandom()
    {
    }

    /**
     * Count number of images whose keywords include the substring key.
     * @param key String, the substring to search for
     * @return count int of number of qualifying images
     */
    public int countKeys(String key) 
    {
        return 0; 
    }

    /**
     * Find a Fragment whose name includes key. 
     * This method could be used e.g. to select colors for making tile pictures.
     * Optional extension: return any one of the matching fragments chosen at random, not just the first one.
     * @param key String to search for 
     * @return Fragment the first that matches this key
     */
    public Fragment findFragment(String key)
    {
        return null; 

    }

    /** 
     * Make a newline separated string of all keywords in the collage excluding any duplicates.
     * Optional extension: use substrings of keywords when searching for duplicates (and write JUnit test cases for that)
     * @return String of Fragment keywords
     */
    public String getAllKeywords()
    {
        return null; 
    }

    /**
     * Generate a human readable summary of the features of the collage.
     * Format the string as you wish with your own choice of information.  
     * e.g. you can include information such as the number of Fragments, 
     * bounding box co-ordinates, and keywords used.
     * @return String summarising the features of the collage.
     */
    public String toString() 
    {
        return null; 
    }

}