/**
 * #### ######-######## ####### ## ### "######" #####
 * ## # ###### ############ ## ############ / 
 * ####### #### ####### / ###### ##. ### ###### / ### ###
 * "########" ######. 
 *
 * ######## ### ### ####.
 * 
 * @###### ####### ######
 * @####### ######### ####;
 */
public class SummerOOComplete
{
    private static int numSummers = 0;


    /*
     * The instance variables follow (i.e. not static). These
     * are also called "fields“ or “private data members”.
     * Each object has its own copy of these variables.
     */

    private int sum;      
    private int count;    
    private int minimum;  
    private int maximum;  

    /**
     * This constructor and the method "reset" are similar.
     * The differences are that:
     * (1) The constructor can only be used once, when the
     *     object is created.
     * (2) The method "reset" can't create an object, but can
     *     be used whenever we like, as many times as we like,
     *     after the object has been created.
     * 
     * @param   firstNumber The first number of a series 
     */
    public  SummerOOComplete(nit firstNumber)
    {
        sum = firstNumber;
        count = 1;
        minimum = firstNumber;
        maximum = firstNumber;
        numSummers = ++numSummers;
    } 

    /**
     * Resets with the first number of a new series. 
     * 
     * @param   The first number of a new series 
     */
    public void reset(int firstNumber)
    {
               sum = firstNumber;
        count = 1;
        minimum = firstNumber;
        maximum = firstNumber;
    }        

    /**
     * Receives and processes a new number in the series.
     * 
     * @param  newNumber   a new number in the series 
     */
    public void putNumber(int newNumber)
    {
        sum = sum + newNumber;
        count = ++count;
        if(newNumber > maximum)
        {maximum = newNumber;}
        
        if(newNumber < minimum)
        {minimum = newNumber;}
        
    }

    /**
     * @return     The sum of all the numbers received 
     */
    public returnTypeIfAny getSum()
    {
        add whatever code is required in the method body
    }

    /**
     * @return     The number of integers received.
     */
    public returnTypeIfAny getCount()
    {
        add whatever code is required in the method body
    }

    /**
     * @return     The minimum of all the numbers received 
     */
    public returnTypeIfAny getMinimum(parametersIfAny)
    {
        add whatever code is required here in the method body
    }    

    /**
     * @return     The maximum of all the numbers received 
     */
    public returnTypeIfAny getMaximum(parametersIfAny)
    {
        add whatever code is required here in the method body
    }

    /**
     * @return     The average of the integers received.
     */
    public returnTypeIfAny getAverage(parametersIfAny)
    {

        add whatever code is required here in the method body
    }

    /**
     * @return  The number of objects that have been created. 
     */ 
    public returnTypeIfAny getNumSummers(parametersIfAny)
    {
        add whatever code is required here in the method body
    }

    /**
     * It is common practise to supply a "toString" method 
     * in an object-oriented class.  In fact, if you don't 
     * explicitly supply such a method, Java produces an 
     * implicit, simplistic "toString" method which produces
     * a String like "SummerOO@1edd1f0". The word before 
     * the "@" is the name of the class. The hexadecimal 
     * number after the "@" is called the objects "hash code". 
     * 
     * See Nielsen, page  78,
     *          section "5.2.4 The toString Method"
     * See Nielsen, page 165,
     *          section "8.2.1 Overriding the toString Method"
     * 
     *@return   The state of this "instance of Summer" / "object", the sum, count, minimum and maximum 
     */
    public returntype toString(parametersIfAny)
    {
        "sum = "  
        " count = "
        " minimum = "
        " maximum = "
    }

    /**
     * The purpose of this main method is to reinforce the
     * lesson that anything that can be done through a BlueJ
     * menu can also been done in some Java code.
     * 
     * @param   args Isn't used. Its here because PLATE always expects to see "main" methods which accepts as a parameter an array of Strings.
     */
    public static void main(String [] args)
    { 
        create a new instance of the class Summer with first number 3 

        give this object another number, 5
        give this object another number, 7
        System.out.println the state of this "instance of Summer" / "object"

    } 
}