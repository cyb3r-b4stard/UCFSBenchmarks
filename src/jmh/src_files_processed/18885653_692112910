
/* #### ### #### ### ########## #
 * ####:
 * ########:
 * ##:
 */

import ecs100.*;
import java.awt.Color;
import javax.swing.JColorChooser;

public class MiniPaint{

    private double startX, startY;
    private Color currentColor = Color.black;
    private String types; 
    private String notFill = "off";

    /** Sets up the user interface - mouselistener and buttons */
    public MiniPaint(){
        UI.addButton("Line", ()->{types = "Line";});
        UI.addButton("Rectangle", ()->{types = "Rect";});   
        UI.addButton("Oval", ()->{types = "Oval";});
        UI.addButton("Image", ()->{types = "Image";});
        UI.addButton("Rings", ()->{types = "Rings";});
        UI.addButton("Color", ()->{types = "Color";});
        UI.addButton("Clear", ()->{types = "Clear";});
        UI.addButton("Quit", UI::quit);
        UI.addButton("Fill/Unfill", this::fill());
        
        UI.setMouseListener(this::doMouse);
    }


    /**
     * Respond to mouse events
     * When pressed, remember the position.
     * When released, draw the current shape using the pressed position
     *  and the released position.
     * Uses the value in the field to determine which kind of shape to draw.
     * Although you could do all the drawing in this method,
     *  it may be better to call some helper methods for the more
     *  complex actions (and then define the helper methods!)
     */
    public void doMouse(String action, double x, double y) {
        if(types.equals("Line")){
            UI.setLineWidth(10);
            if(action.equals("pressed")){
            this.startX = x;
            this.startY = y;
        }
        else if(action.equals("released")){
           UI.drawLine(this.startX, this.startY, x, y);
        } 
       }
       if(types.equals("Rect")){
           
       }
       if(types.equals("Oval")){
           
       }
       if(types.equals("Image")){
           
       }
       if(types.equals("Rings")){
           
       }
       if(types.equals("Color")){
           
       }
       if(types.equals("Clear")){
           
       }
            
    }
    
    public void fill(){
        
         
        UI.println(notFill);
        if(notFill.equals("on")){
            notFill = "off";
        }
        else if(notFill.equals("off")){
            notFill = "on";
        }
    }
   
    public void drawLine(double startx, double starty, double x, double y){
      
       
        
    }
    
 /*   
    public void drawARectangle(double x, double y){
        return true;
    }
    
    
    public void drawAnOval(double x, double y){
        return true;
    }
    
    
    public void drawAnImage(double x, double y){
        return true;
    }
    
    
    public void drawRings(double x, double y){
        return true;
    }
    

    public static void main(String[] arguments){
        new MiniPaint();
    }        
*/
}