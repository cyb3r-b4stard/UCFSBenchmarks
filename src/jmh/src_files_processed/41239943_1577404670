
/**
 * ###### ### ###### ## ########
 * 
 * @######  ##### ########
 * @####### ## ###. ####
 */
public class Etudiant {
/**
 * nom est le nom de l'etudiant
 */
    private String nom;
    /**
     * prenom est le prenom l'etudiant 
     */
    private String prenom;
    /**
     * notes sont les notes de l'etudiant (tableau)
     */
    private double[] notes;
    
    
    /**
     * Instanciez un etudiant qui se nomme nomE, prenomE
     * Et creer un tableau de 20 notes
     */
  public Etudiant(String nomE,String prenomE) {
      this.nom = nomE;
      this.prenom = prenomE;
      this.notes = new double[20];
      
    }
    /**
     * Instanciez un etudiant qui se nomme nomE, prenomE
     * Et creer un tableau de x notes(cases)
     * les valeurs du tableau prennent ici -1
     * Lorsque x est négatif une erreur est affiché
     * 
     * @param nomE le nom de l'etudiant
     * @param prenomE le prenom de l'etudiant
     * @param x le nombre de cases du tableau
     */
    public Etudiant(String nomE,String prenomE, int x ) {
        this.nom=nomE;
        this.prenom= prenomE;
         if (x <= 0) {
            throw new NegativeArraySizeException("impossible : taille négative");
    
    }
        this.notes = new double[x];
        /**
         * Pour i allant de 0 jusque la taille du tableaun on passe à la case suivante
         * et la case i prends la valeur -1
         */
        for (int i = 0; i < notes.length; i++) {
            this.notes[i]=-1;
        }
       
    
}
/**
 * Instanciez un etudiant qui se nomme nomE, prenomE
     * Et creer un tableau de x 
     * 
     * @param nomE est le nom de l'etudiant 
     * @param prenomE est le prenom de l'etudiant
     * @param tableau est un tableau 
     * 
     * Le private et le new permettent de respecter l'encapsulation des données
     * 
 */
    public Etudiant(String nomE,String prenomE, double[] tableau ) {
         this.nom=nomE;
        this.prenom= prenomE;      
        this.notes = new double[tableau.length];
        for (int i = 0; i < notes.length; i++) {
            this.notes[i] = tableau[i];
            
    }
    
}
    


/**
     * 
     * Constructeur par copie
     */
     public Etudiant(Etudiant e) {
        this.nom = e.nom;
        this.prenom = e.prenom;
        this.notes = e.notes;
        
        }
        
        
        
        
        /**
         * Return une chaine de caractère
         */
public String toString() {
    String A = this.nom + " " + this.prenom + "\n";
    A = A + "Notes : [ ";
    for(int i =0; i < notes.length; i++){  A += " " + this.notes[i]; };
    A = A + " ] ";
    return A;
}

/**
 * Accesseur de l'attribut nom
 */
public String getNom(){
    
    return this.nom;
    
    
}
/**
 * Modificateur de nom
 * 
 * @param nom = nouveau nom de l'etudiant
 */
public void setNom(String nom) {
    
    this.nom=nom;  
    
    
}
public double getNote(int indice){
    
    if((this.notes.length-1) >= indice) {
     this.notes = new double[indice];
     
    }
    else {
        
        throw new indexoutofbound("le tableau n'est pas aussi grand");
    }
        
        
    return this.notes
    
    
    
}
    
    
    
    
    
public double getNote() {
    for(int i =0; i < notes.length; i++) {
        this.notes= notes[i];
    }
    
    return this.notes;
}




/**
 * Methode main de la classe Etudiant
 */
    public static void main (String [] args) {
    Etudiant e1 = new Etudiant("Dupont", "Louis");
    Etudiant e2 = new Etudiant("Dupont", "Louis", 5);
    double [] tableau = {9.78 , 18 , 12.5 , 10 , 16.25};
    Etudiant kevin = new Etudiant("Kevin","Laplace",tableau);
    
        System.out.println(e2.toString());
        System.out.println (kevin);
        tableau[0] = 0;
        System.out.println (kevin);
        kevin.getNom();
        kevin.setNom("test");
        
    }
    
    
    
}