import java.util.*;
/**
 * ##### # ########### ## ##### ###### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Flight
{
    private String flightNumber;
    private String departure;
    private String destination;
    private int totalLoadCapacity;
    private int availableLoadCapacity;
    private ArrayList<Luggage> luggage;
    
    /**
     * Constructor for objects of class Flight
     */
    public Flight(String a, String b, String c, int d)
    {
        flightNumber = a;
        departure = b;
        destination = c;
        totalLoadCapacity = d;
        availableLoadCapacity = totalLoadCapacity;
        luggage = new ArrayList<Luggage>();
        
    }

    public String toString()
    {
        return flightNumber + ": " + departure + "-" + destination + " (C: " + totalLoadCapacity + "kg; A:" + availableLoadCapacity + "kg)";
    }

    public void addLuggage (Luggage l)
    {
        if (availableLoadCapacity<=0){
        luggage.add(l);
        totalLoadCapacity = totalLoadCapacity;  
        availableLoadCapacity = availableLoadCapacity - l.getWeight ();
    }
        else {
        system.out.println("Tag dig sammen, abekat! Vi har ikke plads til flere bananaananaanaz")
    }
    }

    public void removeLuggage (Luggage l)
    {
        luggage.remove(l);
        totalLoadCapacity = totalLoadCapacity;
        availableLoadCapacity = availableLoadCapacity + l.getWeight ();
    }
    
    /**
     * Metoden returnerer den resterende lastkapacitet, dvs. totalkapaciteten 
     * fraregnet vÃ¦gten af den baggage der er tilknyttet flyvningen.
     */
    public int availableLoadCapacity ()
    {
        return availableLoadCapacity;
    }
}