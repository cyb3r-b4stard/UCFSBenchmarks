import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;

/**
 * #########.
 * 
 * #### ##### ###### # #### ## ### ### #####
 * ## ##### ## #### #### #####.
 * 
 * ## #### # ########## ## ##### ### #####.
 * 
 * ### #### ### ### ##### ##########. ### ### ###
 * ### ########## ######## #########.
 * 
 * #### ## # #### ## ### ###. ### #### ### ### 
 * ########## #####, ##### #### ### ##########
 * ### ########## ########## ## ######## ###
 * ### ####### #####.
 * 
 * ### #### #### ######### ### ########## #########
 * ## ### #### #####.
 *
 */
public class Inventory
{
    private LinkedList<Book> books;

    public Inventory()
    {
        books = new LinkedList<Book>();
    }

    public int size()
    {
        if( books != null ) return books.size();
        return 0;
    }

    /**
     * add.
     * 
     * Add a book to the books LinkedList.
     * 
     * @param b the book to add
     */
    public void add(Book b)
    {
        books.add(b);
    }

    /**
     * get.
     * 
     * Return the book at index i if it exists.
     * Otherwise return null;
     * 
     * @param i the index at which to look
     * @return the book or null
     */
    public Book get(int i)
    {
        return books.get(i);
    }

    /**
     * inStock.
     * 
     * Check if a book with the given title
     * is in the inventory held by the 
     * books LinkedList. If so, return true.
     * Otherwise, return false.
     * 
     * @param title the title of the book to look for
     * @return true if it is in books
     */
    public boolean inStock(String title)
    {
        for(int i = 0; i < books.size(); i++)
        {
            if(books.get(i).getTitle().equals(title))
            {
                return true;
            }
        }
        return false;
    }

    /**
     * getBooksSortedByTitle.
     * 
     * Get a list of books sorted by title. You
     * must use the Comparable interface in the 
     * Book class.
     * 
     * You should use the sort in the JCF. You 
     * should not write your own sort.
     * 
     * If you do not use the Comparable interface,
     * then you will get zero points.
     * 
     * @return a sorted list of books
     */
    public List<Book> getBooksSortedByTitle()
    {
    }

    /**
     * getBooksSortedByPrice.
     * 
     * Get a list of books sorted by price. Lowest
     * price first.
     * 
     * You must use a Comparator implemented in an 
     * inner class. You must write a class that 
     * implements Comparator, then use it with
     * the JCF sort method to sort the list of books.
     * 
     * Again, you should not write your own sort.
     * 
     * If you do not use a Comparator, you will 
     * get zero points.
     * 
     * @return
     */
    public List<Book> getBooksSortedByPrice()
    {
        class InnerClass implements Comparator<Book>
        {
            public int compare(Book a, Book b)
            {
                return (int)a.getPrice() -  (int)b.getPrice();
            }
            return sort(Books);
        }
        
    }
}
