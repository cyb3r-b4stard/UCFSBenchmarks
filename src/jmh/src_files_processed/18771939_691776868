
/* #### ### ####### ##########
 * ####: ####### ######
 * ########: ##########
 * ##:
 */

import ecs100.*;
import java.awt.Color;
import java.util.*;
import java.io.*;


/** ####
 * # ### #### ###### ## ### ######## ####, ## #### #.
 * ## ### #### ### ## ## ### #### ####, ## ### #### ## ### ######## ####.
 * 
 * ### #### #### #### ##### ## #### #### ## ## ##.
 * ## ###### ### #### #### #### #.
 *
 * ## ### #### #### #####, ## ###'# ##### ### ####, ### ###'# ###.
 * ## #### #### ##### ## ####### ## ## ##### ## ###.
 *
 * ### # ######## ## ##### ### ######## ########.####_#
 * ### # ######## ## ########## ## ### #### ## ## ## ### #########
 * #### ### ######## #####:
 *    # =  ########.#####_#### - #### * ########.####_#####
 *
 */

public class Frog {
    /*# YOUR CODE HERE */
    public static final int SIZE = 40;
    public static final  double x = FrogGame.FROG_X;

    private double y =  FrogGame.START_LINE /*- lane*/ * FrogGame.LANE_WIDTH; 
    private int whichLane = 0; 
    private boolean stage = true; 
   
    
    /**
     * Make a new frog and draw it.
     */
    public Frog(int lane, boolean life){
        /*# YOUR CODE HERE */
        this.whichLane = lane; 
        this.stage = life; 
        this.draw();
        

    }

    /**
     * Make the frog hop forward: erase, change to the next lane, redraw
     * If the frog is dead it can't move
     * For a nicer version, make the hop in three stages:
     * make the frog spread out its legs, then move, then crouch down again.
     */
    public void hop(){
        /*# YOUR CODE HERE */
        this.erase(); 
        this.getLane(); 
        this.draw();

    }

    /**
     * Make the frog hop forward: erase, change position, redraw
     * If the frog is dead it can't move.
     * It cannot hop back from lane 0
     * For a nicer version, make the hop in three stages:
     * make the frog spread out its legs, then move, then crouch down again.
     */
    public void hopBack(){
        /*# YOUR CODE HERE */
        this.erase();
        this.getLane(); 
        this.draw();

    }

    /**
     * The Frog has just been hit by a car,
     * Makes the frog be in the dead state.
     * Redraws the frog.
     */
    public void splat(){
        /*# YOUR CODE HERE */

    }

    /**
     * Return the lane the frog is currently in
     */
    public int getLane(){
        /*# YOUR CODE HERE */

        return -1;  
    }

    /**
     * Return true if the frog is alive, and false if it is not
     */
    public boolean isAlive(){
        /*# YOUR CODE HERE */
        if (stage = true){
            return true;
        }
        if (stage = false){
            return = false
        }
    }

    /**
     * Draws the frog at the current position.
     * Works out x and y as described in the comment at the top of the file
     * If it is not alive, draws a splat.
     */
    public void draw(){
        /*# YOUR CODE HERE */
        if (stage = true){
            String filename = "littlefrog.jpg"; 
            UI.drawImage(filename, x, y, SIZE, SIZE); 
        }
        else if (stage = false){
           String filename = "splat.jpg"; 
           UI.drawImage(filename, x, y, SIZE, SIZE); 
        }

    }

    /**
     * Erase the frog
     * Works out x and y as described in the comment at the top of the file
     */

    public void erase(){
        /*# YOUR CODE HERE */
        eraseRect(x, y, SIZE, SIZE);
    }

}
