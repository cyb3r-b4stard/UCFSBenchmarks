import java.util.ArrayList;
import java.util.Iterator;

/**
 * #### ##### ######### #################
 * @###### #### ####
 * @####### #.#
 */
class LamborghiniCarLot
{
    private String lotName;
    private ArrayList<Lamborghini> inventory;

    public static final String TAYLORS_LOT = "Taylor's Used Lambos";
    public static final String JASONS_LOT = "Jason's Used Lambos";

    /**
     * Default constructor shows empty arraylist
     */
    public LamborghiniCarLot()
    {
        inventory = new ArrayList<Lamborghini>();
    }

    /**
     * @param String lotName - if lot name is equal to taylor's name then change it to jason's lot 
     **/
    public LamborghiniCarLot(String lotName)
    {
        inventory = new ArrayList<Lamborghini>();

        inventory.add(new Lamborghini(1965, "350GT", 365.3, true));
        inventory.add(new Lamborghini(1966, "400GT 2+2", 366.3, false));
        inventory.add(new Lamborghini(1967, "MIURA", 367.3, true));
        inventory.add(new Lamborghini(1968, "espada", 368.3, false));
        inventory.add(new Lamborghini(1969, "islero", 369.3, true));
        inventory.add(new Lamborghini(1970, "jarama", 370.3, false));
        inventory.add(new Lamborghini(1971, "urraco", 371.3, false));
        inventory.add(new Lamborghini(1971, "urraco", 371.3, false));
        inventory.add(new Lamborghini(1973, "countache", 373.3, false));
        inventory.add(new Lamborghini(1974, "silhouette", 374.3, false));
        inventory.add(new Lamborghini(1975, "jalpa", 375.3, true));
        inventory.add(new Lamborghini(1976, "silhouette", 476.3, false));
        inventory.add(new Lamborghini(1977, "silhouette", 377.3, true));
        inventory.add(new Lamborghini(1978, "countache", 478.3, false));
        inventory.add(new Lamborghini(1978, "countache", 578.3, false));
        inventory.add(new Lamborghini(1978, "countache", 378.3, true));
        inventory.add(new Lamborghini(1979, "silhouette", 479.3, false));
        inventory.add(new Lamborghini(1980, "countache", 580.3, false));
        inventory.add(new Lamborghini(1981, "jalpa", 381.3, true));
        inventory.add(new Lamborghini(1981, "jalpa", 481.3, true));
        inventory.add(new Lamborghini(1982, "countache", 582.3, true));
        inventory.add(new Lamborghini(1983, "countache", 383.3, false));
        inventory.add(new Lamborghini(1984, "countache", 484.3, false));
        inventory.add(new Lamborghini(1985, "countache", 585.3, false));
        inventory.add(new Lamborghini(1986, "lm002", 386.3, true));
        inventory.add(new Lamborghini(1987, "jalpa", 487.3, false));
        inventory.add(new Lamborghini(1988, "countache", 588.3, false));
        inventory.add(new Lamborghini(1989, "countache", 389.3, true));
        inventory.add(new Lamborghini(1990, "diablo", 490.3, false));
        inventory.add(new Lamborghini(1991, "lm002", 591.3, false));
        inventory.add(new Lamborghini(1991, "lm002", 391.3, true));
        inventory.add(new Lamborghini(1991, "lm002", 491.3, false));
        inventory.add(new Lamborghini(1991, "lm002", 591.3, true));
        inventory.add(new Lamborghini(1992, "lm002", 392.3, false));
        inventory.add(new Lamborghini(1993, "lm002", 493.3, false));
        inventory.add(new Lamborghini(1994, "diablo", 594.3, false));
        inventory.add(new Lamborghini(1994, "diablo", 394.3, true));
        inventory.add(new Lamborghini(1995, "diablo", 495.3, false));
        inventory.add(new Lamborghini(1996, "diablo", 596.3, false));
        inventory.add(new Lamborghini(1997, "diablo", 397.3, false));
        inventory.add(new Lamborghini(1998, "diablo", 498.3, false));
        inventory.add(new Lamborghini(1999, "diablo", 599.3, false));
        inventory.add(new Lamborghini(1999, "diablo", 599.3, false));
        inventory.add(new Lamborghini(2000, "diablo", 400.3, false));
        inventory.add(new Lamborghini(2000, "diablo", 500.3, false));
        inventory.add(new Lamborghini(2001, "murcielago", 501.3, false));
        inventory.add(new Lamborghini(2002, "murcielago", 502.3, false));
        inventory.add(new Lamborghini(2003, "gallardo", 303.3, true));
        inventory.add(new Lamborghini(2004, "murcielago", 404.3, true));
        inventory.add(new Lamborghini(2005, "murcielago", 505.3, true));
        inventory.add(new Lamborghini(2006, "gallardo", 506.3, true));
        inventory.add(new Lamborghini(2007, "gallardo", 507.3, true));
        inventory.add(new Lamborghini(2008, "reventon", 308.3, false));
        inventory.add(new Lamborghini(2008, "reventon", 508.3, true));
        inventory.add(new Lamborghini(2009, "gallardo", 409.3, true));
        inventory.add(new Lamborghini(2010, "murcielago", 310.3, false));
        inventory.add(new Lamborghini(2011, "aventador", 411.3, false));
        inventory.add(new Lamborghini(2012, "sesto elemento", 512.3, true));

        if(lotName.equalsIgnoreCase(TAYLORS_LOT)){
            this.lotName = JASONS_LOT;
        }else{
            this.lotName = lotName;
        }
    }

    /**
     * accessor method
     * @return lotName
     */
    public String getLotName()
    {
        return lotName;
    }

    /**
     * @param String lotName - to set the new lot name
     */
    public void setLotName(String lotName)
    {
        if(lotName.equalsIgnoreCase(TAYLORS_LOT)){
            this.lotName = JASONS_LOT;
        }else{
            this.lotName = lotName;
        }
    }

    /**
     * @param Lamborghini newLamborghini - to add new lamborghini to the arraylist if not null
     */
    public void addLamborghini(Lamborghini newLamborghini)
    {
        if(newLamborghini != null){
            inventory.add(newLamborghini);
        }
    }

    /**
     * @param int startYear - to set the start year of the model range
     * @param int endYear - to set the end year of the model range
     * to get how many models exist in given range of year
     */
    public int howManyBetweenTheseYears(int startYear, int endYear)
    {
        int modelInRange = 0;

        for(Lamborghini model : inventory){
            if((model.getModelYear() >= startYear) && (model.getModelYear() <= endYear)){
                modelInRange ++;
            }
        }
        return modelInRange;
    }

    /**
     * to determine how many models support rear wheel drive
     */
    public int howManyAreRearWheelDrive()
    {
        Iterator<Lamborghini> it = inventory.iterator();
        Lamborghini rearWheelModel;
        int modelCount = 0;
        while(it.hasNext()){
            rearWheelModel = it.next();
            if(rearWheelModel.getIsRearWheelDrive() == true){
                modelCount++;
            }
        }
        return modelCount;
    }

    /**
     * @param int year - to display all lamborghini models specified in parameter
     * any other models shows to be an empty array list
     */
    public ArrayList<Lamborghini> getCarsFromThisYear(int year)
    {
        ArrayList<Lamborghini> thisYearLamb = new ArrayList<Lamborghini>();

        for(Lamborghini cars : inventory){
            if(cars.getModelYear() == year){
                thisYearLamb.add(cars);
            }else{
                return new ArrayList<Lamborghini>();
            }
        }
        return thisYearLamb;
    }

    /**
     * @param double lowHP - to set the lowest horsepower of the model
     * @param double highHP - to set the highest horsepower of the model
     * to determine the list of cars within the given ranged horsepower
     */
    public Lamborghini[] getCarsWithHorsepowerRange(double lowHP, double highHP)
    {
        if((inventory == null) || (lowHP == 0) || (highHP == 0)){
            return null;
        }
        
        int numberOfModels = 0;
        for(Lamborghini matchHP : inventory){
            if((matchHP.getHorsepower() >= lowHP) && (matchHP.getHorsepower() <= highHP)){
                numberOfModels++;
            }
        }
        
        Lamborghini[] matches = new Lamborghini[numberOfModels];
        
        int indexInNewArray = 0;
        for(Lamborghini matchHP : inventory){
            if((matchHP.getHorsepower() >= lowHP) && (matchHP.getHorsepower() <= highHP)){
                matches[indexInNewArray] = matchHP;
                indexInNewArray++;
            }
        }
        return matches;
    }
   

    /**
     * @param String modelName - to see if the arraylist includes the modelName presents
     */
    public boolean hasCarModel(String modelName)
    {
        Iterator<Lamborghini> looper = inventory.iterator();
        Lamborghini searchModel = null;
        while(looper.hasNext()){
            searchModel = looper.next();
            if(searchModel.getModelName().equalsIgnoreCase(modelName)){
                return true;
            }else if(modelName == null){
            }
        }
        return false;
    }

    /**
     * @param int modelYear - to set the year to determine the average horsepower of the models given parameter years
     */
    public double getAverageHorsepowerOfYear(int modelYear)
    {
        Iterator<Lamborghini> model = inventory.iterator();
        Lamborghini modelSelected;
        int i = 0;
        double sumHP = 0;
        double averageHP = 0;
        while(model.hasNext()){
            modelSelected = model.next();
            if(modelSelected.getModelYear() == modelYear){
                sumHP += modelSelected.getHorsepower();     
                i++;
            }else{
                return 0.0;
        }
        averageHP = sumHP/i;        
        return averageHP;
    }
}