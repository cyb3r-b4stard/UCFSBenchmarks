
public class Socio {

    private String nombre;
    private int prestamosActuales;
    private Prestamo[] prestamos;

    /*
     * Constructor
     * 
     * El constructor recibe una cadena con el nombre del socio y un entero 
     * con el maximo de prestamos que podra almacenar.
     * Se encarga de inicializar el objeto creado,  almacenando el nombre del 
     * socio, indicando que sus prestamos actuales son 0 y creando un array de 
     * prestamos del tamano indicado en el argumento del constructor (maximoPrestamos).
     * Todos los elementos del array han de ser inicializados a null.
     */
    Socio(String nombre, int maximoPrestamos){
        nombre=nombre;
        int prestamosActuales=0;
        prestamos=new Prestamo[maximoPrestamos];

    }
    public String getNombre(){ return this.nombre; }

    public int getPrestamosActuales(){ return this.prestamosActuales; }

    public Prestamo[] getPrestamos(){ return this.prestamos; }

    /* 
     * asignarPrestamo
     * 
     * El metodo se encarga de asignar un nuevo prestamo al socio utilizando
     * los valores pasados como argumentos.
     * Para ello, se ha de recorrer el array de prestamos del socio hasta 
     * encontrar una casilla vacia. 
     * Una vez encontrada, se creara un nuevo prestamo (utilizando el constructor 
     * proporcionado) y se insertara en esa posicion.
     * El metodo devolvera un entero con la posicion en la que se inserto el 
     * elemento o -1 si no pudo realizarse por estar el array lleno.
     */
    int asignarPrestamo(String t, boolean b){
        for(int i=0; i<prestamos.length; i++){
            if(prestamos[i]=Null){
                prestamos[i]= Prestamo;
            }
                
            
       

    }

    /*
     * avanzaDias
     * 
     * El metodo simula que avanza en el tiempo los dias indicados 
     * como argumento. Para ello recorre todos los prestamos del socio 
     * y les resta de los dias de prestamo la cantidad de dias indicada.
     * Por ejemplo, si un socio tiene 2 prestamos con dias de prestamo 
     * iguales a 7 y a 20 d�as respectivamente y avanzamos 10 dias, el 
     * resultado ser�a que el primer prestamo ahora estaria a -3 y el 
     * segundo a 10 dias.
     */
    void avanzaDias(int dias){

    }

    /*
     * comprobarValidez
     * 
     * Este metodo comprueba si un socio tiene todos los prestamos vigentes, 
     * es decir, si todos los prestamos tienen fechas positivas.
     * Para ello recorrera el array de prestamos en busca de alguno que este 
     * sobrepasado (con diasPrestamo < 0). Al encontrar unicamente uno ya pasaria 
     * el socio a ser un socio no valido y el metodo deberia devolver falso. 
     * En caso de que todos los prestamos no hayan consumido aun sus d�as de 
     * prestamo el metodo devolveria verdadero.
     */
    boolean comprobarValidez(){

    }

    /*
     * renovar
     * 
     * Este metodo revisa todos los prestamos del socio y renueva aquellos que 
     * se hayan pasado de fecha (que tengan dias vigentes negativos). 
     * Para ello recorrera el array de prestamos. A aquellos con dias vigentes 
     * positivos no le realizara ninguna modificacion. Sin embargo, a aquellos 
     * con dias vigentes negativos los renovara sumandole a los dias vigentes 
     * una cantidad de dias igual a 7 o 20 dias (dependiendo de si el libro es 
     * de la bibliografia basica o no).
     */
    void renovar(){

    }

}