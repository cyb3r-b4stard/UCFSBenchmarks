
/**
 * ##### # ########### ## ##### ############ ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class MyLinkedList
{
    private MyNode head;
    private int count;
    public MyLinkedList(){
        head = null;
        count = 0;
    }
    public void addLast(Object info){
        MyNode newNode = new MyNode(info);
        if(head == null){
            head = newNode;
        }
        else{
            MyNode cur = head;
            while (cur.getNext()!=null){
                cur = cur.getNext();
            }
            cur.setNext(newNode);
        }
        count = count + 1;
    }
    public void printAllInfo(){
        MyNode cur = head;
        while(cur!= null){
            System.out.print(cur.getInfo().toString()+ " ");
            cur = cur.getNext();
        }
    }
    public void addFirst(Object info){
        MyNode newNode = new MyNode(info);
        if(head == null){
            head = newNode;
        }
        else{
            MyNode cur = newNode.getNext();
            cur = head;
            head = newNode;
        }
        count = count + 1;
    }    
    public Object removeFirst(){
        if(head == null){
            return null;
        }
        else{
            count = count - 1;
            MyNode removedNode = head;
            head = head.getNext();
            return removedNode.getInfo();
        }
    }
    public Object removeLast(){
        if(head == null){
            return null;
        }
        else{
            count = count - 1;
            MyNode cur = head;            
            while(cur.getNext()!=null){
                cur = cur.getNext();
            }
            MyNode removedNode = cur;
            return removedNode.getInfo();
        }
    }
    public MyNode getNode(int index){
        MyNode cur = head;
        do{
        {
            if(cur.getNext() == null){
                return null;
            }
            else{
                cur = cur.getNext();
            }
        }
    }(while(cur.getInfo() != index);
        return cur;
    }
    public Object get(int index){
        if(head == null){
            return null;
        }
        else{
            MyNode cur = head;
            while(cur.getInfo() != index){
                cur = cur.getNext();
            }
            System.out.println("");
            return cur.getInfo();
        }        
    }
    public int size(){
        return count;
    }
    public void addAfter(MyNode prevNode, Object info){
        MyNode newNode = new MyNode(info);
        newNode.setNext(prevNode.getNext());
        prevNode.setNext(newNode);
        count = count + 1;
    }
}