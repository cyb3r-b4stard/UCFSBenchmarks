
/**
 * ### ###### ################# ####### ###### ########, ###
 * ### ###### ### ############# ######.
 * 
 * @###### ###### 
 * @####### (##/##)
 */
public class StringBearbeitung
{

    private String zeichenkette;

    /**
     * Der parameterlose Konstruktor. Initialisiert mit willkürlicher Zeichenkette
     */ 
    public StringBearbeitung()
    {
        zeichenkette = new String("Wenn Fliegen hinter Fliegen fliegen Fliegen hinter Fliegen her");
    }

    /**
     * Konstruktor zum Setzen der Zeichenkette
     * @param Die Zeichenkette mit der das Objekt initialisiert werden soll.
     */
    public StringBearbeitung(String zeichenkette)
    {
        this.zeichenkette=zeichenkette;
    } 

    /**
     * Gibt die Zeichenkette aus.
     */
    public void zeigeZeichenkette() 
    {
        System.out.println(zeichenkette);
    }

    /**
     * Ermittelt die Länge der Zeichenkette.
     */
    public int gibLänge()
    {
        return zeichenkette.length();
    }

    /**
     *  Vergleicht Zeichenkette mit anderer Zeichenkette
     *  @param andereZeichenkette Die Zeichenkette, mit der vergleichen werden soll.
     *  @return true, falls die beiden Zeichenketten gleich sind, false sonst.
     */
    public boolean istGleich(String andereZeichenkette)
    {
        if(zeichenkette==andereZeichenkette)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    /**
     * Erzeugt Zeichenkette, bei der alle Großbuchstaben der Zeichenkette in Kleinbuchstaben 
     * gewandelt wurden und gibt diese zurück.
     * @return Die Zeichenkette in Kleinbuchstaben.
     */
    public String inKleinbuchstabenWandeln() 
    {
        return zeichenkette.toLowerCase();
    }

    /**
     * Prüft, ob die Zeichenkette mit der übergebenen Zeichenfolge beginnt.
     * @param kette Die Zeichenkette, mit der geprüft werden soll.
     */   
    public boolean beginntMit(String kette)
    {
        return zeichenkette.startsWith(kette);

    }

    /**
     * Entfernt führende und abschließende Leerzeichen der Zeichenkette, sofern vorhanden.
     */
    public void leerzeichenEntfernen()
    {

        System.out.println(zeichenkette.replaceAll(" +",""));
    }

    /**
     * Prüft, ob das übergebene Wort in der Kette enthalten ist.
     * @param wort Das Wort, das überprüft werden soll.
     * @return true, falls das Wort enthalten war, false sonst.
     */    
    public boolean enthält(String wort)
    {
        return zeichenkette.contains(wort);
    }

    /**
     * Prüft, ob die Zeichenkette keine Zeichen enthält, also leer ist.
     * @return true, falls die Zeichenkette keine Zeichen enthält, false sonst.
     */    
    public boolean gibLeer()
    {
        return zeichenkette.equals("");
    }

    /**
     * Gibt Zeichenkette zurück, die die ersten n Zeichen der Zeichenkette enthält.
     * @param anzahl Die Anzahl der Zeichen der Zeichenkette, die zurückgegeben werden sollen.
     * @return Die Teil-Zeichenkette.
     */
    public String gibAnfang(int anzahl)
    {
        return zeichenkette.substring(0,anzahl);
    }

    /**
     * Gibt die Position des ersten Leerzeichens der Zeichenkette zurück,
     * @return Der Index des ersten Leerzeichens.
     */

    /**
     * Verkettet die Zeichenkette mit der übergebenen Zeichenkette und gibt das Ergebnis zurück.
     * @param s1 Die beiden Zeichenketten, die verkettet werden sollen.
     * @return resultierende Zeichenkette.
     */

    /**
     * Verkettet 2 übergebene Zeichenketten und gibt das Ergebnis zurück.
     * @param s1,s2 Die beiden Zeichenketten, die verkettet werden sollen.
     * @return resultierende Zeichenkette.
     */

    /**
     * Prüft, ob Teilstring in der Zeichenkette enthalten ist und gibt den Index des
     * ersten Zeichens zurück, bei dem der übereinstimmende Bereich beginnt.
     * @param wort Die Zeichenkette, die gefunden werden soll.
     * @return Index des Zeichens, bei dem die Kette beginnt.
     */

    /**
     * Vergleicht die Zeichenkette alphabetisch mit übergebener Vergleichs-Zeichenkette.
     * @param vergleichsKette Die zu vergleichende Zeichenkette.
     * @return 0 falls die beiden Ketten gleich, 1 falls zeichenkette weiter vorne im Lexikon,
     * -1 falls zeichenkette weiter hinten im Lexikon steht.
     */
    public int vergleicheZeichenkette(String vergleichsKette)
    {
        return zeichenkette.compareTo(vergleichsKette);
    }

    /**
     * Gibt zurück, wie häufig eine übergebene Zeichenkette in dieser Zeichenkette
     * enthalten ist.
     * @param teilKette Die Zeichenkette die enthalten sein soll.
     * @return Die Anzahl, wie häufig die teilkette in der Zeichenkette enthalten ist.
     */

    /**
     * Gibt die Teil-Zeichenkette zurück, die vor einem übergebenen Trennzeichen steht.
     * @param trennzeichen Eine Zeichenkette (aus einem Zeichen), die das Trennzeichen enthält.
     * @return Der Teil der Zeichenkette, die vor dem übergebenen Zeichen steht.
     */


    /**
     * Zerlegt die Zeichenkette in einzelen Worte und gibt ein String-Array der 
     * einzelnen Worte der Zeichenkette zurück.
     * @return ein String Array der einzelnen Worte der Zeichenkette.
     */
    public String [] gibWorte(int Pattern)
    {
        return zeichenkette.split(" ");
    }

    /**
     * Gibt aus einer Email-Adresse (z.B. hugo.mueller@server.seltsamsoft.com) den 
     * Domain-Namen des Mailservers zurück (im Beispiel server.seltsamsoft.com).
     * @param eMail Die zu untersuchende Email-Adresse.
     * @return Der Domain Namen des Mailservers.
     */
    public String mailServerDN(String emailAdresse)
    {
        return emailAdresse.substring(emailAdresse.indexOf("@")+1,emailAdresse.length());
    }
    
    public void name(String name, String a)
    {
        
        System.out.println("Aymann"+" "+"19")
    }
}