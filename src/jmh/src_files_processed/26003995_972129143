
public class Sortieren
{
    private int[] zahlenArray={5,7,3,1,6};
    private List<Integer> zahlen;
    private Queue<Integer> zahlen2;
    private Stack<Integer> zahlen3;

    public Sortieren()
    {
        zahlen =new List<Integer>();
        zahlen2= new Queue<Integer>();
        zahlen3= new Stack<Integer>();

        zahlen.append(5);
        zahlen.append(7);
        zahlen.append(3);
        zahlen.append(1);
        zahlen.append(6);
        zahlen.toFirst();

        zahlen2.enqueue(5);
        zahlen2.enqueue(7);
        zahlen2.enqueue(3);
        zahlen2.enqueue(1);
        zahlen2.enqueue(6);

        zahlen3.push(5);
        zahlen3.push(7);
        zahlen3.push(3);
        zahlen3.push(1);
        zahlen3.push(6);

    }

    public int listMin()
    {
        int pHilf= zahlen.getContent();
        while(zahlen.hasAccess())
        {
            zahlen.next();
            if(zahlen.hasAccess())
            {
                int vergleich = zahlen.getContent();
                System.out.println("pH: " + pHilf);
                System.out.println("V: " + vergleich);
                if ((pHilf > vergleich) )
                {
                    pHilf = zahlen.getContent();
                }

            }
        }
        return pHilf;
    }

    public void queueMin()
    {

    }

    public void stackMin()
    {

    }

    public void ThmSelectionSort()
    {
        int links = 1;
        int n = 0;
        List<Integer> zahlenVergleich = new List<Integer>();
        List<Integer> zahlenSortiert = new List<Integer>();
        
        zahlenVergleich.toFirst();
        
        zahlen.toFirst();
        while(zahlen.hasAccess())
        {
            System.out.println("Zahlen: " + zahlen.getContent());
            zahlenVergleich.toFirst();
            zahlenVergleich.insert(zahlen.getContent());
            zahlen.next();
            n++;
        }
        System.out.println("THM n: " + n);
        
        zahlen.toFirst();
        zahlenVergleich.toFirst();
        while(zahlenVergleich.hasAccess())
        {
            System.out.println("Start Vergleich: " + zahlenVergleich.getContent());
            zahlenVergleich.next();
        }

        zahlen.toFirst();
        zahlenVergleich.toFirst();
        while (links < n)
        {
            if (zahlen.hasAccess())
            {
                int current = zahlen.getContent();
                int min = links;
                int ins = 0;
                
                int a[5] = null;

                System.out.println("Top current: " + current);

                zahlenVergleich.toFirst();

                for (int ii = 0; ii < min; ii++)
                {
                    if (zahlenVergleich.hasAccess())
                    {
                        System.out.println("Top Vergleich: " + zahlenVergleich.getContent());
                        zahlenVergleich.next();
                    }
                }
               
                for (int i = links; i < n; i++)
                {
                    if (zahlenVergleich.hasAccess())
                    {
                        int vergleich = zahlenVergleich.getContent();
                        System.out.println("Vergleich: " + vergleich);

                        if (vergleich < current)
                        {
                            System.out.println("vergleich: " + vergleich);
                            System.out.println("current: " + current);
                            vergleich = current;
                            min = i;
                        }
                        
                        zahlenVergleich.next();
                    }
                }
                zahlenSortiert.toFirst();
                zahlenSortiert.insert(ins);
                System.out.println("Insert: " + ins);

                zahlen.next();
            }
            links++;
        }
    }

    public List listeSortieren()
    {
        boolean done = false;
        int test = 0;
        while( !done )
        {
            if(zahlen.hasAccess()){

                test = listMin();
                System.out.println("Test: " + test);

                zahlen.toFirst();
                zahlen.setContent(test);
                zahlen.remove();
                zahlen.toFirst();
                if(zahlen.hasAccess()){

                    System.out.println("toFirst: " + zahlen.getContent());
                }

            }
            else
            {
                done = true;
            }
        }
        return zahlen;

    }

    public void queueSortieren()
    {

    }

    public void stackSortieren()
    {

    }
}
