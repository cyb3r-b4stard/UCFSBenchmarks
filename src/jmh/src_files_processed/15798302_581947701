
/**
 * ##### # ########### ## ##### ##### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class SandS
{
    public static int[] sortAsc(int[] a)
    {
        for (int i = 0; i < a.length; i++)
        {
            int low = a[i];
            int lowIndex = i;
            for (int j = i+1; j < a.length; j++)
            {
                if (a[j] < low)
                {
                    low = a[j];
                    lowIndex = j;
                }
            }
            a[lowIndex] = a[i];
            a[i] = low; 
        }
        return a;
    }
    
    public static int seqSearch(int[]a, int target)
    {
        for (int i = 0; i < a.length; i++)
        {
            if (a[i] == target)
                return i;
        }
        return -1;
    }
    
    public static int binSearch(int[]a, int target)
    {
        int high, low, mid;
        high = a.length - 1;
        low = 0;
        mid = (low + high)/2;
        
        while (low < high)
        {
            if (a[mid] == target)
                return mid;
            else
            if (a[mid] < target) 
            {
                low = mid + 1; 
            }
            else 
            {
                high = mid -1; 
            }
            mid = (high + low)/2;
        }
        return -1;
    }
    
    public static int binSpecial(int[]a, int target)
    {
        int [] result = new int[2];
        int count = 0;
        int high, low, mid;
        high = a.length - 1;
        low = 0;
        mid = (low + high)/2;
        
        while (low < high)
        {
            count++;
            if (a[mid] == target)
            {
                result[0] = mid; 
                result[1] = count;
                return result;
            }
            else
            if (a[mid] < target) 
            {
                low = mid + 1; 
            }
            else 
            {
                high = mid -1; 
            }
            mid = (high + low)/2;
        }
        return [0] = -1;
        return [1] = count;
        return result;
    }
}
