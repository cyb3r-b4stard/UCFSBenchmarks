
/* #### ### ####### ########## # 
 * ####: ####### #####
 * ########: #########
 * ##: #########
 */

import ecs100.*;
import java.io.*;
import java.util.*;
import java.awt.Color;

/**
 * #### ## ####### ## #### ####### #### ########## # ##### ######## ######## ######
 * #######, ####### ## ####### #### #### ### ####, ## ##### ### #### ####
 * # #### #### ## #########, ##### ##### #### ## ### ####### ### #######
 * #### ###### ### ## #### ######### ####.
 * ## ### #### #### #### #### ###### #### ## #######.
 * ### ####### ### ########## ## ## ######## ### ### ###### ### ##
 *   ######## ### ### ###### ###### ##### ### ##### ####.
 *
 * ##### ### ## ####### ### ### ## ########, ### ######## ## ### ######### ## ####.
 * ####
 *  ######:              ##### ####### #### ## #########.
 *  #########:           ######## ### ########.#
 *  ##################:  ###### ### ### ######## ## #### ### ###### ## #########.
 * ##########
 *  ########:            ######## ### ###### #### ### ########## ##### ### ####### ### #####.
 *  ###################: ##### ## ### ### ######### #### ## ### ######.
 *  ################:    ##### ### ##### #### ##### ##### #######.
 * #########
 *  ###########:         ########## ### ### ###### #### ## ##### ## ## ##########.
 *  #############:       ######## ### ##### ########.
 *  #############:       ######## ### ##### ########.
 *  ######:              ##### ### ####### ######## ###### #### # ####.
 *  ###### ### ####:     ### ### #### ###### # ####### ## ### ######## #### ### #####
 *                       ## ###### ####.  ### # #### ###### ## #### ### ###### ######.
 */

public class WaveformAnalyser{
    private ArrayList<Double> waveform;   

    public static final double THRESHOLD = 200;

    public static final int GRAPH_LEFT = 10;
    public static final int ZERO_LINE = 260;

    public static final int SIZE_CIRCLE = 10;

    /**
     * [CORE]
     * Clears the panes, 
     * Creates an ArrayList stored in a field, then
     * Asks user for a waveform file (eg waveform1.txt) 
     * Reads data from the file into the ArrayList
     */
    public void doRead(){
        UI.clearPanes();
        String fname = UIFileChooser.open();
        this.waveform = new ArrayList<Double>();
        try{
            Scanner sc = new Scanner(new File(fname));
            while (sc.hasNext()){
                waveform.add(sc.nextDouble());
            }
        }
        catch(IOException e) {UI.printf("File Failure %s \n", e);}

        UI.println("Read "+ this.waveform.size()+" data points from " + fname);
    }

    /**
     * [CORE]
     * Displays the waveform as a line graph,
     * The n'th value in waveform is displayed at
     *    x-position is GRAPH_LEFT + n
     *    y-position is ZERO_LINE - the value
     * Plots a line graph of all the points with a blue line between
     *  each pair of adjacent points
     * Draw the horizontal line representing the value zero.
     * Uses GRAPH_LEFT and ZERO_LINE for the dimensions and positions of the graph.
     * Don't worry if the lines go off the window
     */
    public void doDisplay(){
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        UI.clearGraphics();

        UI.setColor(Color.black);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE, GRAPH_LEFT + this.waveform.size() , ZERO_LINE); 

        int n = 0;
        int v = 1;
        while(v < this.waveform.size()){
            double xPos = GRAPH_LEFT + n;
            double yPos = ZERO_LINE - this.waveform.get(n);
            double xPos2 = GRAPH_LEFT + v;
            double yPos2 = ZERO_LINE - this.waveform.get(v);
            UI.setColor(Color.blue);
            UI.drawLine(xPos, yPos, xPos2, yPos2);
            n++;
            v++;
        }
    }

    /**
     * [CORE]
     * Computes and prints out the fraction of time the signal is distorted. 
     * This fraction of time is defined as the number of distorted values, divided by the number of values. 
     * A distorted value is defined as one whose absolute
     * value is greater than the value of THRESHOLD 
     * [Hint] You may find Math.abs() useful for this method - it computes the absolute value
     */
    public void doReportDistortion() {
        if (this.waveform == null){ 
            UI.println("No signal to analyse and report on");
            return;
        }

        double fraction = 0;
        double distortedVals = 0;
        int v = 0;
        double numberOfVals = this.waveform.size();
        while (v < numberOfVals){ 
            if(this.waveform.get(v) > THRESHOLD || this.waveform.get(v) < (-THRESHOLD)){
                distortedVals++;
            }
            v++;
            fraction = distortedVals / numberOfVals;
        }
        UI.printf("Fraction of time the signal is distorted %4.3f\n", fraction);
    }

    /**
     * [COMPLETION]
     * The spread is the difference between the maximum and minimum values of the waveform.
     * Finds the maximum and minimum values, then
     * Displays the spread by drawing two horizontal lines on top of the waveform: 
     *   one green line for the maximum value, and
     *   one red line for the minimum value.
     */
    public void doSpread() {
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        this.doDisplay();

        int v = 0;
        double min = Double.MAX_VALUE;
        double max = Double.MIN_VALUE;
        while(v < this.waveform.size()){
            if(this.waveform.get(v) > max){
                max = this.waveform.get(v);
            }
            if(this.waveform.get(v) < min){
                min = this.waveform.get(v);
            }
            v++;
        }
        UI.setColor(Color.red);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE + Math.abs(min), GRAPH_LEFT + this.waveform.size(), ZERO_LINE + Math.abs(min));        
        UI.setColor(Color.green);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE - max, GRAPH_LEFT + this.waveform.size(),ZERO_LINE - max);
    }

    /**
     * [COMPLETION]  [Fancy version of doDisplay]
     * Display the waveform as a line graph. 
     * Draw a line between each pair of adjacent points
     *   * If neither of the points is distorted, the line is BLUE
     *   * If either of the two end points is distorted, the line is RED
     * Draw the horizontal lines representing the value zero and thresholds values.
     * Uses THRESHOLD to determine distorted values.
     * Uses GRAPH_LEFT and ZERO_LINE for the dimensions and positions of the graph.
     * [Hint] You may find Math.abs(int a) useful for this method.
     * You may assume that all the values are between -250 and +250.
     */
    public void doDisplayDistortion() {
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        UI.clearGraphics();

        UI.setColor(Color.black);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE, GRAPH_LEFT + this.waveform.size() , ZERO_LINE); 

        int v = 1;
        int n = 0;
        while (v < this.waveform.size()){ 
            double xPos = GRAPH_LEFT + n;
            double yPos = ZERO_LINE - this.waveform.get(n);
            double xPos2 = GRAPH_LEFT + v;
            double yPos2 = ZERO_LINE - this.waveform.get(v);
            if(this.waveform.get(v) > THRESHOLD || this.waveform.get(v) < (-THRESHOLD) || this.waveform.get(n) > THRESHOLD ||  this.waveform.get(n) < (-THRESHOLD)){
                UI.setColor(Color.red);
                UI.drawLine(xPos, yPos, xPos2, yPos2);
            }
            else{
                UI.setColor(Color.blue);
                UI.drawLine(xPos, yPos, xPos2, yPos2);
            }
            UI.setColor(Color.green);
            UI.drawLine(GRAPH_LEFT, ZERO_LINE - THRESHOLD, GRAPH_LEFT + this.waveform.size(),ZERO_LINE - THRESHOLD);
            UI.setColor(Color.green);
            UI.drawLine(GRAPH_LEFT, ZERO_LINE + THRESHOLD, GRAPH_LEFT + this.waveform.size(),ZERO_LINE + THRESHOLD);
            v++;
            n++;
        }
    }

    /**
     * [COMPLETION]
     * Plots the peaks with small green circles. 
     *    A peak is defined as a value that is greater or equals to both its
     *    neighbouring values.
     * Note the size of the circle is in the constant SIZE_CIRCLE
     * You may assume that peaks values differ from their neighbouring points.
     */
    public void doHighlightPeaks() {
        this.doDisplayDistortion(); 
        int topPeak = 0;
        int v = 1;
        while(v < this.waveform.size()){
            double xPos = GRAPH_LEFT + topPeak;
            double yPos = ZERO_LINE - this.waveform.get(topPeak);
            if(this.waveform.get(topPeak) >= this.waveform.get(v) && this.waveform.get(topPeak) >= this.waveform.get(topPeak - 1)){
                UI.setColor(Color.green);
                UI.drawOval(xPos - 5,yPos - 5, SIZE_CIRCLE, SIZE_CIRCLE);
            }
            topPeak++;
            v++;
        }
    }

    /**
     * [CHALLENGE]
     * Finds the largest value (positive or negative) in the waveform, and
     * normalises all the values down so that the largest value is now equal to
     * the distortion threshold.
     * Then redraws the waveform.
     */
    public void doNormalise() {
        int n = 0;
        int v = 0;
        double min = Double.MAX_VALUE;
        double max = Double.MIN_VALUE;
        while(v < this.waveform.size()){
            if(this.waveform.get(v) > max){
                max = this.waveform.get(v);
            }
            if(this.waveform.get(v) < min){
                min = this.waveform.get(v);
            }
            v++;
            this.waveform.get(n) = n;
        }
        double normalisedMax = max - THRESHOLD;
        this.waveform.set(n, (max + THRESHOLD) / THRESHOLD);
        this.doDisplayDistortion(); 
    }

    public void doEnvelope(){
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        this.doDisplay();  
        this.upperEnvelope();
        this.lowerEnvelope();
    }

    /**
     * [CHALLENGE]
     * Displays the upper envelope with GREEN lines connecting all the peaks.
     *    A peak is defined as a point that is greater or equal to *both* neighbouring points.
     * DO NOT clear the graphics as we also want to view the waveform.
     */
    public void upperEnvelope() {
        /*# YOUR CODE HERE */

    }

    /**
     * [CHALLENGE]
     * Displays the lower envelope with RED lines connecting all the "negative" peaks.
     *    A "negative" peak is defined as a point that is smaller or equal to *both* neighbouring points.
     * DO NOT clear the graphics as we also want to view the waveform.
     */
    public void lowerEnvelope() {
        /*# YOUR CODE HERE */

    }

    /**
     * [CHALLENGE]
     * Saves the current waveform values into a file 
     */
    public void doSave(){
        try{
            File saveFile = new File(UIFileChooser.save());
            PrintStream out = new PrintStream(saveFile);
            for(int v = 0; v < this.waveform.size(); v++){
                out.println(this.waveform.get(v));
            }
        }
        catch(IOException e) {UI.printf("File Failure %s \n", e);}
    }

    private int index1;
    /**
     * [CHALLENGE]
     * Lets user select a region of the waveform with the mouse
     * and deletes that section of the waveform.
     */
    public void doMouse(String action, double x, double y){
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/

    /** Constructor:
     * Set up the ten buttons and mouselistener
     */
    public WaveformAnalyser(){
        UI.addButton("Read Data", this::doRead);
        UI.addButton("Display Waveform", this::doDisplay);
        UI.addButton("Report Distortion", this::doReportDistortion);
        UI.addButton("Spread", this::doSpread);
        UI.addButton("Display Distortion", this::doDisplayDistortion);
        UI.addButton("Peaks", this::doHighlightPeaks);
        UI.addButton("Normalise", this::doNormalise);
        UI.addButton("Envelope", this::doEnvelope);
        UI.addButton("Save", this::doSave);
        UI.addButton("Quit", UI::quit);
        UI.setMouseListener(this::doMouse);   

    }

    public static void main(String[] arguments){
        new WaveformAnalyser();
    }   

}