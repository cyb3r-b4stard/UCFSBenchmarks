 
/**
 * ##### #### ########## ###### ####### ### ##### ##########. 
 * #### #######: ########## ############## (### ##### ## #### #######) ###### ## #### ## ## ###### ####### ## #########, ##########, ######, ... 
 * ### ###### ## ####, ########_####, ## #### ###### #######. 
 * ######## #### ### ######## #### ###### "#####" ##########: ########## # #### ######## & #########, ######## ########, ######## ### ######
 * ## #### #######, ######## ### ###### ## ########, ######## ##########, ###### ########## (######### & #############), (########) 
 * #######.########, ####### #####, ### ###### '%'. 
 * <#><#>###-####:</#></#> ### ## '####' ## #### # ########## ###########. <#><#>#####:</#></#>  ######## #### ####### ####### ######### ###
 * #### ### ## ####### #########.  ### #######: ############## ### ####### #### #### ##### (###### #########), ### ###'# #### ## ## ####### #### ###. 
 * 
 * @###### #### ########
 * @####### #-#-##
 * 
 * ############# ## ##### ######
 * ##-##-##
 */

public class Binary implements Bin
{   private int [] bit;                            
    private final static int REGISTER_SIZE = 8;   

    public int getBit(int nth) { return bit[nth]; }
    public void setBit(int nth, int value) { bit[nth] = value; }
    
    public Binary() { bit = new int [REGISTER_SIZE]; }    

    public Binary( Binary anyBin )
    {   
        this();
        for(int i = 0; i < REGISTER_SIZE; i++)
        {
            bit[i] = anyBin.getBit(i);
        }
 
    }

    public Binary( int number )
    {  
        this(int2bin(number));
    
    }
    
    public Binary( String bitString )                   
    {  
        this(); 
        for (int i = 0; i < REGISTER_SIZE; i++)
        {
            bit[i] = Integer.parseInt(bitString.substring(i, i+1));
        }
    } 
    
    public String toString()                          
    {   
        String newString = "";
        for(int i = 0; i < REGISTER_SIZE; i++)
        {
            newString += bit[i]; 
        }
        return newString;
    }

    public Binary int2bin( int num )         
    {   
        
        
        throw new IllegalArgumentException( "Number exceeds " + REGISTER_SIZE + " Bits." );
    }    
    
    public int bin2int()
    {   
        
        return 1;
    }       
    
    public Binary not()
    {   
        Binary another = new Binary("1")
        return new Binary("0");
    }
    
    public Binary add( Binary rhs )
    {   
 
        return new Binary("0");
     }   
    
    public Binary twosComplement()                                
    {   
        
        return new Binary("0");
    }            
    
    public Binary rotateLeft()
    {   
        
        return new Binary("0");
    }    

    public Binary rotateRight()                        
    {   
        
        return new Binary("0");
    }        
}