
/**
 * ##### # ########### ## ##### ####### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */

import java.util.Scanner;
import java.util.InputMismatchException;
import java.util.ArrayList;

public class BuildWS
{
    Scanner scanner = new Scanner(System.in);
    
    public void build()
    {
        int row = inputRows();
        int column = inputColumns();

        char[][] wordSearch = fillBackground(row, column);
        ArrayList<String> wordList = inputWords();
        
        for (int i = 0; i < wordList.size(); i++)
        {
            int randomNumber = (int) (Math.random() * 3) + 1; 
            
            if (randomNumber == 1)
            {
                placeHorizontal(wordList.get(i), wordSearch, row, column);
            }
            
            if (randomNumber == 2)
            {
                placeVertical();
            }
            
            if (randomNumber == 3)
            {
                placeDiagonal();
            }
        }
    }

    private int inputRows()
    {
        boolean validRow = false;
        int row = -1;
        
        while (!validRow)
        {
            try
            {
                System.out.println("How many rows would you like? >");
                row = scanner.nextInt();
                validRow = true;
            }

            catch (InputMismatchException e)
            {
                String badInput = scanner.nextLine();
                System.out.println("\n'" + badInput + "' is not a valid input.\n");
            }
        }

        return row;
    }

    private int inputColumns()
    {
        boolean validColumn = false;
        int column = -1;
        
        while (!validColumn)
        {
            try
            {
                System.out.println("How many columns would you like? >");
                column = scanner.nextInt();
                validColumn = true;
            }

            catch (InputMismatchException e)
            {
                String badInput = scanner.nextLine();
                System.out.println("\n'" + badInput + "' is not a valid input.\n");
            }
        }
        
        return column;
    }

    private char[][] fillBackground(int row, int column)
    {
        char[][] wordSearch = new char[row][column];
        for (int r = 0; r < wordSearch.length; r++)
        {
            for (int c = 0; c < wordSearch[0].length; c++)
            {
                wordSearch[r][c] = (char) ((int) (Math.random() * 26) + 97);
            }
        }

        return wordSearch;
    }
    
    private ArrayList<String> inputWords()
    {
        String input = "";
        ArrayList<String> wordList = new ArrayList<String>();
        
        while (!input.equals("end"))
        {
           System.out.print("Add a word to your search (end to stop) >");
           input = scanner.next();
           
           if (!input.equals("end"))
           {
               wordList.add(input);
           }
        }
        
        return wordList;
    }
    
    private char[][] placeHorizontal(String word, char[][] wordSearch, int row, int column)
    {
        char[][] temp = wordSearch;
        boolean placed = false;
        
        int r = (int) (Math.random() * row);
        int c = (int) (Math.random() * column);
        
        for (int i = 0; i < word.length(); i++, r++)
        {
            wordSearch[r][c] = word.charAt(i)
        }
    }
    
    private void placeVeritcal()
    {
    
    }
    
    private void placeDiagonal()
    {
    
    }
    
    public void test(ArrayList<String> wordList)
    {
        for (int i = 0; i < wordList.size(); i++)
        {
            System.out.println(wordList.get(i));
        }
    }
}