package simia_se_efthia;
import java.util.*;

/**
 * ###### ## ##### ######### #### ########## ########## ## ######## ####### 
 * ### ### ### ### ##### ## ###### ##########/############ ###. ##â€™ #####, ####### #### ### #####
 * ############ #### #### ## ###### ### ###### [#][#] ## ########### #### ##### ### ## #######
 * ## ### ############# ##### ###### ########
 * 
 * @###### ######## 
 */

public class SetOfPoints extends Object implements Comparator<SetOfPoints> 
{
    private int [][] sop = new int [2][3];
 
    /**
     * Constructor for objects of class SetOfPoints
     */
    public SetOfPoints()
    {
       sop[0][0]=0;
       sop[0][1]=0;
       sop[0][2]=0;
       sop[1][0]=0;
       sop[1][1]=0;
       sop[1][2]=0;
    }
    /**
     * Constructor for objects of class SetOfPoints
     */
    public SetOfPoints(int [][] sop)
    {
       this.sop[0][0]=sop[0][0];
       this.sop[0][1]=sop[0][1];
       this.sop[0][2]=sop[0][2];
       this.sop[1][0]=sop[1][0];
       this.sop[1][1]=sop[1][1];
       this.sop[1][2]=sop[1][2];
    }
    public SetOfPoints(int [] sop)
    /**
     * Constructor for objects of class SetOfPoints
     */
    {
       this.sop[0][0]=sop[0];
       this.sop[0][1]=sop[1];
       this.sop[0][2]=sop[2];
       this.sop[1][0]=0;
       this.sop[1][1]=0;
       this.sop[1][2]=0;
    }
    public void set (int [][] sop)
    {
       this.sop[0][0]=sop[0][0];
       this.sop[0][1]=sop[0][1];
       this.sop[0][2]=sop[0][2];
       this.sop[1][0]=sop[1][0];
       this.sop[1][1]=sop[1][1];
       this.sop[1][2]=sop[1][2];
    }
    public void set (int [] sop)
    {
       this.sop[0][0]=sop[0];
       this.sop[0][1]=sop[0];
       this.sop[0][2]=sop[0];
       this.sop[1][0]=0;
       this.sop[1][1]=0;
       this.sop[1][2]=0;
    }
    public void set (int i, int j, int n)
    {
       this.sop[i][j]=n;
    }
    public int get (int i, int j){
       return this.sop[i][j];
    }
    public int[][] get(){
       return this.sop;
    }
    public int[] getInitial(){
       return this.sop[0];
    }
    public int getSlope(){
       return this.sop[1][2];
    }
    public SetOfPoints setSlope (Object osop, SetOfPoints fixpoint){
        SetOfPoints sop = new SetOfPoints();
        sop = (SetOfPoints) osop;    
        sop.set(1,0, sop.get(0,0) - fixpoint.get(0,0));
        sop.set(1,1, sop.get(0,1) - fixpoint.get(0,1));
        if (sop.get(1,1)!=0){
            sop.set(1,2, sop.get(1,1)/sop.get(1,0));
        }
        return sop;
    }
    public void setSlope (SetOfPoints fixpoint){
        this.sop[1][0] = this.sop[0][0] - fixpoint.get(0,0);
        this.sop[1][1] = this.sop[0][1] - fixpoint.get(0,1);
        if (this.sop[1][1]!=0){
            this.sop[1][2] = this.sop[1][1]/this.sop[1][0];
        }
    }
    public int[] resultSlop (){
         return new int {this.sop[0][0],this.sop[0][1],this.sop[1][3]} ;
    }
    public int compare (SetOfPoints a, SetOfPoints b) {
        if  (a.get(0,1)==0 && b.get(0,1)==0){
            return 0;
        }
        else if (a.get(0,1)==0){
            return -1;
        }
        else if (b.get(0,1)==0){
            return 1;
        }
        else if (a.get(1,2) < b.get(1,2)){
            return -1;
        }
        else {
            return 1;
        }
    }
    public boolean equalSlope (SetOfPoints a, SetOfPoints b) {
        if  (a.get(0,1)==0 && b.get(0,1)==0){
            return true;
        }
        else if (getSlope()==getSlope()){
            return true;
        }
        else {
            return false;
        }
    }
}