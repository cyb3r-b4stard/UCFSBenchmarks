
/* #### ### #######, ########## #
 * ####: ####### ####
 * ########: #########
 * ##: #########
 */

import ecs100.*;
import java.util.*;

/** 
 *  ###### ### ### ########### ## # ######
 *  ### ###### ###### ####### ########## ### ### ############.
 *  ### #### ###### #### ### ######, ##### ##########, ### ###### ### ######.
 */
public class Permutations {
    
    /**
     * @return a List of all the permutations of a String. 
     */
    public static List <String> recPermute(String stringToPermute) {
        ArrayList<String> result = new ArrayList<String>();
        if (stringToPermute.length()==1) {
            result.add(stringToPermute); 
            return result;
        }
        else {
            char firstLetter = stringToPermute.charAt(0); 
            String restOfString = stringToPermute.substring(1, stringToPermute.length());
            String[] restOfStringArray = restOfString.split("(?!^)");
            UI.println(restOfStringArray[1]);
            for (int i=0; i<restOfString.length(); i++){
                UI.print();
            }
        }
        return result;
    }
    
    public String[] shuffle(String[] word, int numMoves){
        String[word.length+1] shuffledWord;
        for(String s : word) {
            
        }
    }
    public static void main(String[] arguments){
        UI.initialise();
        UI.setWindowSize(500,400);
        UI.setDivider(1);
        String string = "";

        while (! string.equals("#")) {
            string = UI.askString("Enter string to permute - # to exit: ");
            if (string.length() < 11) {

                List<String> permutations = recPermute(string);

                for (String p : permutations)
                    UI.println(p);

                UI.println("---------");
            }
            else UI.println("Give a smaller string.");
        }
        UI.quit();
    }    
}