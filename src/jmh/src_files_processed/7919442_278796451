
import java.util.Scanner;
/*
 * ####### ### ###### ######
 *
 * ## #### ##### ######### ### ## ### ######### ####### ######### ## ######## ### ##### #####:
 */

public class StringsAndArrays {
    
    
    public static void printArray(int[][] input){
        int n = input.length();
        for (int y = 0; y < n; y++) {
            for (int x = 0; x < n; x++){              
                System.out.println("|" + matrix[x][y] + "|");
                
            }
            System.out.println();
        }   
        
    }
    public static void main(String[] args) {
       capitalizeFirstLetters();

        int n = 5; 
        int[][] matrix = new int[n][n]?
        for (int y = 0; y < n; y++) {
            for (int x = 0; x < n; x++){
                matrix[x][y]= (int) (Math.random() * 42);
                
                
            }
        }

        System.out.println("Before");

        transpose(matrix);

        System.out.println("After");




        stringSort(array);
        */
    }

    /* 0) Write a method named swap exchanges two elements in the provided input array
     * Note that array[a] = array[b] and array[b] = array[a] is not sufficient to do this
     * as swapping two variables takes a third memory location.
     */
    private static void swap(int[] array, int index1, int index2) {
    }

 
    /* 1) Write a method named capitalizeFirstLetters that prints a capitalized
     * version of a passed in string to the screen, that is, it changes the first
     * letter of each word in the string to upper case (if it is not already upper
     * case). So "I really enjoy attending lab!" becomes
     * "I Really Enjoy Attending Lab!". The string to be printed should be a
     * parameter to the method, and the method should have a void return. You
     * should test your method in main by getting a line of input from the user
     * and applying the method to it. (Hint: you may want to browse the Java
     * String docs for useful methods on strings).
     */
    public static void capitalizeFirstLetters() {
        String str;
        Scanner keyboard = null;
        System.out.println("Please enter a sentence or a phrase: ");

        String sentence = "i love lab, is half true.";
        Scanner words = new Scanner(sentence);
        while(words.hasNext()){
            String currentWord = words.next();
            int letterLength = currentWord.length();
            char firstLetter = currentWord.charAt(0);
            char caps = (char) (firstLetter -32);

            System.out.print(caps);
            currentWord = currentWord.substring(1,letterLength);
            System.out.print(currentWord  + " ");
        }

    }

    /*
     * 2) Write a method named transpose that calculates the transpose of a n-by-n
     * matrix when called, that is, it exchanges the rows and columns of a matrix
     * without using extra space. The n-by-n matrix should be passed in as a
     * parameter and nothing needs to be returned. You should test your method in
     * main by creating a matrix of random values and passing that in to your
     * method. Print the original matrix first, before calling transpose, then
     * print it again after calling transpose.
     */
    public static void transpose(int[][] matrix) {

    }

    /*
     * 3) Write a method named isRagged that determines if a passed in two
     * dimensional array is ragged. It should take a 2d array as a parameter, and
     * return true if it is ragged and false if it is not ragged. You should test
     * your method in main by hard coding some different 2d array inputs (ragged
     * and non-ragged).
     */
    public static boolean isRagged(int[][] matrix) {
        return false;
    }

    /*
     * 4) Write a method named findMin that takes in an array of strings and a
     * starting index, and calculates the minimum string (i.e. the earliest word
     * alphabetically) in the array starting from the passed in index. The method
     * should return the index where the minimum string is located. As before,
     * make sure to test you method in main (you can hard code the array or use
     * Scanner on keyboard input to populate the array).
     */

    public static int findMin(String array[], int index) {
        int result = index;


        return result;
    }

    /*
     * 5) Write a method named stringSort that sorts an array of strings
     * lexicographically, that is, using dictionary ordering. You should sort by
     * finding the smallest string, swapping it with the first string in the
     * array, then finding the second smallest string then swapping it with the
     * second string in the array and so on. As before, make sure to test you
     * method in main (you can hard code the array or use Scanner on keyboard
     * input to populate the array).
     */

    public static void stringSort(String[] array) {
    }

}