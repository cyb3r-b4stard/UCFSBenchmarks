/**
 * # ########### ###### ###### # #### ## ### ###-########### ######### #####.
 * 
 * @###### (#### ####) 
 * @####### ####### #.## ####### ##, ####
 */
public class LineSegment
{
    private Point fromPoint;
    private Point toPoint; 
    
    /**
     * Initializes this LineSegment with starting point (x1, y1) and
     * ending point (x2, y2).
     */
    public LineSegment(double x1, double y1, double x2, double y2)
    {
        fromPoint = new Point(x1,y1);
        toPoint = new Point(x2,y2);
    }
    
    /**
     * Returns the starting point of this LineSegment.
     */
    public Point getStartingPoint()
    {
        return fromPoint;
    }
    /**
     * Returns the ending point of this LineSegment.
     */
    public Point getEndingPoint()
    {
        return toPoint;
    }  
    
    /**
     * Returns the length of this LineSegment.
     */
    public double length()
    {
        private length;
        length = sqrt(fromPoint.xcoord*fromPoint.xcoord + fromPoint.ycoord*fromPoint.ycoord);
        return length;
    }
    
    /**
     * Moves this LineSegment the specified distance horizontally.
     */
    public void moveHorizontal(double distance)
    {
    }

    /**
     * Moves this LineSegment the specified distance vertically.
     */
    public void moveVertical(double distance)
    {
    }
    
    /**
     * Returns true if this LineSegment is a vertical line;
     * otherwise returns false.
     */
    public boolean isVertical()
    {
        return false;
    }
    
     /**
     * Returns true if this LineSegment is a horizontal line;
     * otherwise returns false.
     */
    public boolean isHorizontal()
    {
        return false;
    }   
    
    /**
     * Returns the slope of this LineSegment. 
     */
    public double slope()
    {
        return Double.NaN;  
    }
}