
/* #### ### ####### - ######
 * ####: #### #######-#####
 * ########: #########
 * ##:#########
 */

import ecs100.*;
import java.awt.Color;
import java.io.*;
import java.util.*;
import javax.swing.JColorChooser;

/** ### ######## ####### ###### ### #### ## ######, ####, ### ###### #####
 *    ########## ######## ########## ## # #### ## ###### ######.
 *    ### ####### ###### ### #### ##
 *      - ### # ### ##### ## ### #######
 *      - ###### # ##### #### ### #######
 *      - #### # ##### ## # ######### ########
 *      - ### ### ###### ### ### #### #####
 *      - #### ### ####### ####### ## # ####
 *      - #### # ######## ####### #### # ####.
 *    ### ###### ####### #####, ##########, #####, ### ####
 *        
 *    #######
 *      ### ######## ##### ####### ### ### #### ###########:
 *        #######, ##### #######, #### ####### ### #######.
 *        ## ###### ### ####### ####### ## ## ######### ## ##### .
 *
 *      ### ##### ######### ######### ### ##### ####
 *      ### ##### ####### ### ######### ##### ### ######### ######### ##### ## ######.
 *
 *    #####:
 *      # ####### ## ###### ## # #### ########## ### #### ### #### #####,
 *        #### #### #### ##### #### ### #### ## ### #### ## #####,
 *         ######## ## # ############# ## ### #####,
 *         ##### ### ###### (##### ######## ### ###, ####, ### #####)
 *         #### ### ######## (# ### #)
 *         ### ##### ###### #### ###### ## ### #####.
 *        
 *    #### #########:
 *        ##### ### ####### ### ####### #### ### ##### ####### (###, ####, ####),
 *         ####### ### ########## ### #### ##### ## ####, ###
 *         ###### ### ####### ### #####,
 *         ####### ### ###### ### ######## ######.
 */

public class MiniDraw {
    private ArrayList<Shape> shapes = new ArrayList<Shape>();    


    private double pressedX;                 
    private double pressedY;  
    private String currentAction = "Line";
    private Shape currentShape;
    private Color currentColor = Color.red;

    /** Constructor sets up the GUI:
     *  sets the mouse listener and adds all the buttons
     *  For New, Open, Save, and Color, call the appropriate method (see below)
     *   to perform the action immediately.
     *  For other buttons, store the button name in the currentAction field
     */
    public MiniDraw(){
        UI.setMouseListener( this::doMouse );
        UI.addButton("New", this::doNewDrawing);
        UI.addButton("Open", this::doOpenDrawing);
        UI.addButton("Save", this::doSaveDrawing);
        UI.addButton("Colour", this::doSelectColor);

        UI.addButton("Line",this::doLine);
        UI.addButton("Rectangle",this::doRect);
        UI.addButton("Oval",this::doOval);
        UI.addButton("Dot",this::doDot);
        UI.addButton("Move",this::doMove);
        UI.addButton("Delete",this::doDelete);
    }

    public void doLine(){
        this.currentAction = "Line";
    }

    public void doRect(){
        this.currentAction = "Rect";
    }

    public void doOval(){
        this.currentAction = "Oval";
    }

    public void doDot(){
        this.currentAction = "Dot";
    }

    public void doMove(){
        this.currentAction  = "Move";
    }

    public void doDelete(){
        this.currentAction = "Delete";
    }

    /** When mouse is pressed, remember the position in fields
     *  and also find the shape it is on (if any), and store
     *  the shape in a field (use the findShape(..) method)
     *  When the Mouse is released, depending on the currentAction,
     *  - perform the action (move or delete).
     *    move is done on the shape where the mouse was pressed,
     *    delete is done on the shape where the mouse was released 
     *  - construct the shape and add to the shapes ArrayList,
     *    (though the polygon is more complicated)
     *  - redraw the drawing.
     *  It is easiest to call other methods (see below) to actually do the work,
     *  otherwise this method gets too big!
     */
    public void doMouse(String mouseAction, double x, double y) {
        if (mouseAction.equals("pressed")){
            this.pressedX = x;
            this.pressedY = y;
        }
        if (mouseAction.equals("released")){
            if (currentAction.equals("Move")){
                this.currentShape = findShape(pressedX,pressedY);
                if(this.currentShape!=null){
                    this.currentShape.moveBy(x-this.pressedX,y-this.pressedY);
                    this.drawDrawing();
                }
            }
            if (currentAction.equals("Line")){
                this.addALine(pressedX,pressedY,x,y); 
            }
            if(currentAction.equals("Rect")){
                this.addARectangle(this.pressedX,this.pressedY,x,y);
            }
            if (currentAction.equals("Delete")){
                this.deleteShape(x,y);
            }
            if(currentAction.equals("Dot")){
                this.addADot(this.pressedX,this.pressedY);
            }
            if(currentAction.equals("Oval")){
                this.addAnOval(this.pressedX,this.pressedY,x,y);
            }
            this.drawDrawing();
        }
    }


    /** Draws all the shapes in the list on the graphics pane
     *  First clears the graphics pane, then draws each shape,
     */
    public void drawDrawing(){
        UI.clearGraphics();
        for(int i=0;i<shapes.size();i++){
            shapes.get(i).redraw();
        }
    }   

    /** Add a line
     *    Creates a new Line object in the current color and adds it to the drawing
     */
    public void addALine(double x1, double y1, double x2, double y2){
        Line l = new Line(x1,y1,x2,y2,currentColor);
        shapes.add(l);
        this.drawDrawing();
    }

    /**
     * Add a rectangle.
     * x1,y1 is one corner, and x2,y2 is the diagonally opposite corner
     * Works out the left, top, width, and height 
     * Then creates a new Rectangle in the current colour and adds it to the drawing.
     */
    public void addARectangle(double x1, double y1, double x2, double y2){

        

        double width = x2-x1;
        double height = y2-y1;

        Rectangle l = new Rectangle(x1,y1,width,height,this.currentColor);
        shapes.add(l);
        this.drawDrawing();
    }

    /**
     * Add an oval.
     * x1,y1 is one corner, and x2,y2 is the diagonally opposite corner
     * Works out the left, top, width, and height 
     * Then creates an Oval in the current color, and adds to the drawing
     */
    public void addAnOval(double x1, double y1, double x2, double y2){
        double width = x2-x1;
        double height = y2-y1;
        shapes.add(new Oval(x1,y1,width,height,this.currentColor));
        this.drawDrawing();
    }

    /**
     * Add a dot.
     *    Creates a new Dot object in the current color and adds it to the drawing
     */
    public void addADot(double x, double y){        
        Dot d = new Dot(x,y,5,5,this.currentColor);
        shapes.add(d);
        this.drawDrawing();
    }

    /** Checks each shape in the list to see if the point (x,y) is on the shape.
     *  It returns the topmost shape for which this is true.
     *   (Be careful about the order you search through the list)
     *  Returns null if there is no such shape.
     */
    public Shape findShape(double x, double y){
        for(int i=0;i<shapes.size();i++){
            if(shapes.get(i).on(x,y)){
                return shapes.get(i);
            }  
        }
        return null;  
    }

    /** Sets the current color.
     * Asks user for a new color using a JColorChooser 
     * As long as the color is not null, it remembers the color 
     */
    private void doSelectColor(){
        Color col =  JColorChooser.showDialog(null, "Choose Colour" , Color.black);
        if(col!=null){
            this.currentColor = col;
        }
    }

    /** Start a new drawing -
     *  initialise the shapes ArrayList and clear the graphics pane. 
     */
    public void doNewDrawing(){
        this.shapes = new ArrayList<Shape>();
        UI.clearGraphics();
    }

    /** Moves the current shape (if there is one)
     *    to where the mouse was released.
     *    Ie, change its position by (toX-fromX) and (toY-fromY)
     */
    public void moveShape(double changeX, double changeY){


        /*if(findShape(pressedX, pressedY) != null){
        findShape(pressedX, pressedY).moveBy(changeX, changeY);
        }
        drawDrawing();
         */
    }

    /** Finds the shape that was under the mouseReleased position (x, y)
     *    and then removes it from the ArrayList of shapes. 
     *  If not pressed on any shape, then do nothing.
     */
    public void deleteShape(double x, double y){
        this.pressedX = x;
        this.pressedY = y;

        for(int i=0;i<shapes.size();i++){
            if(shapes.get(i).on(x,y) ){
                shapes.remove(i);

            }

        }

    }

    /** Ask the user to select a file and save the current drawing to the file. */
    public void doSaveDrawing(){
        String file = UIFileChooser.open();
        
        try{
            PrintStream out = new PrintStream(new File(file));
        }catch(IOException e){}
    }

    /**
     * Ask the user for a file to open,
     * then read all the shape descriptions into the current drawing.
     * For each line of the file, it will read the first token to find out which
     * kind of shape and read the rest of the line into a string.
     * It will then call the appropriate constructor, passing the string as an argument.
     */
    public void doOpenDrawing(){
        String file = UIFileChooser.open();
        try{
            Scanner scan = new Scanner(new File(file));
            while(scan.hasNext()){
                String type = scan.next();
                int colour1 = scan.nextInt();
                int colour2 = scan.nextInt();
                int colour3 = scan.nextInt();
                
                int x = scan.nextInt();
                int y = scan.nextInt();
                int width = scan.nextInt();
                int height = scan.nextInt();
                Color col = new Color(colour1,colour2,colour3);
                UI.printf(x);
                
                if(type.equals("Rectangle")){
                   
                    Rectangle r = new Rectangle(x,y,width,height,col);
                    shapes.add(r);
                }
                if(type.equals("Oval")){
                    
                    Oval o = new Oval(x,y,width,height,col);
                    shapes.add(o);
                }
                if(type.equals("Line")){
                    
                    Line l = new Line(x,y,width,height,col);
                    shapes.add(l);
                }
                if(type.equals("Dot")){
                    
                    
                    Dot d = new Dot(x,y,width,height,col);
                    shapes.add(d);
                }
            }
        }catch(IOException e){}

    }
    public static void main(String args[]){
        new MiniDraw();
    }

}