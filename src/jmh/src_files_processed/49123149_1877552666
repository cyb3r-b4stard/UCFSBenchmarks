
/* #### ### ####### - ######
 * ####:
 * ########:
 * ##:
 */

import ecs100.*;
import java.awt.Color;
import java.util.*;
import java.io.*;


/**
 * ##################
 * ######## #### ##### # ########## ## #### ## ########### #### ### #### ## ### ####
 * #### #### ## ### #### "##########-####.###" ### # ########### ## ### ##########:
 *   ## #### #########        ######## ######### ##### ######
 * #### ## #### ####:
 *  #### #############-####.### ### #### ### ### ########### ## ######### #.# ### #####
 *   ##### ### ## ###### ### #######, ##### ## ## ### ## ### ## ### #### ####.
 * 
 * ####:  ### #######:
 *   ##########
 *      ##### ### #### #### # #### #### # ##### ########## ##
 *      ######### ## ########## #######.
 *      #### : ## #### ## ########## ######, #### ### #### #### ### ####
 *              ### #### ## ## ### ######## ## ### ########## ###########
               #### #### ### ######## ###### ## ### ##### ### #######
 *   #############
 *      ##### ### ### ########### ## ### ######### #### #### # ######### #.# ### ####.
 *      ####: ### ### ####### ## ### ########## #####, ########## ############ ### ########
 *   
 * ##########: ### ######:
 *   ###########
 *        ######## #### ########## ## ### #### #### ##### ##### ##########
 *      ### ##### ##### #### ## "#####" ########### - ########### ####
 *        - ### ###### ### ## #### #####, ###
 *        - #### ###### ###### ### ## #### #####, ###
 *        - ### ######### ## ## ##### ## ##### #### 
 *      ### #### ####, ######
 *        - ##### ##'#,
 *        - ### ######## ####### ####
 *        - ### ##### ##########
 *        - ### ###### ## #### ####### ####.

 * #########: ### ######
 *  ###############;
 *      ########## # ### ######### ########## ##### ########## #### # ######### #### ## ## ##### #.#
 *      ### #### #### ########## ## #### ####
 *       - ##### # #### ## ### ### "######-##" ###########:
 *         ##### ########### ###### # ######## ## #### ### ##### ########## <= ####.
 *       - ## ##### ### ## ##### ### ######-## ###########, #### ## ###### ###
 *          ### #### ####### ## ### ### ########## ######## ##
 *          ##, ######### ### #### ##### ### ### ### ### #### ######-## ##########
 *
 * ### #### "#######-######.###" ### ###### ###### ### ### "#############-####.###"
 *   ####, ##### #### ######## ########### #### ######### # ### #####.
*/

public class EarthquakeAnalyser{

    private ArrayList<Earthquake> earthquakes = new ArrayList<Earthquake>();


    /** Construct a new EarthquakeAnalyser object and initialise the interface */
    public EarthquakeAnalyser(){
        UI.initialise();
        UI.addButton("Load", this::doLoadData);
        UI.addButton("Big ones",  this::doFindBigOnes);
        UI.addButton("Pairs", this::doFindPairs);
        UI.addButton("Follow-ons", this::doFindFollowOns);
        UI.addButton("Quit", UI::quit);
        UI.setDivider(1.0);  
    }

    /*
     * Load data from the data file into the earthquakes field
     */
    public void doLoadData(){
        new ArrayList<Earthquake>();
        String filename = UIFileChooser.open("Data File");
        try{
           Scanner scan = new Scanner(new File(filename)); 
           while(scan.hasNext()){
              this.Earthquake = sc.nextLine();
            }
            
        }catch(IOException e){UI.println("File reading failed");}

       UI.printf("Loaded %d earthquakes into list\n", this.earthquakes.size());
        UI.println("----------------------------");
    }

    /**
     * Print details of all earthquakes with a magnitude of 5.5 or more
     */
    public void doFindBigOnes(){
        UI.println("Earthquakes 5.5 and above");
        /*# YOUR CODE HERE */

        UI.println("------------------------");
    }
    
    /**
     * Print all pairs of earthquakes within 1km of each other and within 1km depth from each other
     * and separated by at least 1 day;
     */
    public void doFindPairs(){
        UI.println("Close earthquakes");
        /*# YOUR CODE HERE */

        UI.println("----------------------------");
    }
    /**
     * Constructs a new ArrayList containing every earthquake with a magnitude that is at least 6 
     * For each earthquake on this list
     * - finds a list of all the "follow-on" earthquakes:
     *   later earthquakes within a distance of 10km and depth difference <= 10km.
     * - If there are at least two follow-on earthquakes, then it prints out
     *     the full details of the big earthquake followed by
     *    ID, magnitude and days since the big one for each follow-on earthquake
     */

    public void doFindFollowOns(){
        UI.println("Big earthquakes and their follow-on earthquakes");
        /*# YOUR CODE HERE */

        UI.println("-------------------------------------");
    }




    public static void main(String[] arguments){
       EarthquakeAnalyser obj = new EarthquakeAnalyser();
    }        


}