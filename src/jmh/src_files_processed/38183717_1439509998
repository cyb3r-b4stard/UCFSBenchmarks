
/**
 * ##### # ########### ## ##### ################## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
import java.math.*;
public class RecursionExercises
{
    public static int findMin(int array[]){
        
    }
    private static int reverse(int number){
		if(number == 0 && number / 10 == 0){
			return 0;
		}
		return reverse(number / 10) + (int)((number % 10) * Math.pow(10, (int)Math.log10(number)));
	}
    public static int countPaths(int n, int m){
        int count = 0;
        if (n == 0 && m == 0){
            return 1;
        }
        if (n > 0){
            count = count + countPaths(n-1, m);
        }
        if (m > 0){
            count = count + countPaths(n, m-1);
        }
        return count;
    }
    public static String ordString(int number){
        String temp = "";
        if (number > 0){
            for (int i = 0; i < number; i++){
                if (i > 0){
                    temp = temp + ", ";
                }
                temp = temp + ordString(i);
            }
        }
        return "{" + temp + "}";
    }
    public static void main(String[] args){
        int[] array = {35, 40, 25, 5, 68};
        System.out.println(findMin(array[]));
        System.out.println(reverse(12345));
        System.out.println(countPaths(5, 5));
        System.out.println(ordString(3));
    }
}