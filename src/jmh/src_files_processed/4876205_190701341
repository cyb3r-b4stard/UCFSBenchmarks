import  java.awt.*; 
import  java.awt.event.*; 
import  com.sun.j3d.utils.universe.*; 
import  com.sun.j3d.utils.geometry.*; 
import  javax.media.j3d.*; 
import  javax.vecmath.*; 
import  javax.swing.JFrame; 
import com.sun.j3d.utils.behaviors.mouse.*; 
import java.util.ArrayList;
import java.io.IOException;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
  
public class  showPacking3D  extends  JFrame{ 
  
    private int counter = 0;  
    private static final float SCALE = 0.05f;
    
    
  public static  void  main(String[]  args){ 
    
    Bin b = new Bin();
    b.addItem(new Kiste(50,50,50,0,0,0));
    b.addItem(new Kiste(20,20,20,50,0,0));
    b.addItem(new Kiste(30,50,30,0,50,0));
    new  showPacking3D(b); 
    
  } 
  
  public showPacking3D(Bin b) { 
    getContentPane().setLayout(new  BorderLayout()); 
    GraphicsConfigTemplate3D template  = new GraphicsConfigTemplate3D();
    

    template.setSceneAntialiasing(1);

    Canvas3D canvas3D = new Canvas3D(GraphicsEnvironment.getLocalGraphicsEnvironment().
                                getDefaultScreenDevice().
                                getBestConfiguration(template));
    GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration(); 
    getContentPane().add("Center", canvas3D); 
    
    BranchGroup scene =  createScene(b);
    
     
    SimpleUniverse simpleU =  new  SimpleUniverse(canvas3D); 
    
    Transform3D zurueck = new Transform3D();
    zurueck.set(new Vector3f(0.0f, 1.5f, 20.0f));
   
    TransformGroup vp =  simpleU.getViewingPlatform().getViewPlatformTransform();
    vp.setTransform(zurueck);
    /* Original
    TransformGroup vpVer = null;
    Transform3D zurueck = new Transform3D();
    vpVer = simpleU.getViewingPlatform().getViewPlatformTransform();
    zurueck.set(new Vector3f(0.0f, 2.5f, 25.0f));
    vpVer.setTransform(zurueck);
    vpDrehung.addChild(vpVer);
    */
    
   
    simpleU.addBranchGraph(scene); 
    canvas3D.getView().setSceneAntialiasingEnable(true); 
    setSize(1024,768); 
    setVisible(true); 
    
  } 
  private BranchGroup createScene(Bin b){
      BranchGroup rootBranch = new BranchGroup();
      TransformGroup boxen = new TransformGroup();
     
    ArrayList<Kiste> items = b.getItems();
    for (int i = 0; i < items.size(); i++){
        Kiste k = items.get(i);
        int w = k.getCurWidth();
        int h = k.getCurHeight();
        int d = k.getCurDepth();
        Vector3f pos = new Vector3f(k.getX(), k.getY(), k.getZ());
        
        boxen.addChild(addBox(w,h,d,pos));
    }
    /*    
    ArrayList<CornerPoint> cps = b.getCP();
    for (int i = 0; i < cps.size(); i++){
        CornerPoint cp = cps.get(i);
    }
    */
    
    ArrayList<ExtremePoint> eps = b.getEP();
    for (int i = 0; i < eps.size(); i++){
        ExtremePoint ep = eps.get(i);
        boxen.addChild(addExtremePoint(ep.getX(), ep.getY(), ep.getZ()));
    }
    
    /*
      boxen.addChild(addBox(10.0f,10.0f,10.0f,new Vector3f(0.0f,0.0f,0.0f)));
      boxen.addChild(addBox(5.0f,5.0f,5.0f,new Vector3f(10.0f,0.0f,0.0f)));
      boxen.addChild(addBox(5.0f,15.0f,5.0f,new Vector3f(0.0f,0.0f,10.0f)));
      */
      
      
      rootBranch.addChild(boxen);
      
      boxen.addChild(this.createCoordSystem());
      boxen.addChild(this.erzeugeKoordinatensystem());
      int wBin = b.getWidth();
      int hBin = b.getHeight();
      int dBin = b.getDepth();
      boxen.addChild(this.addBin(wBin, hBin, dBin));
      /*
      boxen.addChild(addCornerPoint(10.0f,0.0f,0.0f));
      boxen.addChild(addCornerPoint(0.0f,10.0f,0.0f));
      boxen.addChild(addCornerPoint(0.0f,0.0f,10.0f));
      */
      
      boxen.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE); 
      boxen.setCapability(TransformGroup.ALLOW_TRANSFORM_READ);
      MouseRotate myMouseRotate = new MouseRotate(); 
      myMouseRotate.setTransformGroup(boxen); 
      myMouseRotate.setSchedulingBounds(new BoundingSphere()); 
      rootBranch.addChild(myMouseRotate);
      MouseTranslate myMouseTranslate = new MouseTranslate();
      myMouseTranslate.setTransformGroup(boxen);  
      myMouseTranslate.setSchedulingBounds(new BoundingSphere());   
      rootBranch.addChild(myMouseTranslate);
      MouseZoom myMouseZoom = new MouseZoom();
      myMouseZoom.setTransformGroup(boxen);  
      myMouseZoom.setSchedulingBounds(new BoundingSphere());   
      rootBranch.addChild(myMouseZoom);
      
           
      /* Die Lampen: */
      BoundingSphere BigBounds=new BoundingSphere(new Point3d(),1000000);
      DirectionalLight lgt1 = new DirectionalLight(true, new Color3f(1.0f, 1.0f, 1.0f), new Vector3f(0.2f, 0.2f, -2.7f));
      lgt1.setInfluencingBounds( BigBounds );
      AmbientLight lgt2 = new AmbientLight(new Color3f(0.1f, 0.1f, 0.1f));
      lgt2.setInfluencingBounds( BigBounds );
      AmbientLight lgt3 = new AmbientLight(new Color3f(0.0f, 1.0f, 0.0f));
      lgt2.setInfluencingBounds( BigBounds );
      
      rootBranch.addChild(lgt1);
      rootBranch.addChild(lgt2);
      rootBranch.addChild(lgt3);
      
      Transform3D rotation = new Transform3D();
      Transform3D rotationX = new Transform3D();
      double angleX = Math.PI/10;
      rotationX.rotX(angleX); 
      Transform3D rotationY = new Transform3D();
      double angleY = -Math.PI/5.5;
      rotationY.rotY(angleY);
      rotation.mul (rotationX, rotationY);
      boxen.setTransform(rotation);
      
      Color3f bgColor = new Color3f(Color.white);     
      Background bgNode = new Background(bgColor);
      bgNode.setApplicationBounds(new BoundingSphere());
      rootBranch.addChild(bgNode);
      
      rootBranch.compile();
      return rootBranch;
    }
    
  private TransformGroup addBox(int w_int, int h_int, int d_int, Vector3f pos){
      
      
      float w = w_int*SCALE;
      float h = h_int*SCALE;
      float d = d_int*SCALE;
      
      TransformGroup transBox = new TransformGroup();
      Transform3D transform = new Transform3D();
      pos.x = pos.x*SCALE;
      pos.y = pos.y*SCALE;
      pos.z = pos.z*SCALE;
      Vector3f offset = new Vector3f(0.5f*w,0.5f*h,0.5f*d);
      pos.add(offset);
      
      transform.setTranslation(pos);
      transBox.setTransform(transform);
      
      Appearance boxApp = new Appearance();
      Color3f boxCol = getColor();
      ColoringAttributes ca = new ColoringAttributes(boxCol, ColoringAttributes.NICEST); 
      boxApp.setColoringAttributes(ca);
      
      LineAttributes la = new LineAttributes();
      la.setLineAntialiasingEnable(true);
      boxApp.setLineAttributes(la);
      
      Material boxMat = new Material();
      boxMat.setDiffuseColor(boxCol);
      boxMat.setShininess(64.0f);
      boxApp.setMaterial(boxMat);
      
      Box box = new Box(w*0.5f,h*0.5f,d*0.5f,Box.ENABLE_APPEARANCE_MODIFY | Box.GENERATE_NORMALS,boxApp);
      transBox.addChild(box);
      return transBox;
    }
    private TransformGroup addCornerPoint(int x, int y, int z){
         TransformGroup tg = new TransformGroup(); 
         Transform3D transform = new Transform3D();
         Vector3f vector = new Vector3f(SCALE*x,SCALE*y,SCALE*z);
         transform.setTranslation(vector);
         tg.setTransform(transform);
         Appearance kugelApp = new Appearance();
         Color3f boxCol = new Color3f(Color.black);
         ColoringAttributes ca = new ColoringAttributes(boxCol, ColoringAttributes.NICEST); 
         kugelApp.setColoringAttributes(ca);
         
         tg.addChild(new Sphere(1.2f*SCALE, kugelApp));
         return tg;
     }
     
     private TransformGroup addExtremePoint(int x, int y, int z){
         TransformGroup tg = new TransformGroup(); 
         Transform3D transform = new Transform3D();
         Vector3f vector = new Vector3f(SCALE*x,SCALE*y,SCALE*z);
         transform.setTranslation(vector);
         tg.setTransform(transform);
         Appearance kugelApp = new Appearance();
         Color3f boxCol = new Color3f(Color.green);
         ColoringAttributes ca = new ColoringAttributes(boxCol, ColoringAttributes.NICEST); 
         kugelApp.setColoringAttributes(ca);
         
         tg.addChild(new Sphere(1.2f*SCALE, kugelApp));
         return tg;
     } 
     
    private Shape3D addBin(int w_int, int h_int, int d_int){
        float w = w_int*SCALE;
        float h = h_int*SCALE;
        float d = d_int*SCALE;
        
        
        /* LineArray zur Aufnahme des Koordinatensystems erzeugen         */
        LineArray kreuz = new LineArray(24,GeometryArray.COORDINATES
                                          | GeometryArray.COLOR_3);
    
        /* X-Achse in rot zeichnen                                        */
        kreuz.setCoordinate( 0, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 1, new Point3f(  w, 0.0f, 0.0f ));
        kreuz.setColor(0,new Color3f(Color.black));
        kreuz.setColor(1,new Color3f(Color.black));
    
        /* Y-Achse in gruen zeichnen                                      */
        kreuz.setCoordinate( 2, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 3, new Point3f(  0.0f,  h, 0.0f ));
        kreuz.setColor(2,new Color3f(Color.black));
        kreuz.setColor(3,new Color3f(Color.black));
    
        /* Z-Achse in blau zeichnen                                       */
        kreuz.setCoordinate( 4, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 5, new Point3f(  0.0f, 0.0f,  d ));
        kreuz.setColor(4,new Color3f(Color.black));
        kreuz.setColor(5,new Color3f(Color.black));
        
        /* X-Achse in rot zeichnen                                        */
        kreuz.setCoordinate( 6, new Point3f(  w, 0.0f, 0.0f ));
        kreuz.setCoordinate( 7, new Point3f(  w, 0.0f, d ));
        kreuz.setColor(6,new Color3f(Color.black));
        kreuz.setColor(7,new Color3f(Color.black));
    
        /* Y-Achse in gruen zeichnen                                      */
        kreuz.setCoordinate( 8, new Point3f(  w, 0.0f, 0.0f ));
        kreuz.setCoordinate( 9, new Point3f(  w,  h, 0.0f ));
        kreuz.setColor(8,new Color3f(Color.black));
        kreuz.setColor(9,new Color3f(Color.black));
    
        /* Z-Achse in blau zeichnen                                       */
        kreuz.setCoordinate( 10, new Point3f(  0.0f, 0.0f, d ));
        kreuz.setCoordinate( 11, new Point3f(  0.0f, h,  d ));
        kreuz.setColor(10,new Color3f(Color.black));
        kreuz.setColor(11,new Color3f(Color.black));
        
        /* X-Achse in rot zeichnen                                        */
        kreuz.setCoordinate( 12, new Point3f(  0.0f, 0.0f, d ));
        kreuz.setCoordinate( 13, new Point3f(  w, 0.0f, d ));
        kreuz.setColor(12,new Color3f(Color.black));
        kreuz.setColor(13,new Color3f(Color.black));
    
        /* Y-Achse in gruen zeichnen                                      */
        kreuz.setCoordinate( 14, new Point3f(  w, 0.0f, d ));
        kreuz.setCoordinate( 15, new Point3f(  w,  h, d ));
        kreuz.setColor(14,new Color3f(Color.black));
        kreuz.setColor(15,new Color3f(Color.black));
    
        /* Z-Achse in blau zeichnen                                       */
        kreuz.setCoordinate( 16, new Point3f(  0.0f, h, d ));
        kreuz.setCoordinate( 17, new Point3f(  0.0f, h,  0.0f ));
        kreuz.setColor(16,new Color3f(Color.black));
        kreuz.setColor(17,new Color3f(Color.black));
        
        /* X-Achse in rot zeichnen                                        */
        kreuz.setCoordinate( 18, new Point3f(  0.0f, h , d ));
        kreuz.setCoordinate( 19, new Point3f(  w, h, d ));
        kreuz.setColor(18,new Color3f(Color.black));
        kreuz.setColor(19,new Color3f(Color.black));
    
        /* Y-Achse in gruen zeichnen                                      */
        kreuz.setCoordinate( 20, new Point3f(  0.0f, h, 0.0f ));
        kreuz.setCoordinate( 21, new Point3f(  w,  h, 0.0f ));
        kreuz.setColor(20,new Color3f(Color.black));
        kreuz.setColor(21,new Color3f(Color.black));
    
        /* Z-Achse in blau zeichnen                                       */
        kreuz.setCoordinate( 22, new Point3f(  w, h, d ));
        kreuz.setCoordinate( 23, new Point3f(  w, h,  0.0f ));
        kreuz.setColor(22,new Color3f(Color.black));
        kreuz.setColor(23,new Color3f(Color.black));
        
        return new Shape3D(kreuz);
     }  
     
     private TransformGroup createCoordSystem(){
        TransformGroup transCoord = new TransformGroup();
        Color3f colBlack = new Color3f(Color.BLACK);
        Text2D textY = new Text2D("y", colBlack, "TimesNewRoman", 72, Font.BOLD);
        Text2D textX = new Text2D("x", colBlack, "TimesNewRoman", 72, Font.BOLD);
        Text2D textZ = new Text2D("z", colBlack, "TimesNewRoman", 72, Font.BOLD);
        
        Transform3D transformY = new Transform3D();
        transformY.setTranslation(new Vector3d (-0.075f, 6, 0));
        TransformGroup tgY = new TransformGroup();
        tgY.setTransform(transformY);
        tgY.addChild(textY);
        
        Transform3D transformX = new Transform3D();
        transformX.setTranslation(new Vector3d (6, -0.15f, 0));
        TransformGroup tgX = new TransformGroup();
        tgX.setTransform(transformX);
        tgX.addChild(textX);
        
        Transform3D transformZ = new Transform3D();
        transformZ.setTranslation(new Vector3d (-0.075f, -0.15f, 6));
        TransformGroup tgZ = new TransformGroup();
        tgZ.setTransform(transformZ);
        tgZ.addChild(textZ);
        transCoord.addChild( tgX);
        transCoord.addChild( tgY);
        transCoord.addChild( tgZ);
        
        return transCoord;
    }
    private Shape3D erzeugeKoordinatensystem(){
        /* LineArray zur Aufnahme des Koordinatensystems erzeugen         */
        LineArray kreuz = new LineArray(18,GeometryArray.COORDINATES
                                          | GeometryArray.COLOR_3);
        float length = 5.75f;
        float arrowLength = 0.1f;
        float arrowDiff = length - 1.5f*arrowLength;
        Color3f colorAxes = new Color3f(Color.black);
        /* X-Achse                                         */
        kreuz.setCoordinate( 0, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 1, new Point3f(  length, 0.0f, 0.0f ));
        kreuz.setColor(0,colorAxes);
        kreuz.setColor(1,colorAxes);
    
        /* Y-Achse                                      */
        kreuz.setCoordinate( 2, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 3, new Point3f(  0.0f,  length, 0.0f ));
        kreuz.setColor(2,colorAxes);
        kreuz.setColor(3,colorAxes);
    
        /* Z-Achse                                       */
        kreuz.setCoordinate( 4, new Point3f(  0.0f, 0.0f, 0.0f ));
        kreuz.setCoordinate( 5, new Point3f(  0.0f, 0.0f,  length ));
        kreuz.setColor(4,colorAxes);
        kreuz.setColor(5,colorAxes);
        kreuz.setCoordinate( 6, new Point3f(  0.0f, 0.0f,  length ));
        kreuz.setCoordinate( 7, new Point3f(  0.0f, arrowLength,  arrowDiff ));
        kreuz.setCoordinate( 8, new Point3f(  0.0f, 0.0f,  length ));
        kreuz.setCoordinate( 9, new Point3f(  0.0f, -arrowLength,  arrowDiff ));
        kreuz.setCoordinate( 10, new Point3f(  0.0f, length, 0.0f ));
        kreuz.setCoordinate( 11, new Point3f(  arrowLength, arrowDiff, 0.0f  ));
        kreuz.setCoordinate( 12, new Point3f(  0.0f, length, 0.0f ));
        kreuz.setCoordinate( 13, new Point3f(  -arrowLength, arrowDiff, 0.0f ));
        kreuz.setCoordinate( 14, new Point3f(  length, 0.0f, 0.0f ));
        kreuz.setCoordinate( 15, new Point3f(  arrowDiff, arrowLength, 0.0f  ));
        kreuz.setCoordinate( 16, new Point3f(  length, 0.0f, 0.0f ));
        kreuz.setCoordinate( 17, new Point3f(  arrowDiff, -arrowLength, 0.0f ));
        
        return new Shape3D(kreuz);
     }  
     private Color3f getColor(){
      counter++;   
      Color3f col = new Color3f();
      
      switch(counter % 6){
        case 1:
            return col = new Color3f(Color.red);
        case 2:
            return col = new Color3f(Color.blue);
        case 3:
            return col = new Color3f(Color.yellow);
        case 4:
            return col = new Color3f(Color.green);
        case 5:
            return col = new Color3f(Color.gray);
        case 6:
            return col = new Color3f(Color.cyan);
        case 7:
            return col = new Color3f(Color.orange);
        case 8: 
            return col = new Color3fColor.darkgray);
        case 9:
            return col = new Color3fColor.lightgray);
        default:
            return col = new Color3f(Color.cyan);
        } 
    }
    
    /*
    public void saveimage() {
         BufferedImage onimage = new Robot().createScreenCapture( new Rectangle( 5, 25, 1280, 725));
        
         File file = new File("screencapture.jpg"); 
         ImageIO.write(onimage, "jpg", file);
        

    }
    */
} 