
/**
 * ##### # ########### ## ##### ################# ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class ModularArithmetic
{
    private int n, p;
    
    /** Create an instance that can encrypt using someone elses public key. */
    public ModularArithmetic(long newn, long newp) {
        n = newn;
        p = newp;
    }
    public ModularArithmetic(int newn, int newp) {
        n = newn;
        p = newp;
    }
    /** Encrypt the given plaintext message. */
    public static String encrypt(String message) {
        String nletter = "";
        for (int x=0;x<message.length();x++){
            int y = equivalenceToNumber(message.charAt(x));
            int w = (y*n)%p;
            nletter += equivalenceToLetter(w);
        }
        return nletter;
    }
    /** Decrypt the given ciphertext message. */
    public static String decrypt(long message) {
        
        return "message";
    }
    public static long convertToASCII(String message){
        long result = 0;
        for (int x=0;x<message.length();x++){
            char caracter = message.charAt(x);
            result = (int)caracter;            int y = equivalence
        }
        return result;
    }
    /** Euclide's algorithm */
    public static int gcd(int p, int q) {
        if (q == 0) return p;
        else return gcd(q, p % q);
    }
    /** Inverse */
    public static int inverse(int a, int b)
    {
    	int b0 = b, t, q;
    	int x0 = 0, x1 = 1;
    	if (b == 1) return 1;
    	while (a > 1) {
    		q = a / b;
    		t = b; b = a % b; a = t;
    		t = x0; x0 = x1 - q * x0; x1 = t;
    	}
    	if (x1 < 0) x1 += b0;
    	return x1;
    }
    /** Equivalences to number*/
    public static int equivalenceToNumber(char i){
        int number = 0;
        switch(i){
            case "A": number=0; break;
            case "B": number=1; break;
            case "C": number=2; break;
            case "D": number=3; break;
            case "E": number=4; break;
            case "F": number=5; break;

            case "G": number=6; break;
            case "H": number=7; break;
            case "I": number=8; break;
            case "J": number=9; break;
            case "K": number=10; break;
            case "L": number=11; break;
            
            case "M": number=12; break;
            case "N": number=13; break;
            case "Ñ": number=14; break;
            case "O": number=15; break;
            case "P": number=16; break;
            case "Q": number=17; break;
            
            case "R": number=18; break;
            case "S": number=19; break;
            case "T": number=20; break;
            case "U": number=21; break;
            case "V": number=22; break;
            case "W": number=23; break;
            case "X": number=24; break;
            case "Y": number=25; break;
            case "Z": number=26; break;
                        
            default: break;
        }
        return letter;
    }
    /** Equivalences to letter*/
    public static char equivalenceToLetter(int i){
        char letter = "";
        switch(i){
            case 0: letter="A"; break;
            case 1: letter="B"; break;
            case 2: letter="C"; break;
            case 3: letter="D"; break;
            case 4: letter="E"; break;
            case 5: letter="F"; break;
            
            case 6: letter="G"; break;
            case 7: letter="H"; break;
            case 8: letter="I"; break;
            case 9: letter="J"; break;
            case 10: letter="K"; break;
            case 11: letter="L"; break;
            
            case 12: letter="M"; break;
            case 13: letter="N"; break;
            case 14: letter="Ñ"; break;
            case 15: letter="O"; break;
            case 16: letter="P"; break;
            case 17: letter="Q"; break;
            
            case 18: letter="R"; break;
            case 19: letter="S"; break;
            case 20: letter="T"; break;
            case 21: letter="U"; break;
            case 22: letter="V"; break;
            case 23: letter="W"; break;
            case 24: letter="X"; break;
            case 25: letter="Y"; break;
            case 26: letter="Z"; break;
            
            default: break;
        }
        return letter;
    }
    /** Principal */
    public static void main(String[] args) {
        /*if(x === 1){
            for(int i=0; x<)
        }else
            System.out.println("Por favor cambie de números seleccionados no podrán ser descifrados");*/
        ModularArithmetic m = new ModularArithmetic(7,26);
        
        System.out.println(m.encrypt("A"));
    }
}