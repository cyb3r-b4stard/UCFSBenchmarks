/**
 * ###### ### ### ##### ###### ### #### ###### ## # ### ####.
 * 
 * @###### #### ######## #### 
 */
import edu.duke.*;
import java.io.*;

public class URLFinder {
    public int findStopIndex(String dna, int index){
        int stop1 = dna.indexOf("tga", index);
            if(stop1 == -1 || (stop1-index) % 3 != 0){
                stop1 = dna.length();
            }
            int stop2 = dna.indexOf("taa", index);
            if(stop2 == -1 || (stop2-index) % 3 != 0){
                stop2 = dna.length();
            }
            int stop3 = dna.indexOf("tag", index);
            if(stop3 == -1 || (stop3-index) % 3 != 0){
                stop3 = dna.length();
            }
            return Math.min(stop1, Math.min(stop2, stop3));
    
    }
        public String findProtein(String dna){
            int start = dna.indexOf("atg");
                if(start == -1){
                    return "";
                }
                int stop = dna.indexOf("tag", start+3);
                    if((stop-start) %3 == 0){
                        return dna.substring(start, stop+3);
                    }
                    else
                    return "";
        }
    public void printAll(String dna){
        int start = 0;
        while(true){
            int tag = dna.indexOf("atg", start);
            if(tag == -1){
                break;
            }
            int end = findStopIndex(dna, tag+3);
            if(end != dna.length()){
                System.out.println(dna.substring(tag, end+3));
                    start = end + 3;
            }
            else
                start = start+3;
        }
    }

  /*  public StorageResource findURLs(String url) {
        URLResource page = new URLResource(url);
        String source = page.asString();
        StorageResource store = new StorageResource();
        int start = 0;
        while (true) {
            int index = source.indexOf("href=", start);
            if (index == -1) {
                break;
            }
            int firstQuote = index+6; 
            int endQuote = source.indexOf("\"", firstQuote);
            String sub = source.substring(firstQuote, endQuote);
            if (sub.startsWith("http")) {
                store.add(sub);
            }
            start = endQuote + 1;
        }
        return store;
    }

    public void testURL() {
        StorageResource s1 = findURLs("https:
        StorageResource s2 = findURLs("http:
        for (String link : s2.data()) {
        System.out.println(link);
        }
        System.out.println("size = " + s1.size());
        System.out.println("size = " + s2.size());
}*/
    public void realTesting(){
        DirectoryResource dr = new DirectoryResource();
            for(File f : dr.selectedFiles()){
                FileResource fr = new FileResource(f);
                String s = fr.asString();
                System.out.println("read" + s.length() + "characters");
                String result = findProtein(s);
                System.out.println("found" + result);
            }
    }
public StorageResource storeAll(String dna){
        int start = 0;
        StorageResource store = new StorageResource();
        while(true){
            int tag = dna.indexOf("atg", start);
            if(tag == -1){
                break;
            }
            int end = findStopIndex(dna, tag+3);
            if(end != dna.length()){
                store.add(dna.substring(tag, end+3));
                    start = end + 3;
            }
            else
                start = start+3;
        }
       return store;
    }
    public void testStorageFinder(){
        DirectoryResource dr = new DirectoryResource();
            for(File f : dr.selectedFiles()){
                FileResource fr = new FileResource(f);
                String s = fr.asString();
                System.out.println("read" + s.length() + "characters");
                String result = storeAll(s);
                System.out.println("found" + result);
    }
}

/*public void storeAll(String dna){
        int start = 0;
        while(true){
            int tag = dna.indexOf("atg", start);
            if(tag == -1){
                break;
            }
            int end = findStopIndex(dna, tag+3);
            if(end != dna.length()){
                    start = end + 3;
            }
            else
                start = start+3;
        }
    }*/