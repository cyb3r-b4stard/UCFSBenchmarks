
/**
 * ## ##### # ###### ### ## #### ### ##### ######
 * @######  ####### #######
 * @####### #: #### ##, ####        
 * @####### #: #### ##, ####
 *  ##### ####### ######## ####
 *  ####### ###### ######, ### ###### ### ### ###### ###### 
 * @####### #: ### ##, ####
 *  ##### #### ####
 */
public class Person
{
    private String firstName;    
    private String lastName;
    private String emailAddress;
    BirdList lifeList= new BirdList("Life list");
    /**
     * @param firstName the person's first Name
     * @param lastName the person's last Name
     * @param emailAddress the person's email 
     * @param lifeList the person's life list
     */
    public Person( final String firstName,   
    final String lastName,  
    final String emailAddress){
        if (okayName(firstName)&&
        (okayName(lastName)){
        this.firstName = new String(firstName); 
        this.lastName = new String(lastName);
        this.emailAddress = new String(emailAddress); 
    }
    }
    /**
     * Checks for bad data for first and last name
     */
    public boolean okayNakme(){
        
    }
    /**
     * @param firstName the person's first Name
     * @param lastName the person's last Name
     * no email parameter
     */
    public Person (final String firstName,
    final String lastName ){
        this.firstName=new String(firstName);
        this.lastName = new String(lastName);
        this.emailAddress = "";
        BirdList lifeList = new BirdList("Life list");
    }

    /**
     * This creates the a nullary constructor. 
     */
    public Person(){
        this.firstName = "";
        this.lastName = "";
        this.emailAddress = "";
    }

    /**
     * getter for an instance varible
     * @firstName
     */
    public String getFirstName(){
        return firstName;
    }

    /**
     * getter for an instance varible
     * @return lastName
     */
    public String getLastName(){
        return lastName;
    }   

    /**
     * getter for an instance varible 
     * @return emailAddress
     */
    public String getEmailAddress(){
        return emailAddress;
    }

    /**
     * setter for a varible
     * @param firstName the value of the instance varible
     */
    public void setFirstName(final String firstName){
        this.firstName = new String (firstName);
    }

    /**
     * setter for a varible
     * @param lastName  the new value of the instance varible
     */
    public void setLastName (final String lastName){
        this.lastName = new String (lastName);
    }

    /**
     * setter for a varible
     * @param emailaddress  the new value of the instance varible
     */
    public void setEmailAddress(final String emailAddress){
        this.emailAddress = new String(emailAddress);
    }

    /**
     * Creates a human readable string for an object
     * @return  a human readle string of the object.
     */
    public String  toString(){
        String results = "" ;
        if(firstName.length() > 0)
            results += "First Name: "+ firstName;
        if(lastName.length() > 0)
            results += " Last Name: " + lastName;
        if(emailAddress.length() > 0)
            results += " Email address: " + emailAddress; 
            results += " Life list size: " + lifeList.size(); 
        return results;
    }

    /**
     * test for Person is the same by test both first and last name
     * @param o The Object to be compared against the current Object
     * @return true if both first and last name are equal
     */
    public boolean equals(Object o) {
        boolean result = false;
        if (o instanceof Person) {
            Person p = (Person) o;
            result = this.firstName.equals(p.getFirstName()) &&
            this.lastName.equals(p.getLastName());

        }return result;

    }
}