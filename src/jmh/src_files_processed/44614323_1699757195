/**
 *  #### ##### ## ### ####### ##### ## ### "##### ## ####" ###########. 
 *  "##### ## ####" ## # #### ######, #### ##### ###### ####.  ##### 
 *  ### #### ###### #### #####. ####'# ###. ## ###### ###### ## ######## 
 *  ## #### ## #### ###########!
 * 
 * @######  ####### #######, ##### #. ###### ### #### ######
 * @####### ##/#/####
 */

public class Game 
{
    private Room currentRoom;
    private boolean finished;
        private Room gameWin;
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        finished = false;
        createRooms();
    }

    /**
     * Create all the rooms and link their exits together.
     */
    private void createRooms()
    {
        Room front, hall, kitchen, livingroom, garden, cloakroom, stairs, bathroom, 
            master, ensuite, guest;
            
        front = new Room("in front of the house");
        hall = new Room("in the hallway");
        kitchen = new Room("in the kitchen");
        livingroom = new Room("in the livingroom");
        garden = new Room("in the garden");
        cloakroom = new Room("in the cloakroom");
        stairs = new Room("at the top of the stairs");
        bathroom = new Room("in the bathroom");
        master = new Room("in the master bedroom");
        ensuite = new Room("in the ensuite");
        guest = new Room("in the guest bedroom");
        
        
        front.setExit(Direction.NORTH, hall);
        hall.setExit(Direction.SOUTH, front);
        hall.setExit(Direction.UP, stairs);
        hall.setExit(Direction.WEST, cloakroom);
        hall.setExit(Direction.EAST, kitchen);
        hall.setExit(Direction.NORTH, livingroom);
        kitchen.setExit(Direction.WEST, hall);
        kitchen.setExit(Direction.NORTH, livingroom);
        cloakroom.setExit(Direction.EAST, hall);
        livingroom.setExit(Direction.SOUTH, hall);
        livingroom.setExit(Direction.EAST, kitchen);
        livingroom.setExit(Direction.NORTH, garden);
        garden.setExit(Direction.SOUTH, livingroom);
        stairs.setExit(Direction.DOWN, hall);
        stairs.setExit(Direction.EAST, bathroom);
        stairs.setExit(Direction.SOUTH, guest);
        stairs.setExit(Direction.NORTH, master);
        bathroom.setExit(Direction.WEST, stairs);
        guest.setExit(Direction.NORTH, stairs);
        master.setExit(Direction.SOUTH, stairs);
        master.setExit(Direction.EAST, ensuite);
        ensuite.setExit(Direction.WEST, master);
            
        currentRoom = front;  
        gameWin = ensuite;
    }
    
    /**
     * Return whether the game has finished or not.
     */
    public boolean finished()
    {
        return finished;
    }
    
   
    /**
     * Opening message for the player.
     */
    public String welcome()
    {
        return "\nWelcome to the World of Home!\n" +
            "World of Home is a new game.\n" +
            currentRoom.getLongDescription() + "\n";
    }



    /**
     * Give some help information.
     */
    public String help() 
    {
        return "You are lost. You are alone. You wander around the home.\n";
    }

    /** 
     * Try to go in one direction. If there is an exit, enter the new
     * room and return its long description; otherwise return an error message.
     * @param direction The direction in which to go.
     * Pre-condition: direction is not null.
     */
    public String goRoom(Direction direction) 
    {
        assert direction != null : "Game.goRoom gets null direction";

        Room nextRoom = currentRoom.getExit(direction);
        
        if (nextRoom == gameWin){
            return "Well done! You won!!";
        }

        if (nextRoom == null) {
            return "There is no exit in that direction!";
        }
        else {
            currentRoom = nextRoom;
            return currentRoom.getLongDescription();
        }
    }
    
     public void timeLimit()
    {
         exits.keySet() = 0++;
        for(exits.keySet() == 12)
        {
            System.out.println("Game over");
        }
        
    }

    
    /**
     * Execute quit command.
     */
    public String quit()
    {
        finished = true;
        return "Thank you for playing.  Good bye.";
    }
    
}