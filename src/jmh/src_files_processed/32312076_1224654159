import java.util.ArrayList;

/**
 * ###. #. ####### ###### ####### ######## # ####### #### ######## ### ##### ## ####### 
 *         ## ## ######### ## ####### #######
 *         
 * @###### #### ########
 * @####### #.#
 */
public class Roster
{
    
    static ArrayList <Student> roster = new ArrayList<>();
    /** 
     * Add student
     * @param studentID Student's ID
     * @param firstName Student's First Name
     * @param lastName Student's Last Name
     * @param emailAddress Student's e-mail
     * @param age Student's age
     * @param grade1 First grade
     * @param grade2 Second grade
     * @param grade3 Third grade
     * 
     * B3a. A public static void add() method is provided in the student roster program.
     *      The method sets all of the instance variables and updates the roster.
     * 
     * @param student Student object's settings are added
     */
    public static void add(String studentID, String firstName, String lastName, String emailAddress, 
        int age, int grade1, int grade2, int grade3)
    {
        Student student = new Student(studentID, firstName, lastName, 
        emailAddress, age, grade1, grade2, grade3);
        
        roster.add(student);
    } 
    public static void main(String[] args)
    {
        String[] students = {  "1,John,Smith,John1989@gmail.com,20,88,79,59",
                            "2,Suzan,Erickson,Erickson_1990@gmail.com,19,91,72,85",
                            "3,Jack,Napoli,The_lawyer99yahoo.com,19,85,84,87", 
                            "4,Erin,Black,Erin.black@comcast.net,22,91,98,82",
                            "5,Eric,Hoogland,ehoogla@wgu.edu,53,0,1,99"
                            };
        Roster roster = new Roster();  
        for (int i = 0; i < students.length; i++)
            {
            String delim = "[,]";
            String s = students[i];   
            String[] tokens = s.split(delim);
            studentID = tokens[0];
            firstName = tokens[1]; 
            lastName = tokens[2];
            emailAddress = tokens[3];
            age = Integer.parseInt(tokens[4]);
            grade1 = Integer.parseInt(tokens[5]); 
            grade2 = Integer.parseInt(tokens[6]);
            grade3 = Integer.parseInt(tokens[7]);
            }
            roster.add(studentID,firstName, lastName,email,age,grade1,grade2,grade3);
        }    
        /** Req. B3. Calls to methods described in B3, subparts b, c, d, and e */
       
           void roster(print_all());
           
            void roster(print_invalid_emails());
            /** Routine prints a table with the students' IDs and averages */
            
            System.out.println("Student ID\tAverage");
            ArrayList<Student> students = roster.getRoster();
          
            for (Student student : students)
            {
            System.out.print(student.getStudentID() + "\t" + student.getGrades());
            
            print_average_grade(student.getStudentID());
            System.out.print("\n");
            }
            roster.remove("3");
            roster.remove("3");
    }
    /**  
     * Public accessor method
     * @return ArrayList of students
     */
       public ArrayList<Student> getRoster()
       {
           return roster;
       }
    /**
     * Req. B3b. A public static void remove(studentID) method is  
     * provided that removes students from the roster by student ID.
     * 
     * Remove student from roster by student ID
     * @param  studentID the studentID of the student to remove
     */
    studentIDIx = (int)(String studentID + 1)
    public static void remove(int studentIDIx))
    {
        boolean found = false;
        for (student : roster)
        {
            Student student = roster.get(i);
           
            /**   Match the current student's ID with the parameter ID;  */ 
                   
            if (student.getStudentID().equals(studentID))
            {
                /** remove student from roster */
                found = true;
                roster.remove(i);
                System.out.print("An instance of Student ID " + studentID + " has now been removed.\n"); 
            }
            if (!found)
            System.out.print("Error: No student found with this student ID: " + studentID + "\n");
        }
    }
    /**
     * Req. B3c. [P]ublic static void print_all() prints a complete 
     *           tab-separated list of student data using accessor methods
     */
    public static void print_all()
    {
       /**   Calls print(String parameter) method in Student  */ 
       for (Student student : roster)
       {
             student.print("studentID");
             System.out.print("\tFirst Name: " );
             student.print("firstName");
             System.out.print("\tLast Name: ");
             student.print("lastName");
             System.out.print("\tE-mail Address: ");
             student.print("emailAddress");
             System.out.print("\tAge: ");
             System.out.print("\tGrades: ");
             student.print("grades");
             System.out.print("\n");
       }
   }     
    /** Prints the average of the student's grades
     * 
     * @param studentID 
     */        
   public static void print_average_grade (String studentID)
   {
      for (Student student : roster)
      {
          for (int i = 0; i < roster.size(); i++)
          {
                  if (student.getStudentID().equals("studentID"))
                  {
                  int[] grades = student.getGrades();
                  int average = (grades[0] + grades[1] + grades[2]) / 3;
                  System.out.print(average);
                  }
           }
      }
   }
   /**
    * @param studentID
    * 
    * Req. B3e. [P]ublic static void print_invalid_emails(): 
    *           (i)verifies student e-mail addressses
    *           (ii) displays all invalid e-mail addresses to the user
    */  
   public static void print_invalid_emails()
   {
      for (Student student : roster)
      {
          String emailAddress = student.getEmailAddress();
          boolean at = false;
          boolean dot = false;
          boolean space = true;
          if (emailAddress.indexOf("@") > -1)
          at = true;
          if (emailAddress.indexOf(".") > -1)
          dot = true;
          if (emailAddress.indexOf(" ") > -1)
          space = false;
          
          if (!at || !dot || space) 
          System.out.print("Invalid email address found for student ID ");
          System.out.print(student.getStudentID() + ": " + emailAddress);
      }
   }
}
