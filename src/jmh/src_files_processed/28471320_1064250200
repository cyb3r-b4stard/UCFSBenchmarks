
import java.awt.Color;

import edu.kzoo.grid.Location;
import edu.kzoo.grid.ColorBlock;
import edu.kzoo.grid.PictureBlock;
import edu.kzoo.grid.TextCell;

/**
 *  ######### #######:<##>
 *
 * ### ############ ##### (#### ####?)
 * <##> <##>
 * #######: <##>
 *   # ### ####,  ##### #####<##>
 * <##>
 * #############: <##>
 *   # ### ####,  ##### #######, ####### ## ### ################<##>
 *   # ### ####,  ##### #######, ####### ## ### ##########<##>
 *   ## ### ####, ###### ######, ######## ## ###### ######### #### #### ####  ########### <##>
 * 
 * @###### (#### ####) (#### ########## ####)
 * @####### (# ####### ###### ## # ####)
 */
public class HistogramLab
{
    private static final int MAX_VALUE = 1000;

    /**
     *  Start the Histogram program.
     *  The String arguments (args) are not used in this application.
     **/
    public static void main(String[] args)
    {
        System.out.println("This will be a program that draws a histogram.");
        int NUM_ITERATIONS = ValidatedInputReader.getInteger("Enter the number of times you want the simlulation to run (Between and including 10 and 1000): ", 10, MAX_VALUE, 1000, "Enter a number between 10 and 2000");

        int [] intList = new int[7];

for (int i = 0; i < intList.length; i++)
{
    intList[i]= 0;
}
        
 
        
        
        Coin coin1 = new Coin();
        for (int i = 0; i < NUM_ITERATIONS; i++)
        {
            int location = 0;
            for (int b = 0; b < 6; b++)
            {        

                coin1.toss();
                if (coin1.heads() == true)
                {
                    location++;
                }
                else if (coin1.tails() == true)
                {
                    location--;
                }
            }
            intList[(location + 6) / 2]++;
        }

        SimpleGrid grid = new SimpleGrid(7, NUM_ITERATIONS);
        SimpleGridObjectGUI display = new SimpleGridObjectGUI(grid,
                "Tanush Samson", "Kelly Schultz",
                "19 January 2016");
                
                
                for (int i = 0; i < NUM_ITERATIONS; i += 10)
        {
            TextCell columnLabel = new TextCell(i + "");
            grid.add(columnLabel, 0, i + 4);
        }
        TextCell firstLabel = new TextCell("-6");
        grid.add(firstLabel, 2, 2);

        TextCell secondLabel = new TextCell("-4");
        grid.add(secondLabel, 4, 2);

        TextCell thirdLabel = new TextCell("-2");
        grid.add(thirdLabel, 6, 2);

        TextCell fourthLabel = new TextCell("0");
        grid.add(fourthLabel, 8, 2);

        TextCell fifthLabel = new TextCell("2");
        grid.add(fifthLabel, 10, 2);

        TextCell sixthLabel = new TextCell("4");
        grid.add(sixthLabel, 12, 2);

        TextCell seventhLabel = new TextCell("6");
        grid.add(seventhLabel, 14, 2);

        for (int n = 0; n < intList.length; n++)         
        {
        for (int j = 0; j < intList[i]; j ++)
            {
                ColorBlock redBlock = new ColorBlock(Color.RED);
                
                grid.add(redBlock, (i + 1) * 2, (4 + j));
            
                display.showGrid();
    }

}


        System.out.println("Done.");
        ]