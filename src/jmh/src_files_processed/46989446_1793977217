
/**
 *
 * @###### (####### ####### # #######)
 * @####### #.############### :) --> ####.###(####.##-######.###_#####)
 */
class MaquinaSandwich {

    static final int CANTIDAD_BASE_QUESO = 15;
    static final int CANTIDAD_BASE_MORTADELA_JAMON = 0;
    
     static final int CANTIDAD_BASE_PAN = 1;

    int cantidadQueso;
    int cantidadMortadela;
    int cantidadJamon;
    int cantidadPanBlanco;
    int cantidadPanIntegral;

    int precioCompraQueso;
    int precioCompraMortadela;
    int precioCompraJamon;
    int precioCompraPanBlanco;
    int precioCompraPanIntegral;

    int ingresosPorVentas;
    int precio;
    int calcular;
    int centinela;
    /*Recuerde que no necesita declarar propiedades adicionales*/

    /**
     * Constructor que se encarga de inicializar la máquina con la cantidad de cada ingrediente
     */
    MaquinaSandwich() {
     cantidadQueso=1000;
     cantidadMortadela=2000;
     cantidadJamon=2000;
     cantidadPanBlanco=200;
     cantidadPanIntegral=200;
     precio=1000;
    }

    /**
     * Constructor que se encarga de inicializar la máquina con los precios de compra de los ingredientes
     */
    MaquinaSandwich(int precioCompraQueso, int precioCompraMortadela, int precioCompraJamon, int precioCompraPanBlanco, int precioCompraPanIntegral) {
        this();
       /*COMPLETE*/
       precioCompraQueso=precioCompraQueso;
       precioCompraMortadela=precioCompraMortadela;
       precioCompraJamon=precioCompraJamon;
       precioCompraPanBlanco=precioCompraPanBlanco;
       precioCompraPanIntegral=precioCompraPanIntegral;
    }

    /**
     * Método que calcula el costo de fabricación. Recibe el tipo de sandwich (1,2,3,4,5 y 6) y el tipo de pan (1 y 2)
     */
    public int calcularCostoFabricacion(int tipoSandwich, int tipoPan) {
        if( (tipoSandwich==1 && tipoPan==2) || (tipoSandwich==2 && tipoPan==1)){precio=(((1000+100)*35)/100)1000+100;}
        if( tipoSandwich==2 && tipoPan==2){precio=(((1000+200)*35)/100)1000+200;}
        if( tipoSandwich==2 && tipoPan==2){precio=1000+200;}
        if( tipoSandwich==2 && tipoPan==2){precio=1000+1000;}
        if(tipoSandwich==3 && tipoPan==2 || tipoSandwich==4 && tipoPan==1){precio=1000+1200;}
        if( tipoSandwich==4 && tipoPan==2){precio=1000+1400;}
        if( tipoSandwich==5 && tipoPan==1){precio=1000+2000;}
        if(tipoSandwich==5 && tipoPan==2 || tipoSandwich==6 && tipoPan==1){precio=1000+2300;}
        if( tipoSandwich==6 && tipoPan==2){precio=1000+2600;}
       
        return precio;
    }
    
    /**
     * Método que calcula el precio de venta. Recibe el tipo de sandwich (1,2,3,4,5 y 6) y el tipo de pan (1 y 2)
     * ...Se supone que éste método debe invocar al método anterior...
     */
    public int calcularPrecioVenta(int tipoSandwich, int tipoPan) {
       precio=calcularCostoFabricacion(tipoSandwich,tipoPan);
       calcular=(precio*35)/100;
       return calcular;
    }
    
    /**
     * Registra la venta de un sandwich. Recibe el tipo de sandwich (1,2,3,4,5 y 6) y el tipo de pan (1 y 2)
     */
    public void registrarVenta(int tipoSandwich, int tipoPan) {
        calcular=calcularPrecioVenta(tipoSandwich,tipoPan);
        if(tipoSandwich==1){
           if(cantidadQueso>=15 || cantidadMortadela>=10 ){cantidadQueso=cantidadQueso-15; cantidadMortadela=cantidadMortadela-10;}
           else{centinela=1;}
           if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=1)
           {
            cantidadPanBlanco=cantidadPanBlanco-1;
            ingresosPorVentas= ingresosPorVentas+calcular;
           }
           else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=1){  cantidadPanIntegral=cantidadPanIntegral-1;}
           else throw new RuntimeException("error");}
              if(tipoSandwich==2){
               if(cantidadQueso>=15 || cantidadJamon>=10 ){cantidadQueso=cantidadQueso-15; cantidadJamon=cantidadJamon-10;}
               else{centinela=1;}
               if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=1)
               {
                cantidadPanBlanco=cantidadPanBlanco-1;
               ingresosPorVentas= ingresosPorVentas+calcular;
               }
               else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=1){  cantidadPanIntegral=cantidadPanIntegral-1;}
               else throw new RuntimeException("error");}  
        if(tipoSandwich==3){
               if(cantidadQueso>=30 || cantidadJamon>=10 ){cantidadQueso=cantidadQueso-30; cantidadMortadela=cantidadMortadela-20;}
               else{centinela=1;}
               if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=2)
               {
                cantidadPanBlanco=cantidadPanBlanco-2;
              ingresosPorVentas= ingresosPorVentas+calcular;
               }
               else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=2){  cantidadPanIntegral=cantidadPanIntegral-2;}
               else throw new RuntimeException("error");} 
             if(tipoSandwich==4){
               if(cantidadQueso>=30 || cantidadJamon>=20 ){cantidadQueso=cantidadQueso-30; cantidadJamon=cantidadJamon-20;}
               else{centinela=1;}
               if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=2)
               {
                cantidadPanBlanco=cantidadPanBlanco-2;
               ingresosPorVentas= ingresosPorVentas+calcular;
               }
               else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=2){  cantidadPanIntegral=cantidadPanIntegral-2;}
               else throw new RuntimeException("error");}  
        if(tipoSandwich==5){
           if(cantidadQueso>=45 || cantidadMortadela>=30 ){cantidadQueso=cantidadQueso-45; cantidadMortadela=cantidadMortadela-30;}
           else{centinela=1;}
           if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=3)
           {
            cantidadPanBlanco=cantidadPanBlanco-3;
           ingresosPorVentas= ingresosPorVentas+calcular;
           }
           else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=3){  cantidadPanIntegral=cantidadPanIntegral-3;}
           else throw new RuntimeException("error");}
            if(tipoSandwich==6){
               if(cantidadQueso>=45 || cantidadJamon>=30 ){cantidadQueso=cantidadQueso-45; cantidadJamon=cantidadJamon-30;}
               else{centinela=1;}
               if(tipoPan==1 && centinela!=1 && cantidadPanBlanco>=3)
               {
                cantidadPanBlanco=cantidadPanBlanco-3;
              ingresosPorVentas= ingresosPorVentas+calcular;
               }
               else if(tipoPan==2 && centinela!=1 && cantidadPanIntegral>=3){  cantidadPanIntegral=cantidadPanIntegral-3;}
               else throw new RuntimeException("error");}  
        }
       

       
    

    /**
     * Calcula y retorna el valor en pesos el IVA sobre el total de ingresos por ventas
     */
    public int getIVA() {
       /*COMPLETE*/
       ingresosPorVentas=ingresosPorVentas+((ingresosPorVentas*19)/100);
       return ingresosPorVentas;
    }

    /**
     * Calcula y retorna el valor en pesos de los costos fijos sobre el total de ingresos por ventas
     */
    public int getCostosFijos() {
      
       ingresosPorVentas=ingresosPorVentas+((ingresosPorVentas*5)/100);
       return ingresosPorVentas; 
    }

    
    /**
     * Calcula y retorna el valor en pesos de los riesgos sobre el total de ingresos por ventas
     */
    public int getRiesgos() {
       ingresosPorVentas=ingresosPorVentas+((ingresosPorVentas*1)/100);
       return ingresosPorVentas;
    }

    
    /**
     * Calcula y retorna el valor en pesos de la ganancia neta sobre el total de ingresos por ventas
     */
    public int getGananciaNeta() {
       ingresosPorVentas=ingresosPorVentas+((ingresosPorVentas*10)/100);
       return ingresosPorVentas;
    }
    
    /*COMPLETE LOS METODOS GET/SET DE LAS PROPIEDADES*/

    /**Metodo de acceso a la propiedad CANTIDAD_BASE_QUESO*/
    public int getCANTIDAD_BASE_QUESO(){
        return this.CANTIDAD_BASE_QUESO;
    }

  
    /**Metodo de acceso a la propiedad CANTIDAD_BASE_MORTADELA_JAMON*/
    public int getCANTIDAD_BASE_MORTADELA_JAMON(){
        return this.CANTIDAD_BASE_MORTADELA_JAMON;
    }

  
    /**Metodo de acceso a la propiedad CANTIDAD_BASE_PAN*/
    public int getCANTIDAD_BASE_PAN(){
        return this.CANTIDAD_BASE_PAN;
    }

    /**Metodo de modificación a la propiedad CANTIDAD_BASE_PAN*/
  
    /**Metodo de acceso a la propiedad cantidadQueso*/
    public int getCantidadQueso(){
        return this.cantidadQueso;
    }

    /**Metodo de modificación a la propiedad cantidadQueso*/
    public void setCantidadQueso(int cantidadQueso){
        this.cantidadQueso = cantidadQueso;
    }

    /**Metodo de acceso a la propiedad cantidadMortadela*/
    public int getCantidadMortadela(){
        return this.cantidadMortadela;
    }

    /**Metodo de modificación a la propiedad cantidadMortadela*/
    public void setCantidadMortadela(int cantidadMortadela){
        this.cantidadMortadela = cantidadMortadela;
    }

    /**Metodo de acceso a la propiedad cantidadJamon*/
    public int getCantidadJamon(){
        return this.cantidadJamon;
    }

    /**Metodo de modificación a la propiedad cantidadJamon*/
    public void setCantidadJamon(int cantidadJamon){
        this.cantidadJamon = cantidadJamon;
    }

    /**Metodo de acceso a la propiedad cantidadPanBlanco*/
    public int getCantidadPanBlanco(){
        return this.cantidadPanBlanco;
    }

    /**Metodo de modificación a la propiedad cantidadPanBlanco*/
    public void setCantidadPanBlanco(int cantidadPanBlanco){
        this.cantidadPanBlanco = cantidadPanBlanco;
    }

    /**Metodo de acceso a la propiedad cantidadPanIntegral*/
    public int getCantidadPanIntegral(){
        return this.cantidadPanIntegral;
    }

    /**Metodo de modificación a la propiedad cantidadPanIntegral*/
    public void setCantidadPanIntegral(int cantidadPanIntegral){
        this.cantidadPanIntegral = cantidadPanIntegral;
    }

    /**Metodo de acceso a la propiedad precioCompraQueso*/
    public int getPrecioCompraQueso(){
        return this.precioCompraQueso;
    }

    /**Metodo de modificación a la propiedad precioCompraQueso*/
    public void setPrecioCompraQueso(int precioCompraQueso){
        this.precioCompraQueso = precioCompraQueso;
    }

    /**Metodo de acceso a la propiedad precioCompraMortadela*/
    public int getPrecioCompraMortadela(){
        return this.precioCompraMortadela;
    }

    /**Metodo de modificación a la propiedad precioCompraMortadela*/
    public void setPrecioCompraMortadela(int precioCompraMortadela){
        this.precioCompraMortadela = precioCompraMortadela;
    }

    /**Metodo de acceso a la propiedad precioCompraJamon*/
    public int getPrecioCompraJamon(){
        return this.precioCompraJamon;
    }

    /**Metodo de modificación a la propiedad precioCompraJamon*/
    public void setPrecioCompraJamon(int precioCompraJamon){
        this.precioCompraJamon = precioCompraJamon;
    }

    /**Metodo de acceso a la propiedad precioCompraPanBlanco*/
    public int getPrecioCompraPanBlanco(){
        return this.precioCompraPanBlanco;
    }

    /**Metodo de modificación a la propiedad precioCompraPanBlanco*/
    public void setPrecioCompraPanBlanco(int precioCompraPanBlanco){
        this.precioCompraPanBlanco = precioCompraPanBlanco;
    }

    /**Metodo de acceso a la propiedad precioCompraPanIntegral*/
    public int getPrecioCompraPanIntegral(){
        return this.precioCompraPanIntegral;
    }

    /**Metodo de modificación a la propiedad precioCompraPanIntegral*/
    public void setPrecioCompraPanIntegral(int precioCompraPanIntegral){
        this.precioCompraPanIntegral = precioCompraPanIntegral;
    }

    /**Metodo de acceso a la propiedad ingresosPorVentas*/
    public int getIngresosPorVentas(){
        return this.ingresosPorVentas;
    }

    /**Metodo de modificación a la propiedad ingresosPorVentas*/
    public void setIngresosPorVentas(int ingresosPorVentas){
        this.ingresosPorVentas = ingresosPorVentas;
    }

 

}