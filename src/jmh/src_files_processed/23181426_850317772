import java.util.List;

/**
 * ####### # ### ########### #####
 * 
 * @###### ### ### #######
 */
public class World
{
    private int width;
    private int height;
    private Cell [][] worldLocation;

    /**
     * Constructor for objects of class World
     * 
     * @param w the width of the World
     * @param h the height of the World
     */
    public World(int w, int h)
    {
        width = w;
        height = h;
        worldLocation = new Cell[w][h];
    }

    /**
     * Gets the width of the world
     * 
     * @return the width of the world
     */
    public int getWidth()
    {
        return width;
    }
    
    /**
     * Gets the height of the world
     * 
     * @return the height of the world
     */
    public int getHeight()
    {
        return height;
    }
    
    /**
     * Gets Cell you want to inspect
     * 
     * @param x the width coordinate
     * @param y the height coordinate
     * @return the selected Cell
     */
    public Cell getCell(int x, int y)
    {
        if (x < 0 || x >= width || y < 0 || y >= height)
        {
            throw new IllegalArgumentException("Invalid coordinates");
        }
        else
        {
            return worldLocation;
        }
    }
    
    /**
     * Computes a List of the neighbouring Cells
     * 
     * @param c the Cell whoose neighbours to inspect
     * @return a list of neighbours
     */
    public List<Cell> getNeighbours(Cell c)
    {
        int hor = c.getX()
        int vert = c.getY();
        List<Cell> neighbours = new List<Cell>;
        
        if (hor = 0)
        {
            if (vert = 0)
            {
                neighbours.add(this.getCell(width - 1, vert + 1));
                neighbours.add(this.getCell(hor, vert + 1));
                neighbours.add(this.getCell(hor + 1, vert + 1));
                neighbours.add(this.getCell(width - 1, vert));
                neighbours.add(this.getCell(hor + 1, vert));
                neighbours.add(this.getCell(width - 1, height - 1));
                neighbours.add(this.getCell(hor, height - 1));
                neighbours.add(this.getCell(hor + 1, height - 1));
            }
            else if (vert = height - 1)
            {
                neighbours.add(this.getCell(width - 1, height - 1));
                neighbours.add(this.getCell(hor, height - 1));
                neighbours.add(this.getCell(hor + 1, height - 1));
                neighbours.add(this.getCell(width - 1, vert));
                neighbours.add(this.getCell(hor + 1, vert));
                neighbours.add(this.getCell(width - 1, vert - 1));
                neighbours.add(this.getCell(hor, vert - 1));
                neighbours.add(this.getCell(hor + 1, vert - 1));
            }
            else
            {
                neighbours.add(this.getCell(width - 1, vert + 1));
                neighbours.add(this.getCell(hor, vert + 1));
                neighbours.add(this.getCell(hor + 1, vert + 1));
                neighbours.add(this.getCell(width - 1, vert));
                neighbours.add(this.getCell(hor + 1, vert));
                neighbours.add(this.getCell(width - 1, vert - 1));
                neighbours.add(this.getCell(hor, vert - 1));
                neighbours.add(this.getCell(hor + 1, vert - 1));
            }
        }
        else if (hor = width - 1)
        {
            if (vert = 0)
            {
                neighbours.add(this.getCell(hor - 1, vert + 1));
                neighbours.add(this.getCell(hor, vert + 1));
                neighbours.add(this.getCell(0, vert + 1));
                neighbours.add(this.getCell(hor - 1, vert));
                neighbours.add(this.getCell(0, vert));
                neighbours.add(this.getCell(hor - 1, height - 1));
                neighbours.add(this.getCell(hor, height - 1));
                neighbours.add(this.getCell(0, height - 1));
            }
            else if (vert = height - 1)
            {
                neighbours.add(this.getCell(hor - 1, 0));
                neighbours.add(this.getCell(hor, 0));
                neighbours.add(this.getCell(0, 0));
                neighbours.add(this.getCell(hor - 1, vert));
                neighbours.add(this.getCell(0, vert));
                neighbours.add(this.getCell(hor - 1, vert - 1));
                neighbours.add(this.getCell(hor, vert - 1));
                neighbours.add(this.getCell(0, vert - 1));
            }
            else
            {
                neighbours.add(this.getCell(hor - 1, vert + 1));
                neighbours.add(this.getCell(hor, vert + 1));
                neighbours.add(this.getCell(0, vert + 1));
                neighbours.add(this.getCell(hor - 1, vert));
                neighbours.add(this.getCell(0, vert));
                neighbours.add(this.getCell(hor - 1, vert - 1));
                neighbours.add(this.getCell(hor, vert - 1));
                neighbours.add(this.getCell(0, vert - 1));
            }
        }
        else
        {
            neighbours.add(this.getCell(hor - 1, vert + 1));
            neighbours.add(this.getCell(hor, vert + 1));
            neighbours.add(this.getCell(hor + 1, vert + 1));
            neighbours.add(this.getCell(hor - 1, vert));
            neighbours.add(this.getCell(hor + 1, vert));
            neighbours.add(this.getCell(hor - 1, vert - 1));
            neighbours.add(this.getCell(hor, vert - 1));
            neighbours.add(this.getCell(hor + 1, vert - 1));
        }
        
        return neighbours;
    }
    
    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public List<Creature> getCreatures()
    {
        return x + y;
    }
}