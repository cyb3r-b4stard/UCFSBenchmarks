package cz.muni.fi.pb162.project.geometry;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

/**
 * ##### # ########### ## ##### ################# ####.
 * 
 * @###### ###### ######
 * @####### ##.##.####
 */
public class CollectionPolygon extends SimplePolygon
{
    private ArrayList<Vertex2D> list; 
    /**
     * Constructor for objects of class CollectionPolygon
     */
    public CollectionPolygon(Vertex2D[] vertices)
    {
        if (vertices == null) {throw new NullPointerException("Array in constructor of ArrayPolygon in null!");}
        list = new ArrayList<Vertex2D>();
        for (int i = 0; i < vertices.length;i++)
        {
            if (vertices[i] == null){
                throw new NullPointerException("Vertex on position" + i + "is null!");
            }
            list.add(vertices[i]);
        }
    }
    /**
     * An example of a method - replace this comment with your own
     * 
     * @return     the sum of x and y 
     */
    public Collection<Vertex2D> getVertices()
    {
        return Collections.unmodifiableList(list);
    }
    /**
     * An example of a method - replace this comment with your own
     * 
     * @return     inverted array of vertices 
     */
    public CollectionPolygon invert()
    {
        Vertex2D[] array = new Vertex2D[list.size()];
        for (int i = 0;i<this.getNumVertices();i++){
            array[i] = list.get(list.size()-i-1);
        }
        return new CollectionPolygon(array);
    }
    @Override
    public int getNumVertices()
    {
        return list.size();
    }
    @Override
    public Vertex2D getVertex(int index)
    {
        if (index < 0) throw new IllegalArgumentException("GetVertex cannot have negative argument!");
        return list.get(index%getNumVertices());
    }
    /**
     * An example of a method - replace this comment with your own
     * 
     * @return     the sum of x and y 
     */
    public Collection<Vertex2D> removeLeftmostVertices()
    {
        for (int i = 0;i<this.getNumVertices();i++){
            }
        }
        return returnList;
    }
}