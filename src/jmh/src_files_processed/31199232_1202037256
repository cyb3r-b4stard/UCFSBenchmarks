import java.util.ArrayList;

/**
 * #### ##### ###### # ########## ## # ##########
 * ## ####.  ### ########## ##### ### ### ######.  ###
 * ## # ###### ########## ### #### ## ### ##### #####.
 * ### ##### ## ## ######### #### ##### # ########## ##
 * ### ####### ############ ### ## ### ###### ## ### 
 * #####'# ##########.
 * 
 * @###### ##### #######
 * @####### ####### ####
 */
public class VideoStore
{
    private String storeName;
    private ArrayList<DVD> dvdList;

    /**
     * Construct a new VideoStore with the specified name.
     * Initially the VideoStore does not contain any DVDs.
     * 
     * @param initName the name of this VideoStore.
     */
    public VideoStore(String initName) {
        storeName = initName;
        dvdList = new ArrayList<DVD>(); 

    }

    /**
     * Get the name of this VideoStore.
     * 
     * @return the name of this VideoStore.
     */
    public String getStoreName() {
        return storeName;

    }

    /**
     * Get the number of DVDs that are in this
     * VideoStore's collection.
     * 
     * @return the number of DVDs in this VideoStore.
     */
    public int getNumDVDs() {
        return dvdList.size();

    }

    /**
     * Add a new DVD to the DVD collection of this
     * VideoStore.
     * 
     * @param newDVD the DVD to be added.
     */
    public void addDVD(DVD newDVD) {
        dvdList.add(newDVD);

    }

    /**
     * Remove from the collection the DVD at the indicated position.
     * This method checks that the indicated position is valid.
     * If the position is valid, the DVD is removed.  If the position 
     * is not valid (either negative or too large) an error message 
     * is printed.
     * 
     * @param position the index of the DVD to remove.
     */
    public void removeDVD(int index) {
        if(index >= 0 && index < dvdList.size()){
            dvdList.remove(index);
        }
        else{
            System.out.println("Error: No DVD at index" + index + ".");
        }
    }

    /**
     * Print the DVD at the indicated position in the DVD collection of this VideoStore.
     * This method checks that the indicated position is valid.
     * If the position is valid, the description of the DVD is
     * printed.  If the position is not valid (either negative or
     * too large) an error message is printed.
     * 
     * @param position the index of the DVD to print.
     */
    public void printDVD(int index) {
        if(index >= 0 && index < dvdList.size()){
            DVD myDVD = dvdList.get(index);
            System.out.println(myDVD);
        }
        else {
            System.out.println("Error: No DVD at index" + index + ".");
        } 
    }

    /**
     * Print the title of the DVD at the indicated
     * position in the DVD collection of this VideoStore.
     * This method checks that the indicated position is valid.
     * If the position is valid, the description of the DVD is
     * printed.  If the position is not valid (either negative or
     * too large) an error message is printed.
     * 
     * @param position the index of the DVD to print.
     */
    public void printDVDTitle(int index) {
        if(index >= 0 && index < dvdList.size()){
            DVD myDVD = dvdList.get(index);
            System.out.println(myDVD.getTitle());
        }
        else{
            System.out.println("Error: No DVD at index " +index + ".");
        }
    }

    /**
     * Get the DVD at the specified index in the collection.
     * This method checks that the indicated index is valid.
     * If the index is valid, the DVD is returned.  If the index 
     * is not valid (either negative or too large) an error message 
     * is printed.
     * 
     * @param index the index from which to get the DVD.
     * @return the DVD at the specified index or null if the
     * index is not valid.
     */
    public DVD getDVD(int index) {
        if(index >= 0 && index < dvdList.size()){
            DVD myDVD = dvdList.get(index);
            return myDVD;
        }
        else{
            System.out.println("Error: No DVD at index" + index + ".");
            return null;
        }
    } 

    /**
     * Move the DVD at the specified index to the end of the collection.  If the
     * specified index is not valid then this method prints an error message and
     * the collection is not modified.
     * 
     * @param the index of the DVD to be moved.
     */
    public void moveDVDToEnd(int index) {
        if (index >= 0 && index < dvdList.size()){
            index = 0;
        }
        else{
            System.out.println("Error: Invalid index" + index);
        }
    }

    /**
     * Get the DVD at the specified index if it is not currently out on rental. 
     * If the DVD is not in stock then a message indicating that the DVD is currently 
     * rented is displayed and this method returns null.
     * If the index is not valid (either negative or too large) an error message 
     * is printed and this method returns null.
     * 
     * @param index the index from which to get the DVD.
     * @return the DVD at the specified index or null.
     */
    public DVD getDVDIfInStock(int index) {

        return null;
    }

    /**
     * Print all of the DVD's in this VideoStore's collection.
     */
    public void printAllDVDs() {
        for(int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            System.out.println(myDVD.toString());
        }
    }

    /**
     * Print all of the DVD's in this VideoStore's collection in revsere 
     * order.
     */
    public void revPrintAllDVDs() {

    }

    /**
     * Print just the titles of all of the DVD's in this VideoStore's
     * collection.
     */
    public void printTitleList() {
        for( int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            System.out.println(myDVD.getTitle());
        }
    }

    /**
     * Find and return the total number of rental nights
     * on all of the DVD's in this VideoStore's collection.
     * 
     * @return the total number of rental nights.
     */
    public int countRentalNights() {
        int count = 0;
        for( int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            count = count + myDVD.getNightsRented();
        }
        return count;
    }

    /**
     * Get the number of overdue DVDs in the store.
     * 
     * @return the number of overdue DVDs.
     */
    public int countOverdueDVDs() {
        int NumDVDsOverdue = 0;
        for( int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            if(myDVD.isOverdue()){
                NumDVDsOverdue = NumDVDsOverdue + 1;
            }
        }
        return NumDVDsOverdue;
    }

    /**
     * Count the number of DVD's that are assumed to be lost.
     * Assume that any DVD that is overdue by more than the specified
     * number of nights has been lost.
     * 
     * @param nights the specified number of nights.
     */
    public int countLostDVDs(int nights) {
        int NumLostDVDs = 0;
        for( int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            if(myDVD.getNightsRented() > nights){
                NumLostDVDs = NumLostDVDs + 1;
            } 
        }
        return NumLostDVDs;
    }

    /**
     * Count and return the number of DVDs that are currently
     * in stock.  That is, the have been out on rental for 0
     * nights.
     * 
     * @return the number of in stock titles.
     */
    public int countInStockTitles() {
        int NumInStockTitles = 0;
        for(int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            if( myDVD.getNightsRented() == 0){
                dvdList.add(myDVD);
            }

        }
        return NumInStockTitles;
    }

    /**
     * Increase the number of rental nights on each rented
     * DVD by 1 night.
     */
    public void increaseRentalNights() {   
        for(int i = 0; i < dvdList.size(); i++) {
            DVD myDVD = dvdList.get(i);
            if (myDVD.getNightsRented() > 0){
                myDVD.addRentalNight();
            }
        }
    }

    /**
     * Find and return the DVD that has been rented for the longest
     * period of time. If multiple DVDs tie for the longest rental, return
     * the first one. If no DVDs have been rented or there are no DVD's 
     * in the store then this method returns null.
     * 
     * @return the DVD with the most rental nights, or null if the
     * store contains no DVDs.
     */
    public DVD getLongestRental() {
       if(dvdList.size() == 0){
           return null;
        }
       DVD longestRentedDVD = dvdList.get(0);
       for(DVD myDVD : dvdList){
           if(longestRentedDVD.getNightsRented() < myDVD.getNightsRented()){
               longestRentedDVD = myDVD;
            }
        }
       return longestRentedDVD;
    }

    /**
     * Increase the number of nights that every DVD can be rented by
     * the specified amount.
     * 
     * @param nights the number of nights by which to increase the
     * rental lengths.
     */
    public void increaseRentalLengths(int nights) {
        for( int i = 0; i < dvdList.size(); i++){
            DVD myDVD = dvdList.get(i);
            nights = myDVD.getRentalLength() + nights;
        }

    }

    /**
     * Get the DVD that is the most overdue. If multiple DVD's tie for the
     * most overdue, return the first one.  If there are no overdue
     * DVDs then return null.
     * 
     * @return the most overdue DVD, or null if there are no overdue
     * DVDs.
     */
    public DVD getMostOverdueDVD() {
        if(dvdList.size() == 0){
           return null;
        }
        DVD mostOverdueDVD = dvdList.get(0);
        for(DVD myDVD : dvdList){
            if ((mostOverdueDVD.getNightsRented() - mostOverdueDVD.getRentalLength()) 
            < (myDVD.getNightsRented() - myDVD.getRentalLength())){
                mostOverdueDVD = myDVD;
            }
        }
        return mostOverdueDVD;
    }

    /**
     * Print a list of all of the DVD's in the VideoStore's collection
     * in the reverse of the order in which they are stored.
     */
    public void printAllDVDsWithWhile() {
    }
    
    /**
     * Get the first overdue DVD.  If there are no overdue DVD's then this
     * method returns null.
     * 
     * @return the first overdue DVD or null if there are no overdue DVDs.
     */
    public DVD getFirstOverdueDVD() {
        DVD firstOverdueDVD = null;
        int index = 0;
        while (index < dvdList.size() && firstOverdueDVD = null){
           DVD myDVD = dvdList.get(index); 
           if(myDVD.isOverdue() == true) {
               firstOverdueDVD = myDVD;
            }
            else{
                index++;
            }
        }
        return firstOverdueDVD;
    }

    /**
     * Get the first DVD with the rating specified by the parameter.  If there are no 
     * DVD's with the specified rating then this method returns null.
     * 
     * @param rating the specified rating.
     * @return the first DVD with the rating or null if there are none.
     */
    public DVD getFirstDVDWithRating(String rating) {
        DVD firstDVDWithRating = null;
        int index = 0;
        while(index < dvdList.size() && firstDVDWithRating = null){
            DVD myDVD = dvdList.get(i);
            if( rating == myDVD.getRating()){
                firstDVDwithRating = myDVD;
            }
            else {
                index++
            }
        } 
        return firstDVDWithRating;
    }

    /**
     * Get the last DVD in the collection that is currently in stock.  If there
     * are no DVD's in stock then this method returns null.
     * 
     * @return the last DVD in stock or null if there are none.
     */
    public DVD getLastDVDInStock() {
        return null;
    }

    /**
     * Find all of the DVDs with the specified rating and 
     * return them in a new VideoStore.   The name of the returned
     * VideoStore will be "? Rated DVDs" where ? is the specified rating.
     * If there are no DVDs with the specified rating then an empty 
     * VideoStore is returned.
     * 
     * @return a new VideoStore holding all DVDs with the specified
     * rating.
     */
    public VideoStore getAllDVDsWithRating(String rating) {
        return null;
    }

    /**
     * Find all of the DVDs that are overdue and return them in a new VideoStore object. 
     * The name of the returned VideoStore will be "Overdue DVDs". If there are
     * no DVDs that are overdue then this method returns an empty VideoStore object.
     * 
     * @return a new VideoStore object holding all overdue DVDs.
     */
    public VideoStore getAllOverdueDVDs() {
        return null;
    }

    /**
     * Find all of the DVDs that are overdue by at least a specified number
     * of nights and return them in a new VideoStore object. 
     * The name of the returned VideoStore will be "Overdue > ? nights" where 
     * ? is the specified number of nights .If there are
     * no DVDs that are overdue by at least the specified number of nights then
     * this method returns an empty VideoStore object.
     * 
     * @param nights the specified number of nights.
     * @return a new VideoStore holding all DVDs that are overdue by 
     * at least the specified number of nights.
     */
    public VideoStore getMoreOverdueThan(int nights) {
        return null;
    }
}