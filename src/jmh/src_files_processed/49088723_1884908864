/**
 * ##### ##############. ############## ## ##
 * ######## ## ###### ######## ### #########
 * ######## ######## ##################.
 *
 * @###### (###. ######. ###)
 * @####### (##### ####/##)
 */
public class ConjuntoString {
    
    private NodoString primero;
    private int talla;
    
    /**
     * Crea un conjunto vacio.
     */
    public ConjuntoString() {
        primero = null;
        talla = 0;
    }

    /**
     * Inserta s en el conjunto.
     * Si s ya pertenece al conjunto, el conjunto no cambia.
     *
     * @param s String. Elemento que se inserta en el conjunto.
     */
    public void insertar(String s) {
        NodoString aux = this.primero;
        NodoString ant = null;
        int compara = -1;
        while((aux != null) && compara < 0){
            if(aux.dato.compareTo(s) < 0){
                ant = aux;
                aux = aux.siguiente;
            } else {
                compara = 1;
            }
        } 
        if() { 
            ant = aux;
            aux = aux.siguiente;
            
        } 
    }
    
    /**
     * Comprueba si s pertenece al conjunto.
     *
     * @param s String.
     * @return true sii s pertenece al conjunto.
     */

    public boolean pertenece(String s) {
        return true;
    }

    
    /**
     * Elimina s del conjunto.
     * Si s no pertenece al conjunto, el conjunto no cambia.
     *
     * @param s String.
     */
    public void eliminar(String s) {
    }
    
    /**
     * Devuelve la talla o cardinal del conjunto.
     * @return la talla del conjunto.
     */
    public int talla() { 
        return 0; 
    }
    
    
    /**
     * Devuelve el conjunto interseccion del conjunto y de otro.
     *
     * @param otro ConjuntoString.
     * @return el conjunto interseccion.
     */
    public ConjuntoString interseccion(ConjuntoString otro) {
        return null;
    }
    /**
     * Devuelve el conjunto union del conjunto y de otro.
     *
     * @param otro ConjuntoString.
     * @return el conjunto union.
     */
    public ConjuntoString union(ConjuntoString otro) {
        return null;
    }
    
        
    /**
     * Devuelve el listado de los Strings en el conjunto, en orden
     * lexicogrÃ¡fico, y separados por saltos de linea.
     * Si el conjunto es vacio devuelve "", la String vacia.
     *
     * @return el listado de los elementos del conjunto.
     */
    public String toString() {
        String result = "";
        NodoString aux = this.primero;
        while (aux != null) {
            result += aux.dato + "\n"; 
            aux = aux.siguiente; 
        }
        return result;
    }
    
}