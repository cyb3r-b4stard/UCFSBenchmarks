
/**
 * ##### # ########### ## ##### ###### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class MyMath
{

    /**
     * Find the mean of the four parameters
     * @param a the first paramenter
     * @param b the second parameter
     * @param c the third parameter
     * @param d the fourth parameter
     * return mean average of the four parameters
     */

    public static double mean4(double a, double b, double c, double d)
    {
        double mean4 = ( a + b + c + d) / 4; 
        return mean4; 
    }

    /** 
     * find the maximum of the three parameters (int form)
     * @param a is the the first parameter
     * @param b is the second parameter
     * @param c is the third parameter
     * use if else to find the maximum:
     * 1st : If a is greater than b and c 
     * return param a
     * 2nd : If b is greater than a and c
     * return param b
     * 3rd: If c is greater than a and b
     * return param c
     */

    public static int max3(int a, int b, int c)
    {
        int max = 0; 
        if ( a > b && a > c) 
        {
            max = a; 
        }
        else if ( b > a && a > c) 
        {
            max = b; 
        }
        else 
        {
            max = c; 
        }
        return max; 
    }

    /** 
     * find the maximum of the three parameters (double form)
     * @param a is the the first parameter
     * @param b is the second parameter
     * @param c is the third parameter
     * use if else to find the maximum:
     * 1st : If a is greater than b and c 
     * return param a
     * 2nd : If b is greater than a and c
     * return param b
     * 3rd: If c is greater than a and b
     * return param c
     */

    public static double max3(double a, double b, double c)
    {
        double max = 0; 
        if ( a > b && a > c) 
        {
            max = a; 
        }
        else if ( b > a && a > c) 
        {
            max = b; 
        }
        else 
            max = c; 

        return max; 
    }

    /**
     * Calculate n factorial (n!) where n <= 20.
     * @param n the argument whose factorial is required
     * @return the factorial of the argument
     */
    public static long factorial(int n)
    {
        long result = 1;
        int counter = 2;
        while (counter <= n)
        {
            result = result * counter;
            counter++;
        }
        return result;
    }

    /**
     *  calculate binomial coefficients 
     *  @param n for factorial n
     *  @param k for factorial k
     *  set biCoeff as factorial n over factorial k and factorial n-k
     *  return result as biCoeff
     */
    public static long biCoeff (int n, int k)
    {
        long biCoeff = factorial(n) / (factorial(k) * factorial(n-k));
        return biCoeff;
    }

    /*public static long power(long a, long b)
    {
    while ( b = int b)
    {

    }
    }

    /* public static long power(long a, long b)
    {
    long power = 0;
    for (int i = 1; i <= b; i++) {
    power = power * b;
    }
    return power;
    }

    /* public static sum (int n)
    {
    int sum = 0;

    }
    /* public static long product(long m, long n) 
     * {
     *     
     *     }
     *     
     */

    public static long moles(long mass, long molarMass)
    {
        long moles = mass / molarMass;
        return moles;
    }
    
    public static double newtons(double weight, int gravity)
    {
        int gravity = 9.81
        if (weight = weight + "lbs" | weight + "lb")
        weight = (weight * ( 1 / 0.453592 )) * gravity;
        else 
        weight = weight * gravity;
        return weight;
    }
        
        
    
}
