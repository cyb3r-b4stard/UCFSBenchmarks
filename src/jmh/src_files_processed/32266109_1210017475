import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.File;
import javax.swing.*;
import java.applet.*;

public class Piano extends JApplet implements ActionListener
{   
    int sizeOfKeyboard = 24;

    JButton[]   keyboardJbuttons = new JButton[sizeOfKeyboard];    
    AudioClip[] keySounds = new AudioClip[sizeOfKeyboard];
    String[]    keyNames = new String[sizeOfKeyboard];
    Image[]     keyImages = new Image[sizeOfKeyboard];

    Key[] keyboard = new Key[sizeOfKeyboard];

    AudioClip audioClip;   
    
    public void init()
    { 
        ImageIcon icon = new ImageIcon("background.png");
        icon = new ImageIcon(icon.getImage().getScaledInstance(0,0);         
        
        JRootPane rootPane = this.getRootPane();    
        rootPane.putClientProperty("defeatSystemEventQueueCheck", Boolean.TRUE);

        buildKeyboard();
    }

    public void buildKeyboard()
    {
        this.setLayout(null);
        loadKeyNames();
        loadKeyImages();

        loadVisualObjects();

        loadButtons();

      
    }

    public void addKeysToKeyboard()
    {
    }

    public void loadVisualObjects()
    {
        for(int key=0; key<keyboard.length; key++)
        {
        }

        loadActionListeners();
    }

    void loadKeyNames()
    {
        keyNames[0] = "C";
        keyNames[1] = "C#";
        keyNames[2] = "D";
        keyNames[3] = "D#";
        keyNames[4] = "E";
        keyNames[5] = "F";
        keyNames[6] = "F#";
        keyNames[7] = "G";
        keyNames[8] = "G#";
        keyNames[9] = "A";
        keyNames[10] = "A#";
        keyNames[11] = "B";        
        keyNames[12] = "C";
        keyNames[13] = "C#";
        keyNames[14] = "D";
        keyNames[15] = "D#";
        keyNames[16] = "E";
        keyNames[17] = "F";
        keyNames[18] = "F#";
        keyNames[19] = "G";
        keyNames[20] = "G#";
        keyNames[21] = "A";
        keyNames[22] = "A#";
        keyNames[23] = "B";
    }    

    void loadKeyImages()
    {
        keyImages[0] = getImage(getCodeBase(),"img/light_key.png" );   
        keyImages[1] = getImage(getCodeBase(),"img/dark_key.png");      
        keyImages[2] = getImage(getCodeBase(),"img/light_key.png");     
        keyImages[3] = getImage(getCodeBase(),"img/dark_key.png");      
        keyImages[4] = getImage(getCodeBase(),"img/light_key.png");     
        keyImages[5] = getImage(getCodeBase(),"img/light_key.png");     
        keyImages[6] = getImage(getCodeBase(),"img/dark_key.png");      
        keyImages[7] = getImage(getCodeBase(),"img/light_key.png");     
        keyImages[8] = getImage(getCodeBase(),"img/dark_key.png");      
        keyImages[9] = getImage(getCodeBase(),"img/light_key.png");     
        keyImages[10] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[11] = getImage(getCodeBase(),"img/light_key.png");    

        keyImages[12] = getImage(getCodeBase(),"img/light_key.png");    
        keyImages[13] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[14] = getImage(getCodeBase(),"img/light_key.png");    
        keyImages[15] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[16] = getImage(getCodeBase(),"img/light_key.png");    
        keyImages[17] = getImage(getCodeBase(),"img/light_key.png");    
        keyImages[18] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[19] = getImage(getCodeBase(),"img/light_key.png");    
        keyImages[20] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[21] = getImage(getCodeBase(), "img/light_key.png");   
        keyImages[22] = getImage(getCodeBase(),"img/dark_key.png");     
        keyImages[23] = getImage(getCodeBase(),"img/light_key.png");    
    }
    /*
    audioClip  = getAudioClip(getCodeBase(), playEnglish(x));
    audioClip.play();
     */
    /* public String grabAudioFile(int trackNumber)
    {     
    String file = null; 

    switch(trackNumber)
    {
    case 0: file = "audio/waterE.wav";    break;
    case 1: file = "audio/snowE.wav";     break;
    case 2: file = "audio/buildingE.wav"; break;
    case 3: file = "audio/schoolE.wav";   break;
    case 4: file = "audio/keyE.wav";      break;
    case 5: file = "audio/bookE.wav";     break;
    case 6: file = "audio/screenE.wav";   break;
    case 7: file = "audio/handE.wav";     break;
    case 8: file = "audio/heartE.wav";    break;
    case 9: file = "audio/happyE.wav";    break;
    }

    return file;
    }    */   

    public void loadActionListeners()
    {

    }

    void addKeys()
    {
        add(keyboardJbuttons[1]);
        add(keyboardJbuttons[3]);
        add(keyboardJbuttons[6]);
        add(keyboardJbuttons[8]);
        add(keyboardJbuttons[10]);
        add(keyboardJbuttons[13]);
        add(keyboardJbuttons[15]);
        add(keyboardJbuttons[18]);
        add(keyboardJbuttons[20]);
        add(keyboardJbuttons[22]);
        
        add(keyboardJbuttons[0]);        
        add(keyboardJbuttons[2]);
        add(keyboardJbuttons[4]);
        add(keyboardJbuttons[5]);
        add(keyboardJbuttons[7]);
        add(keyboardJbuttons[9]);
        add(keyboardJbuttons[11]);
        add(keyboardJbuttons[12]);
        add(keyboardJbuttons[14]);
        add(keyboardJbuttons[16]);
        add(keyboardJbuttons[17]);
        add(keyboardJbuttons[19]);
        add(keyboardJbuttons[21]);
        add(keyboardJbuttons[23]);
    }

    public void loadButtons()
    {
        keyboardJbuttons[0] = buildWhite(50,50); 
        keyboardJbuttons[1] = buildBlack(110,50); 
        keyboardJbuttons[2] = buildWhite(130,50); 
        keyboardJbuttons[3] = buildBlack(190,50); 
        keyboardJbuttons[4] = buildWhite(210,50); 
        keyboardJbuttons[5] = buildWhite(290,50); 
        keyboardJbuttons[6] = buildBlack(350,50); 
        keyboardJbuttons[7] = buildWhite(370,50); 
        keyboardJbuttons[8] = buildBlack(430,50); 
        keyboardJbuttons[9] = buildWhite(450,50); 
        keyboardJbuttons[10] = buildBlack(510,50); 
        keyboardJbuttons[11] = buildWhite(530,50); 
        keyboardJbuttons[12] = buildWhite(610,50); 
        keyboardJbuttons[13] = buildBlack(670,50); 
        keyboardJbuttons[14] = buildWhite(690,50); 
        keyboardJbuttons[15] = buildBlack(750,50); 
        keyboardJbuttons[16] = buildWhite(770,50); 
        keyboardJbuttons[17] = buildWhite(850,50); 
        keyboardJbuttons[18] = buildBlack(910,50); 
        keyboardJbuttons[19] = buildWhite(930,50); 
        keyboardJbuttons[20] = buildBlack(990,50); 
        keyboardJbuttons[21] = buildWhite(1010,50); 
        keyboardJbuttons[22] = buildBlack(1070,50); 
        keyboardJbuttons[23] = buildWhite(1090,50); 
        
        addKeys();
    }

    JButton buildWhite(int x, int y)
    {
        JButton button = new JButton();
        button.setSize(82,347);
        button.setLocation(x,y);
        button.setIcon(new ImageIcon("img/light_key.png"));
        button.setPressedIcon(new ImageIcon("img/light_key_pressed2.png"));
        button.setSelectedIcon(new ImageIcon("img/light_key_pressed2.png"));        
        button.setOpaque(false);
        button.setContentAreaFilled(false);
        button.setBorderPainted(false);

        return button;
    }

    JButton buildBlack(int x, int y)
    {
        JButton button = new JButton();
        button.setSize(40,222);
        button.setLocation(x,y);
        button.setIcon(new ImageIcon("img/dark_key.png"));
        button.setPressedIcon(new ImageIcon("img/dark_key_pressed.png"));
        button.setSelectedIcon(new ImageIcon("img/dark_key_pressed.png"));        
        button.setOpaque(false);
        button.setContentAreaFilled(false);
        button.setBorderPainted(false);

        return button;
    }

    
    @Override 
    public void actionPerformed(ActionEvent e) 
    {
        Object buttonPressed = e.getSource();

    }
    
    
    public Key[] getKeyboard()
    {
        return keyboard;
    }

    public void setKeyboard(Key[] keyboard) 
    {
        this.keyboard = keyboard;
    }
}