
/**
 * ##### # ########### ## ##### ####### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Persona
{
    private String nombre;
    private FechaCumple cumple;
    private Persona amigo;
    private boolean varon;
    private int numParejas;

    /**
     * Constructor 1.
     */
    public Persona(String nuevoNombre, int diaCumple, int mesCumple, char esVaron)
    {
        this.nombre = nuevoNombre;
        this.cumple = new FechaCumple(diaCumple, mesCumple);
        this.amigo = null;
        this.varon = (esVaron == 's' || esVaron == 'S');
        this.numParejas = 0;
    }

    /**
     * Constructor 2.
     */
    public Persona(String nuevoNombre, int diaCumple, int mesCumple, String esVaron)
    {
        this (nuevoNombre, diaCumple, mesCumple, 'n'); 
        if (esVaron.equalsIgnoreCase("S")){
            varon = true;
        }

    }

    /**
     * Constructor 3.
     */
    public Persona(String nuevoNombre, int diaCumple, int mesCumple)
    {
        this (nuevoNombre, diaCumple, mesCumple, 'n');
    }

    /**
     *  En este método le damos un amigo nuevo a un objeto existente. Como el amigo es otro objeto, el parámetro es tipo objeto (Persona). 
     */
    public void elegirPareja(Persona nuevoAmigo)
    {
        amigo = nuevoAmigo;
        numParejas++;
        
    }
    
    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    public boolean meQuiere()
    {
        if (amigo != null ){
            return amigo.getNombreAmigo().equals (nombre);
        }
        return false;
        
        
        }
        
         /**
     * An example of a method - replace this comment with your own
     *
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y
     */
    private void getNombreAmigo()
    {
        return amigo;
        
    }


}


    }
    
   