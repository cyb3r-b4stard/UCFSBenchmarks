import java.util.ArrayList;
import java.util.Iterator;
/**
 * ###### ### ##### ## # ########.
 * ### ##### ## ######### ## #### ## #### ########.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class StockManager
{
    private ArrayList<Product> stock;
    private Product p;

    /**
     * Initialise the stock manager.
     */
    public StockManager()
    {
        stock = new ArrayList<Product>();
    }

    /**
     * Add a product to the list.
     * @param item The item to be added.
     */
    public void addProduct(Product item)
    {
        stock.add(item);
    }
    
    /**
     * Receive a delivery of a particular product.
     * Increase the quantity of the product by the given amount.
     * @param id The ID of the product.
     * @param amount The amount to increase the quantity by.
     */
    public void delivery(int id, int amount)
    {
        
      p.increaseQuantity(amount);
}
      /**
     * Try to find a product in the stock with the given id.
     * @return The identified product, or null if there is none
     *         with a matching ID.
     */
    public Product findProduct(int id)
    {   
        for(int i=0;i<stock.size();i++){
            if(stock.get(i).getID()==id){
                return stock.get(i);
            }
        }
    return null;
}
    
    /**
     * Locate a product with the given ID, and return how
     * many of this item are in stock. If the ID does not
     * match any product, return zero.
     * @param id The ID of the product.
     * @return The quantity of the given product in stock.
     */
    public int numberInStock(int id)
    {
        p=findProduct(id);
        if(p==null){
            return 0;
        }
        else{
            return p.getQuantity();
        }
        

    }

    /**
     * Print details of all the products.
     */
    public void printProductDetails()
    {
        for(Product p: stock){
            System.out.println(p.toString());
        }
    }
 /**
   *imprime los productos por debajo de un numero de existencia
    */
public void printProductDetails(int exis){
    Iterator<int> it= stock.iterator();
    
    while(it.hasNext()){
        int aux=it.next();
        if(aux<exis){
            System.out.println(aux);
        }
         else{
             System.out.println("Producto en mayor existencia");
            }
        
        
    }
    
    
}    
}
