import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 * ##### # ########### ## ##### ######## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Playlist
{
    private ArrayList<Faixa> playlist;

    public Playlist(){
        this.playlist = new ArrayList<Faixa> (); 
    }

    public ArrayList<Faixa> getFaixas(){
        ArrayList<Faixa> copia = new ArrayList<Faixa> ();

        for (Faixa f : playlist)
            copia.add(f.clone());

        return copia;
    }

    public void setFaixas(ArrayList<Faixa> playlist){
        this.playlist.clear();
        for (Faixa f : playlist)
            this.playlist.add(f.clone());
    }

    public int numFaixas(){
        return this.playlist.size();
    }

    public void addFaixa(Faixa f){
        this.playlist.add(f.clone());
    }

    public void removeFaixa(Faixa m){
        this.playlist.remove(m);
    }

    public void adicionar(List<Faixa> faixas){
        for (Faixa f : faixas)
            this.addFaixa(f.clone());
    }

    public void adicionarF(List<Faixa> faixas){
        Iterator it = new Iterator();
    }

    public int classificacaoSuperior(Faixa m){
        int c = 0;

        for (Faixa f : playlist)
            if (f.getClassificacao() > m.getClassificacao())
                c++;

        return c;
    }

    public int classificacaoSuperiorF(Faixa f){

    }

    public boolean duracaoSuperior(double d){

    }

    public boolean duracaoSuperiorF(double d){

    }

    public List<Faixa> getCopiaFaixas(int n){
        List<Faixa> l = new ArrayList<Faixa> ();

        for (Faixa f : this.playlist)
            l.add(new Faixa(f.getNome(), f.getAutor(), f.getDuracao(), n));

        return l;
    }

    public List<Faixa> getCopiaFaixasF(int n){
        return playlist.stream().map(f -> new Faixa(f.getNome(), f.getAutor(), f.getDuracao(), f.getClassificacao())).collect(Collectors.toList());
    }

    public double duracaoTotal(){

    }

    public double duracaoTotalF(){

    }

    public void removeFaixas(String autor){

    }

    public void removeFaixasF(String autor){

    }

    public boolean equals(Object o) {
        if(o==this) {
            return true;
        }

        if(o==null || o.getClass() != this.getClass()) {
            return false;
        }
        Playlist p = (Playlist) o;
        return this.playlist.equals(p.getFaixas());
    }

    public String toString(){
        return this.toString();
    }

    public ArrayList<Faixa> clone(){
        ArrayList<Faixa> copia = new ArrayList<Faixa> ();

        for (Faixa f : playlist)
            copia.add(f.clone());

        return copia;
    }
}