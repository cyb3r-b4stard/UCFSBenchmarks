import java.util.*;

/**
 *  ########### ## ### #####
 *
 * @######     #### #### ####
 * @#######    ##### ###, ####
 */
public class Sorts
{
    private long steps;

    /**
     *  Description of Constructor
     *
     * @param  list  Description of Parameter
     */
    Sorts()
    {
        steps = 0;
    }

    /**
     *  Description of the Method
     *
     * @param  list  reference to an array of integers to be sorted
     */
    public void bubbleSort(int[] list)
    {
        System.out.println();
        System.out.println("Bubble Sort");
        System.out.println();
    }

    /**
     *  Description of the Method
     *
     * @param  list  reference to an array of integers to be sorted
     */
    public void selectionSort(int[] list)
    {
        int min, temp;

        for (int outer = 0; outer < list.length - 1; outer++)
        {
            min = outer;
            for (int inner = outer + 1; inner < list.length; inner++)
            {
                if (list[inner] < list[min])
                {
                    min = inner;
                }
            }
            temp = list[outer];
            list[outer] = list[min];
            list[min] = temp;
        }
    }

    /**
     *  Description of the Method
     *
     * @param  list  reference to an array of integers to be sorted
     */
    public void insertionSort(int[] list)
    {
        System.out.println();
        System.out.println("Insertion Sort");
        System.out.println();}}

/**
 *  Takes in entire vector, but will merge the following sections
 *  together:  Left sublist from a[first]..a[mid], right sublist from
 *  a[mid+1]..a[last].  Precondition:  each sublist is already in
 *  ascending order
 *
 * @param  a      reference to an array of integers to be sorted
 * @param  first  starting index of range of values to be sorted
 * @param  mid    midpoint index of range of values to be sorted
 * @param  last   last index of range of values to be sorted
 */
private void merge(int[] a, int first, int mid, int last)
{
}

/**
 *  Recursive mergesort of an array of integers
 *
 * @param  a      reference to an array of integers to be sorted
 * @param  first  starting index of range of values to be sorted
 * @param  last   ending index of range of values to be sorted
 */
public void mergeSort(int[] a, int first, int last)
{
System.out.println();
System.out.println("MergeSort");
System.out.println();
}

/**
 *  Recursive quicksort of an array of integers
 *
 * @param  a      reference to an array of integers to be sorted
 * @param  first  starting index of range of values to be sorted
 * @param  last   ending index of range of values to be sorted
 */
public void quickSort(int[] a, int first, int last)
{
System.out.println();
System.out.println("Quicksort");
System.out.println();
}

/**
 *  Accessor method to return the current value of steps
 *
 */
public long getStepCount()
{
return steps;
}

/**
 *  Modifier method to set or reset the step count. Usually called
 *  prior to invocation of a sort method.
 *
 * @param  stepCount   value assigned to steps
 */
public void setStepCount(int stepCount)
{
steps = stepCount;
}
}