import java.io.*;
import java.util.ArrayList;

/**
 * ###### ## ### ############### ### ####### ## ## ##########.
 * 
 * @###### (##### #########) 
 * @####### (#.#)
 */
public abstract class Class
{

    public static float durchschnitt(int a, int b)
    {
        return((a+b)/2);
    }

    public static boolean komparator(int a, int b)
    {
        if(a > b)
        {
            return true;
        }
        else
            return false;
    }

    public static double hausratsversicherung(int pPersonen, int pFlaeche)
    {
        switch (pPersonen)
        {
            case 1:
            case 2: return (10 + 0.5 * pFlaeche);
            case 3: return (15 + pFlaeche);
            case 4: return(15 + 1.5 * pFlaeche);
            default: return (25 + 2 * pFlaeche);
        }
    }

    public static double zylinderVolumen(double hoehe, double radius)
    {
        double volumen = java.lang.Math.PI * radius * radius * hoehe;
        return volumen;
    }

    public static double zylinderOberflaeche(double hoehe, double radius)
    {
        double oberflaeche = 2 * java.lang.Math.PI * Math.pow(radius,2) + 2 * java.lang.Math.PI * radius * hoehe;
        return oberflaeche;
    }

    public static boolean fAC(int n)throws IOException
    {
        int e = 1;

        try
        {
            if(n<0)
            {
                for (int i=1; i<=-n; i++) {
                    e = e * i;
                }
                e = -e;
            }

            else
                for (int i=1; i<=n; i++) {
                    e = e * i;
                } 

            System.out.println("Das Ergebnis von " + n + "! ist: " + e);
            return true;
        }
        catch(Exception IOException)
        {
            System.out.println("Die berechnung war nicht erfolgreich. Bitte versuche es mit anderen Werten erneut.");
            return false;
        }
    }

    public static String anna(String word)
    {
        int i = 0;
        String output = "";
        while(i < word.length())
        {
            output = output + word.charAt(word.length() - 1 - i);
            i++;
        }
        return output;
    }

    public static boolean palindrom(String word)
    {
        return anna(word).equals(word);
    }

    public static void ausgabe(int x, int y)
    {
        int i = 0;
        int j = 0;
        String zeile = "";
        while (i<x)
        {
            zeile = zeile + "*";
            i++;
        }
        while (j<y)
        {
            System.out.println(zeile);
            j++;
        }
    }

    public static void ausgabe2(int h)
    {
        int i = 0;
        String zeile = "*";
        while (i<h)
        {
            System.out.println(zeile);
            zeile = zeile + "*";
            i++;
        }
    }

    public static void ausgabe3(int h)
    {        
        String zeile = "*";
        int j = 0;
        while (j<h)
        {
            zeile = new String(new char[h-1-j]).replace("\0", " ") + new String(new char[j]).replace("\0", "**") + "*";
            System.out.println(zeile);
            j++;
        }
    }

    public static void line(int n)
    {
        line(n, "=");
    }

    public static void line(int n, String elem)
    {
        System.out.println(new String(new char[n]).replace("\0", elem));
    }

    public static int[] arrayErzeugen(int n)
    {
        int[] GeradeZahlen = new int[n];
        for(int i=0; i<n; i++)
        {
            GeradeZahlen[i] = (1+i)*2;
        }
        return GeradeZahlen;
    }

    public static double groesserAlsDerSchnitt(double[] param) 
    {
        double average = 0;
        for(int i=0; i<param.length; i++)
        {
            average = average + param[i];
        }
        average = average / param.length;

        double minBiggerAverage = 0;
        for(int k=0; minBiggerAverage == 0; k++)
        {
            if(param[k] > average)  
                minBiggerAverage = param[k];
        }
        for(int j=0; j<param.length; j++)
        {
            if(param[j] < minBiggerAverage && param[j] > average)
                minBiggerAverage = param[j];
        }
        return minBiggerAverage;
    }

    public static int ungeradeZahlenZaehlen(int[] param)
    {
        int odd = 0;
        for(int i=0; i<param.length; i++)
        {
            if (param[i] % 2 == 0) {
            } else {
                odd++;
            }
        }
        return odd;
    }

    public static boolean klammerungPruefen(String zeichenkette)
    {
        int i = 0;
        int klammerAuf = 0;
        int klammerZu = 0;
        boolean auf = false;

        while(zeichenkette.length() > i)
        {
            if((zeichenkette.charAt(i) + "").equals("("))
            {
                klammerAuf++;
                auf = true;
            }
            else if((zeichenkette.charAt(i) + "").equals(")") && auf)
            {
                klammerZu++;
                if(klammerAuf == klammerZu)
                {
                    auf = false;
                }
            }
            else if((zeichenkette.charAt(i) + "").equals(")") && !auf)
                return false;
            i++;
        }
        return !auf;
    }

    public static double[][] matrixTransponieren(double[][] matrix)
    {
        double[][] matrix2 = new double[matrix.length][matrix.length];

        for(int i=0;i<matrix.length;i++)
        {
            for (int j=0;j<matrix[i].length;j++)
            {
                matrix2[j][i] = matrix[i][j];
            }
        }

        return matrix2;
    }

    public static double geometrischeReihe()
    {
        double sum = 0;
        for(int i=0; sum != sum + 1/Math.pow(2,i); i++)
        {
            sum = sum + 1/Math.pow(2,i);
        }
        return sum;
    }

    public static int[][] dreieckstausch(int[] a, int[] b)
    {
        if(a.length == b.length)
        {
            int[] c = new int[a.length];
            for(int i=0; i != a.length; i++)
            {
                c[i] = a[i];
            }
            for(int i=0; i != b.length; i++)
            {
                a[i] = b[i];
            }
            for(int i=0; i != c.length; i++)
            {
                b[i] = c[i];
            }
        }
        else
            System.out.println("Die Arrays sind nicht gleich lang.");
        int[][] end = {a,b};
        return end;
    }

    public static void muenzautmat(float eingabe)
    {
        int[] ausgabe = new int[8]; 
        int[] muenzen = {200,100,50,20,10,5,2,1}; 
        eingabe = (int)(eingabe * 100);
        String out = "";

        int i = 0;
        for(int cent: muenzen)
        {
            ausgabe[i] = (int)eingabe/cent;
            eingabe = eingabe - ausgabe[i] * cent;
            if(cent >= 100)
                out = out + ausgabe[i] + " x " + cent/100 + "â‚¬ ";
            else
                out = out + ausgabe[i] + " x " + cent + "Cent ";
            i++;
        }
        System.out.println(out);
    }

    public static int[] siebDesEratosthenes(int max)
    {
        boolean[] zahlen = new boolean[max+1];    
        int min = 2;

        for(int i=0; i<=max; i++)
        {
            zahlen[i] = true;
        }

        for(int j=0; j<=max; j++)
        {
            for(int i=0; i<=max; i++)
            {
                if(zahlen[i] && i % min == 0)
                {
                    zahlen[i] = false;
                }
            }

            int temp = min;
            for(int i=0; temp==min; i++)
            {
                if(zahlen[i])
                {
                    min = i;
                }
            }
        }
        ArrayList<string> primZahlen;
        primZahlen = new ArrayList<int>();
        for(int i=0; i<=max; i++)
        {
            if(zahlen[i])
            {
                primZahlen.add();
            }
        }
    }
}