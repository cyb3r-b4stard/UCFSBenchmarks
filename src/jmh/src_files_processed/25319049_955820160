
/**
 * ## ### #### # ###### ######### #### (###### ######### ######)
 * 
 * @###### (####### ###### ) 
 * @####### (##/##/##)
 */
import java.util.Scanner;

public class Exercises
{
    public static void populationMexico(){
        int year = 2005;
        double growthRate = 1.017;
        double pop = 106.2;

        while (pop < 120){
            pop *= growthRate; 
            year++;
        }

        System.out.print("The population of Mexico will reach 120 million in " + year + ".");
    }

    public static int learningKevin(){
        double learnRate = 0.10;
        double knowledge = 0;
        int month = 0;

        while (knowledge < 0.95){
            knowledge += learnRate*(1-knowledge);
            month++;
        }
        return month;
    }

    public static void main(String [] args){
        int month = learningKevin();
        int years = ( month / 12);
        int monthsLeft = ( month % 12);
        System.out.println( "It will take Kevin " + years + " years and "  + monthsLeft + " months to get ready for the exam.");
    }

    public static int addOdds (int n){
        int sum = 0;
        for ( int i = 1; i <= n; i += 2){
            sum += i;
        }
        return sum;
    }

    public static void sum(){
        Scanner scanner = new Scanner(System.in);
        System.out.print("Please enter a positive integer under 10: ");
        int n = scanner.nextInt();
        int sum = 0;
        for (int i = 1; i < n; i++){
            System.out.print( i + " + ");
            sum += i;
        }
        System.out.print( n + " = " + (sum + n));
    }

    public static boolean isPrime(int n){
        if (n <= 2)
            return n == 2;
        else if (n % 2 == 0)
            return false;

        int m = 3;
        while ( m * m <= n){
            if (n % m == 0)
                return false;

            else 
                m+=2;
        }
        return true;
    }

    public static boolean isPrime2 (int n){
        if (n<= 4)
            return n == 2 || n == 3;
        else if ((n % 2 == 0) || (n % 3 == 0))
            return false;

        int m = 5;
        while ( m * m <= n){
            if ( n % m == 0 || n % (m + 2) == 0)
                return false;
            else
                m+=6;
        }
        return true;
    }

    public static boolean isPerfectSquare(int x){
        int base = 1;
        int sum = 0;

        while (sum < x){
            sum += base;
            base += 2;
        }

        if (sum == x)
            return true;
        else 
            return false;
    }

    public static int sumDigits(int x) {
        int sum = 0;
        int operation = 10;

        while ( x >= 0){
            sum += (x % operation);
            operation*=10;
        }
        return sum;
    }

    /** 
     * Exercise #10
     * Returns an estimate r of the square root of a such that |r^2 - a| < 0.01
     * Precondition: a is a positive number 
     */
    public static double sqrtEst(double a)
    {
        double r = a/2;
        double diff;

        do
        {
        } while(/*input condition here*/);

        return r;
    }

}
