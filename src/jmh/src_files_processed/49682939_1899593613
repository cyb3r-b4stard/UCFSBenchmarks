
/* #### ### ####### - ######
 * ####: ##### ######
 * ########: ##### ######
 * ##: #########
 */

import java.util.*;
import ecs100.*;
import java.awt.Color;
import java.io.*;

/** #### ########## ## #### #####
 *  ########## ### ##### #########.
 *  ##### ###### ## ###### ### ########, ####, ### ######
 */

public class Oval implements Shape {
    /*# YOUR CODE HERE */
    private double x; 
    private double y; 
    private double wd;
    private double ht; 
    private Color col;
    
    /** Constructor with explicit values
     *  Arguments are the x and y of the top left corner,
     *  the width and height, and the color.  
     */
    public Oval (double x, double y, double wd, double ht, Color col){
        /*# YOUR CODE HERE */
        this.x = x;
        this.y = y; 
        this.wd = wd;
        this.ht = ht;
        this.col = col;

    }

    /** [Completion] Constructor which reads values from a String
     *  that contains the specification of the Oval. 
     *  The format of the String is determined by the toString method.
     *        The first 3 integers specify the color;
     *        the following four numbers specify the position and the size.
     */
    public Oval(String description) {
        /*# YOUR CODE HERE */
        Scanner data = new Scanner(description);
        int red = data.nextInt();
        int green = data.nextInt();
        int blue = data.nextInt();
        this.col = new Color(red, green, blue);
        this.x = data.nextDouble();
        this.y = data.nextDouble();
        this.wd = data.nextDouble();
        this.ht = data.nextDouble();
    }

    /** Returns true if the point (u, v) is on top of the shape */
    public boolean on(double u, double v){
        /*# YOUR CODE HERE */
        return (Math.hypot(u-this.x, v-this.y) < (u-this.x ,v-this.y));
        
    }

    /** Changes the position of the shape by dx and dy.
     *  If it was positioned at (x, y), it will now be at (x+dx, y+dy)
     */
    public void moveBy(double dx, double dy){
        /*# YOUR CODE HERE */
        this.x += dx;
        this.y += dy;
        this.wd += dx;
        this.ht += dy;
    }

    /** Draws the oval on the graphics pane. 
     *  It draws a black border and fills it with the color of the oval.
     */
    public void redraw(){
        /*# YOUR CODE HERE */
        UI.fillOval(this.x, this.y, this.wd, this.ht);
        UI.setColor(Color.red);
        UI.drawOval(this.x, this.y, this.wd, this.ht);

    }

    /** Returns a string description of the oval in a form suitable for
     *  writing to a file in order to reconstruct the oval later
     *  The first word of the string must be Oval 
     */
    public String toString(){
        /*# YOUR CODE HERE */
        return ("Oval "+col.getRed()+" "+col.getGreen()+" "+col.getBlue()+" "+this.x+" "+this.y+" "+this.wd+" "+this.ht);
    }

}