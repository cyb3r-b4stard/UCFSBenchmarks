
/**
 * ####### #, ########### ### ########## #########
 * ####### #. ### ######## ###### ####
 * ## ######## ## ######## ###### ####
 * # ###### ## # #### ######## ##### #### ### #### ### # #######, ##### ##### ## ####### ### ##### ### ####### ## ### ## ####### ### #######.
 * ## ##### ### ## ######### ####### ## ### #####, ### ###### #### #### # ## ###### ###### #####.
 * #### ######## ### # ####### "####### #########", ##### ##### ######### ####### ## ### ## ####### ### ##### ### ## ## ### ####### ### #######
 * ### ### ## #### #### ## ## #### ### ### ####### ####### ## ### #### #### ###.
 * 
 */
public class AdvancedShop
{
    /**
     * This is an array of customer object which corresponds to the queue of people waiting
     */
    private Customer[] q;

    /**
     * Constructor for objects of class AdvancedShop.
     * Sets the length of the queue to given number if seats.
     * Assume the number of seats is greater than 0.
     * 
     * @param n the number of seats in the queue
     */
    public AdvancedShop (int n)
    {
        q = new Customer[n];
    }

    /**
     * Shows the current state of the queue.
     * 
     * @return the queue of the waiting customers.
     */
    public int getQueue (int n)
    {
        if ( n <= 0)
        {
            return 0;
        }
        
        for (i = 0; i < n.length; i++)
        {
            n[i] = 0
        }
        return ;
    }

    /**
     * Section b)
     * Computes a function addToQueue which adds an entry to the end of the queue if a free space is available.
     * The function should take the queue (as an array) and the "waiting tolerance" of the new customer (assumed to be >0) as the input values.
     * The function should return a boolean value, namely true if the entry was succesfully added, and false if there is no space in the queue.
     * 
     * 
     */
    public boolean addToQueue()
    {
        return false;
    }

    /**
     * Section c)
     * Compute a function removeFromQueue that will remove the first entry from the queue.
     * The function should the advance the queue, by moving all waiting customers forward, leaving an additional free space at the end of the queue.
     * It should then return a boolean value, true if there was a customer waiting in the queue, and the false if the queue was empty.
     * 
     */
    public boolean removeFromQueue()
    {
        return false;
    }

    /**
     * 
     */
    public void expire()
    {
    }

    /**
     * 
     * 
     */
    public int arrivingCustomer()
    {
        return 3;
    }

    /**
     * 
     */
    public int serveOneCustomer()
    {
        return 4;
    }

    /**
     * 
     */
    public int runDay()
    {
        return 5;
    }

    /**
     * 
     * 
     */
    public int averageRevenue()
    {
        return 6;
    }
}