import java.util.Scanner;
/**
 * ##### # ########### ## ##### ########## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class CardDealer
{
     public static Scanner keyboard;
     public static String response;
    String[][] cards1 = new String[4][5];
    
    public static void beatThisFool()
    {
        keyboard = new Scanner( System.in );
         int numCards = 0;
        for( int i = 1 ; i < 6 ; i++)
        {
            System.out.print(i+".  ");
             response = keyboard.nextLine(); 
             String[] cards = {response.substring(4,6) , response.substring(8,10) , response.substring(12,14) , response.substring(16,18) , response.substring(20) };
           System.out.println(suitMatch(response));
           boolean found = false;
       
            if(suitMatch(response))
        {
            for( int b = 0 ; b>6 ; b++){ 
            for( int k = 3; k >=0 ; k--)
         {
             
             if( cardToInt(cards[k+1]) < cardToInt(cards[k] ) )
             {
                 String temp = cards[k+1];
                 cards[k+1] = cards[k];
                 cards[k] = temp;
                }
            }
        }
        Systemout.println(cards[0] +
            if( cardToInt(response.substring(0,2) ) < 14)
            {
                for( int m = 0; m < 5; m++)
                {
                 if( cardToInt(cards[m] )< 14 && cardToInt(cards[m] ) > cardToInt(response.substring(0,2) ) )
                 {System.out.println("    " + i + ".  " + cards[m]);
                  found = true;
                  break;
                 }
                }
                
                if(!found){
                for( int s = 0; s < 5; s++)
                {
                 if( cardToInt(cards[s] ) < 14  )
                 {System.out.println("    " + i + ".  " + cards[s]);
                  break;
                 }
                }
                }
            }
            
             if( cardToInt(response.substring(0,2) ) > 13 && cardToInt(response.substring(0,2) ) < 27)
            {
                for( int m = 0; m < 5; m++)
                {
                    if( cardToInt(cards[m] ) > 13 &&  cardToInt(cards[m] ) < 27 && cardToInt(cards[m] ) > cardToInt(response.substring(0,2) ) )
                    {System.out.println("    " + i + ".  " + cards[m]);
                        found = true;
                    break;
                    }
              }
              if(!found){
              for( int s = 0; s < 5; s++)
                {
                 if( cardToInt(cards[s] ) > 13 &&  cardToInt(cards[s] ) < 27  )
                 {System.out.println("    " + i + ".  " + cards[s]);
                  break;
                 }
                }
            }
            }
            
            if( cardToInt(response.substring(0,2) ) > 26 && cardToInt(response.substring(0,2) ) < 40)
            {
                for( int m = 0; m < 5; m++)
                {
                    if( cardToInt(cards[m] ) > 26 && cardToInt(cards[m] ) > cardToInt(response.substring(0,2) ) )
                   { System.out.println("    " + i + ".  " + cards[m]);
                       found = true;
                       break;
                    }
              }
              if(!found){
              for( int s = 0; s < 5; s++)
                {
                 if( cardToInt(cards[s] ) < 14  )
                 {System.out.println("    " + i + ".  " + cards[s]);
                  break;
                 }
                }
            }
            }
            
            if( cardToInt(response.substring(0,2) ) > 39 )
            {
                for( int m = 0; m < 5; m++)
                {
                        if( cardToInt(cards[m] ) > 39 && cardToInt(cards[m] ) > cardToInt(response.substring(0,2) ) )
                        {System.out.println("    " + i + ".  " + cards[m]);
                            found = true;
                            break;
                    }
              }
             if(!found){
              for( int s = 0; s < 5; s++)
                {
                 if( cardToInt(cards[s] ) < 14  )
                 {System.out.println("    " + i + ".  " + cards[s]);
                  break;
                 }
                }
            }
           }
        }
        else
        {
        System.out.println("    " + i + ".  " + cards[0]);
        }        
             
                }

    }
        
    public static boolean suitMatch(String s)
    {
        for(int i = 4; i<22 ; i++)
             { if(response.charAt(1) ==response.charAt(i))
                 {
                 return true;
                }
            }
            return false;
    }
    /* public static void rankCards()
     {
         String[] cards = {response.substring(4,5) , response.substring(8,9) , response.substring(12,13) , response.substring(16,17) , response.substring(20,21) };
         
         for( int i = 4; i >=0 ; i--)
         {
             String temp = cards[i];
             if( cardToInt(cards[i]) < cardToInt(cards[i-1] ) )
             {
                 cards[i] = cards[i-1];
                 cards[i-1] = temp;
                }
            }
      }
    */
    
  
    public static int cardToInt(String value)
    {
        switch(value)
        {
            default:
            case "AC" :
                return 1;
                
            case "2C":
                return 2;
                
            case "3C":
                return 3;
           
            case "4C":
                return 4;
                
            case "5C":
                return 5;
                
            case "6C":
                return 6;
           
            case "7C":
                return 7;
                
            case "8C":
                return 8;
                
            case "9C":
                return 9;
           
            case "TC":
                return 10;
                
            case "JC":
                return 11;
                
            case "QC":
                return 12;
            
            case "KC":
                return 13;
                
                       
            case "AD":
                return 14;
                
            case "2D":
                return 15;
                
            case "3D":
                return 16;
           
            case "4D":
                return 17;
                
            case "5D":
                return 18;
                
            case "6D":
                return 19;
           
            case "7D":
                return 20;
                
            case "8D":
                return 21;
                
            case "9D":
                return 22;
           
            case "TD":
                return 23;
                
            case "JD":
                return 24;
                
            case "QD":
                return 25;
            
            case "KD":
                return 26;
            
            case "AH":
                return 27;
                
            case "2H":
                return 28;
                
            case "3H":
                return 29;
           
            case "4H":
                return 30;
                
            case "5H":
                return 31;
                
            case "6H":
                return 32;
           
            case "7H":
                return 33;
                
            case "8H":
                return 34;
                
            case "9H":
                return 35;
           
            case "TH":
                return 36;
                
            case "JH":
                return 37;
                
            case "QH":
                return 38;
            
            case "KH":
                return 39;
            
            case "AS":
                return 40;
                
            case "2S":
                return 41;
                
            case "3S":
                return 42;
           
            case "4S":
                return 43;
                
            case "5S":
                return 44;
                
            case "6S":
                return 45;
           
            case "7S":
                return 46;
                
            case "8S":
                return 47;
                
            case "9S":
                return 48;
           
            case "TS":
                return 49;
                
            case "JS":
                return 50;
                
            case "QS":
                return 51;
            
            case "KS":
                return 52;
        }
        
    }
    
    public static int rankCards(String value)
    {
        switch(value)
        {
            default:
            case "AC" :
                return 1;
                
            case "2C":
                return 5;
                
            case "3C":
                return 9;
           
            case "4C":
                return 13;
                
            case "5C":
                return 17;
                
            case "6C":
                return 21;
           
            case "7C":
                return 25;
                
            case "8C":
                return 29;
                
            case "9C":
                return 33;
           
            case "TC":
                return 37;
                
            case "JC":
                return 41;
                
            case "QC":
                return 45;
            
            case "KC":
                return 49;
                
                       
            case "AD":
                return 2;
                
            case "2D":
                return 6;
                
            case "3D":
                return 10;
           
            case "4D":
                return 14;
                
            case "5D":
                return 18;
                
            case "6D":
                return 22;
           
            case "7D":
                return 26;
                
            case "8D":
                return 30;
                
            case "9D":
                return 34;
           
            case "TD":
                return 38;
                
            case "JD":
                return 42;
                
            case "QD":
                return 46;
            
            case "KD":
                return 50;
            
            case "AH":
                return 3;
                
            case "2H":
                return 7;
                
            case "3H":
                return 11;
           
            case "4H":
                return 15;
                
            case "5H":
                return 19;
                
            case "6H":
                return 23;
           
            case "7H":
                return 27;
                
            case "8H":
                return 31;
                
            case "9H":
                return 35;
           
            case "TH":
                return 39;
                
            case "JH":
                return 43;
                
            case "QH":
                return 47;
            
            case "KH":
                return 51;
            
            case "AS":
                return 4;
                
            case "2S":
                return 8;
                
            case "3S":
                return 12;
           
            case "4S":
                return 16;
                
            case "5S":
                return 20;
                
            case "6S":
                return 24;
           
            case "7S":
                return 28;
                
            case "8S":
                return 32;
                
            case "9S":
                return 36;
           
            case "TS":
                return 40;
                
            case "JS":
                return 44;
                
            case "QS":
                return 48;
            
            case "KS":
                return 52;
        }
    }
}