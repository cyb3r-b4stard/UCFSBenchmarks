
/* #### ### ####### ########## # 
 * ####: 
 * ########:
 * ##:
 */

import ecs100.*;
import java.io.*;
import java.util.*;
import java.awt.Color;

/**
 * #### ## ####### ## #### ####### #### ########## # ##### ######## ######## ######
 * #######, ####### ## ####### #### #### ### ####, ## ##### ### #### ####
 * # #### #### ## #########, ##### ##### #### ## ### ####### ### #######
 * #### ###### ### ## #### ######### ####.
 * ## ### #### #### #### #### ###### #### ## #######.
 * ### ####### ### ########## ## ## ######## ### ### ###### ### ##
 *   ######## ### ### ###### ###### ##### ### ##### ####.
 *
 * ##### ### ## ####### ### ### ## ########, ### ######## ## ### ######### ## ####.
 * ####
 *  ######:              ##### ####### #### ## #########.
 *  #########:           ######## ### ########.
 *  ##################:  ###### ### ### ######## ## #### ### ###### ## #########.
 * ##########
 *  ########:            ######## ### ###### #### ### ########## ##### ### ####### ### #####.
 *  ###################: ##### ## ### ### ######### #### ## ### ######.
 *  ################:    ##### ### ##### #### ##### ##### #######.
 * #########
 *  ###########:         ########## ### ### ###### #### ## ##### ## ## ##########.
 *  #############:       ######## ### ##### ########.
 *  #############:       ######## ### ##### ########.
 *  ######:              ##### ### ####### ######## ###### #### # ####.
 *  ###### ### ####:     ### ### #### ###### # ####### ## ### ######## #### ### #####
 *                       ## ###### ####.  ### # #### ###### ## #### ### ###### ######.
 */

public class WaveformAnalyser{
    private ArrayList<Double> waveform;   

    public static final double THRESHOLD = 200;

    public static final int GRAPH_LEFT = 10;
    public static final int ZERO_LINE = 260;

    public static final int SIZE_CIRCLE = 10;

    /**
     * [CORE]
     * Clears the panes, 
     * Creates an ArrayList stored in a field, then
     * Asks user for a waveform file (eg waveform1.txt) 
     * Reads data from the file into the ArrayList
     */
    public void doRead(){
        UI.clearPanes();
        String fname = UIFileChooser.open();
        /*# YOUR CODE HERE */
        this.waveform = new ArrayList<Double>();
        try {
            Scanner sname = new Scanner(new File(fname));
            while (sname.hasNext()){
                waveform.add(sname.nextDouble());
            }

        } catch(IOException e) {UI.println("File reading failed: "+e);}

        UI.println("Read "+ this.waveform.size()+" data points from " + fname);
    }

    /**
     * [CORE]
     * Displays the waveform as a line graph,
     * The n'th value in waveform is displayed at
     *    x-position is GRAPH_LEFT + n
     *    y-position is ZERO_LINE - the value
     * Plots a line graph of all the points with a blue line between
     *  each pair of adjacent points
     * Draw the horizontal line representing the value zero.
     * Uses GRAPH_LEFT and ZERO_LINE for the dimensions and positions of the graph.
     * Don't worry if the lines go off the window
     */
    public void doDisplay(){
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        UI.clearGraphics();

        UI.setColor(Color.black);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE, GRAPH_LEFT + this.waveform.size() , ZERO_LINE); 

        /*# YOUR CODE HERE */
        double x2 = 0;
        double x1 = 0;
        double y2 = 0;
        double y1 = 0;
        for (int i = 0; i < this.waveform.size(); i++) {
            x2 = x1;
            y2 = y1;
            x1 = GRAPH_LEFT + i;
            y1 = ZERO_LINE - this.waveform.get(i);
            if (x1 != x2) {
                UI.drawLine(x1, y1, x2, y2);
            }
        }

    }

    /**
     * [CORE]
     * Computes and prints out the fraction of time the signal is distorted. 
     * This fraction of time is defined as the number of distorted values, divided by the number of values. 
     * A distorted value is defined as one whose absolute
     * value is greater than the value of THRESHOLD 
     * [Hint] You may find Math.abs() useful for this method - it computes the absolute value
     */
    public void doReportDistortion() {
        if (this.waveform == null){ 
            UI.println("No signal to analyse and report on");
            return;
        }
        double fraction = 0;
        /*# YOUR CODE HERE */
        double THRESHOLD = UI.askDouble("Distortion threshold value?");
        double distorted = 0;
        for (int i = 0; i < this.waveform.size(); i++) {
            double CV = (this.waveform.get(i));
            if (Math.abs(CV) > THRESHOLD) {
                distorted++;
            }
        }
        fraction = distorted/this.waveform.size();

        UI.printf("Fraction of time the signal is distorted %4.3f\n", fraction);
    }

    /**
     * [COMPLETION]
     * The spread is the difference between the maximum and minimum values of the waveform.
     * Finds the maximum and minimum values, then
     * Displays the spread by drawing two horizontal lines on top of the waveform: 
     *   one green line for the maximum value, and
     *   one red line for the minimum value.
     */
    public void doSpread() {
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        this.doDisplay();
        /*# YOUR CODE HERE */
        double MAX = Double.MIN_VALUE;
        double MIN = Double.MAX_VALUE;
        double current;
        for (int i = 0; i < this.waveform.size(); i++) {
            current = this.waveform.get(i);
            if (current > MAX) {
                MAX = current;
            } 
            if (current < MIN) {
                MIN = current;
            }

        }
        UI.setColor(Color.green);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE-MAX, GRAPH_LEFT+this.waveform.size(), ZERO_LINE-MAX);
        UI.setColor(Color.red);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE-MIN, GRAPH_LEFT+this.waveform.size(), ZERO_LINE-MIN);
        UI.println(MAX);
        UI.println(MIN);

    }

    /**
     * [COMPLETION]  [Fancy version of doDisplay]
     * Display the waveform as a line graph. 
     * Draw a line between each pair of adjacent points
     *   * If neither of the points is distorted, the line is BLUE
     *   * If either of the two end points is distorted, the line is RED
     * Draw the horizontal lines representing the value zero and thresholds values.
     * Uses THRESHOLD to determine distorted values.
     * Uses GRAPH_LEFT and ZERO_LINE for the dimensions and positions of the graph.
     * [Hint] You may find Math.abs(int a) useful for this method.
     * You may assume that all the values are between -250 and +250.
     */
    public void doDisplayDistortion() {
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        UI.clearGraphics();

        UI.setColor(Color.black);
        UI.drawLine(GRAPH_LEFT, ZERO_LINE, GRAPH_LEFT + this.waveform.size() , ZERO_LINE); 

        /*# YOUR CODE HERE */
        double fraction = 0;
        double THRESHOLD = UI.askDouble("Distortion threshold value?");
        double distorted = 0;
        boolean bluered;

        double x2 = 0;
        double x1 = 0;
        double y2 = 0;
        double y1 = 0;

        for (int i = 0; i < this.waveform.size(); i++) {
            double CV = (this.waveform.get(i));

            if (Math.abs(CV) > THRESHOLD) {
                UI.setColor(Color.red);
            } else if (Math.abs(CV) < THRESHOLD) {
                UI.setColor(Color.blue);
            }
            x2 = x1;
            y2 = y1;
            x1 = GRAPH_LEFT + i;
            y1 = ZERO_LINE - this.waveform.get(i);
            if (x1 != x2) {
                UI.drawLine(x1, y1, x2, y2);
            }

        }

    }

    /**
     * [COMPLETION]
     * Plots the peaks with small green circles. 
     *    A peak is defined as a value that is greater or equals to both its
     *    neighbouring values.
     * Note the size of the circle is in the constant SIZE_CIRCLE
     * You may assume that peaks values differ from their neighbouring points.
     */
    public void doHighlightPeaks() {
        this.doDisplayDistortion(); 
        /*# YOUR CODE HERE */
        double prev = -10000; 
        double curr;
        double next;
        for (int i = 0; i < this.waveform.size(); i++) {
            if (i != 0) {
                prev = (this.waveform.get(i-1));
            }
            curr = this.waveform.get(i);
            next = this.waveform.get(i+1);
            if (prev != 10000) {
                if ((curr > prev && curr > next)) {
                    UI.fillOval((GRAPH_LEFT+i-SIZE_CIRCLE/2), (ZERO_LINE-this.waveform.get(i)-SIZE_CIRCLE/2), (SIZE_CIRCLE));
                }
            }
        }
    }

    /**
     * [CHALLENGE]
     * Finds the largest value (positive or negative) in the waveform, and
     * normalises all the values down so that the largest value is now equal to
     * the distortion threshold.
     * Then redraws the waveform.
     */
    public void doNormalise() {
        /*# YOUR CODE HERE */

        this.doDisplayDistortion(); 
    }

    public void doEnvelope(){
        if (this.waveform == null){ 
            UI.println("No waveform to display");
            return;
        }
        this.doDisplay();  
        this.upperEnvelope();
        this.lowerEnvelope();
    }

    /**
     * [CHALLENGE]
     * Displays the upper envelope with GREEN lines connecting all the peaks.
     *    A peak is defined as a point that is greater or equal to *both* neighbouring points.
     * DO NOT clear the graphics as we also want to view the waveform.
     */
    public void upperEnvelope() {
        /*# YOUR CODE HERE */
    }

    /**
     * [CHALLENGE]
     * Displays the lower envelope with RED lines connecting all the "negative" peaks.
     *    A "negative" peak is defined as a point that is smaller or equal to *both* neighbouring points.
     * DO NOT clear the graphics as we also want to view the waveform.
     */
    public void lowerEnvelope() {
        /*# YOUR CODE HERE */

    }

    /**
     * [CHALLENGE]
     * Saves the current waveform values into a file
     */
    public void doSave(){
        /*# YOUR CODE HERE */

    }

    private int index1;
    /**
     * [CHALLENGE]
     * Lets user select a region of the waveform with the mouse
     * and deletes that section of the waveform.
     */
    public void doMouse(String action, double x, double y){
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/

    /** Constructor:
     * Set up the ten buttons and mouselistener
     */
    public WaveformAnalyser(){
        UI.addButton("Read Data", this::doRead);
        UI.addButton("Display Waveform", this::doDisplay);
        UI.addButton("Report Distortion", this::doReportDistortion);
        UI.addButton("Spread", this::doSpread);
        UI.addButton("Display Distortion", this::doDisplayDistortion);
        UI.addButton("Peaks", this::doHighlightPeaks);
        UI.addButton("Normalise", this::doNormalise);
        UI.addButton("Envelope", this::doEnvelope);
        UI.addButton("Save", this::doSave);
        UI.addButton("Quit", UI::quit);
        UI.setMouseListener(this::doMouse);   

    }

    public static void main(String[] arguments){
        new WaveformAnalyser();
    }   

}