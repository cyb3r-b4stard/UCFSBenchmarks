
/* #### ### ####### ########## #
 * ####:########## #######
 * ########:##########
 * ##:#########
 */

import ecs100.*;
import java.util.*;
import java.io.*;
import java.awt.Color;

/**
 *  #### # ###### #### # ###### ######### ######## ####.
 *  ######## ### ########### ##### #### ### ####### #### # ## # ##
 *  #### (##### #### ####).
 *  ### ###### ### # "####" ##### ### ####### ## ## ### ########.
 *  #### ### ####### ### ######## ## ##### ####, #### ### ##### ########
 *  #### ##### #### #### ### #####, ### #### ### #### ## #### ######## #### # ###
 *  ## #### ### #### ## ##### "####".
 *  ### #### ### ########## ## ### ####### ### ## ### ######## ### #######
 *  ## #### ######## #####. 
 *
 *  ####### ######
 *  ### ######## ### ########### ## ####### ## ### ###### #####.
 *  ### ###### ########### #### ######### # ###, ###### ######.
 *  ####### #### # ####(###### #, ###### #) ###### #### #### #### ###
 *  ###### ## ### ######## #### ## ### ######### ########.
 *  
 *  ### ####### ### ### ### ######:
 *    ####:  ## ##### #### ### #### # #######. 
 *    #####: ## ######### ## ### ####### #### #### #### ###### ## ### #####.
 *    
 *  ### #### ###### ## ######### #### ### ### ## ### ######## #### #### #
 *   ########### ###### ### #### ###### ##### ## ### ##### ## ### ####.
 *  ##### ###### ## ### #### ###### ## ########### ## ##### ### ######### ## #####.
 *
 *  ### #### ### ###### # ######## ## ### #### ##### ### #####.
 *  ### ######## ###### (## ##### #####) ###### ## ########### ####
 *  # ###### ###### ##.
 *  
 *  ### #### ### ### ### "####" ## "#####" ###### ## #### ### ######## ######
 *  (## ### #####) ## ### #### ## ### #####, ## ##### #### ### ###### ##
 *  ####### #### ### ######## ## ### ######## ######## ## ### ####.
 *  ## ### ######## ######## ######## # ######, ### ####
 *  ### ### ### "#####" ###### ## #### ### ######## ###### ## ### #####.
 *  
 *  ## ##### ### ### ##### ######### ## ### ####, ### #### ### ### ###
 *  "######" ###### ## ### # ### (######) ###### ##### #### ## ##### ##
 *  ### #### ## ### ######## ##### ########.
 *
 *  ### ##### ## ########### ## ## ######### ## #######.
 *  ## ### ######### ## ### #### ### ##### ###### ## #####.
 *  ####### ###### ## ##### ## ### ### ## ### #####.
 *  ### ##### ###### ## ######### ## #### ## ### ### ## ### ######## ####.
 */

public class DominoGame{
    public static final int NUM_HAND = 6;    

    private Domino[] hand;            
    private ArrayList<Domino> table;  

    private int selectedPos = 0;      


    public static final int HAND_LEFT = 60; 
    public static final int HAND_TOP = 5;   
    public static final int DOMINO_SPACING = 54; 
    public static final int DOMINO_HEIGHT = 100; 

    public static final int TABLE_LEFT = 10;                
    public static final int TABLE_TOP = 120;   

    /**  Constructor:
     * Initialise the hand field to have an array that will hold NUM_HAND Dominos
     * Initialise the table field to have an ArrayList of Dominos,
     * set up the GUI (buttons and mouse)
     *  restart the game
     */
    public DominoGame(){
        /*# YOUR CODE HERE */
        UI.setMouseListener(this::doMouse);
        UI.addButton("Pickup", this::pickup);
        UI.addButton("Place", this::placeDomino);
        UI.addButton("Flip", this::flipDomino);
        UI.addButton("Left", this::moveLeft);
        UI.addButton("Right", this::moveRight);
        UI.addButton("Restart", this::restart);
        UI.addButton("Quit", UI::quit);
        hand = new Domino[NUM_HAND];
        table = new ArrayList<Domino>();  

        this.redraw();
    }

    /**
     * Restart the game:
     *  set the table to be empty,
     *  set the hand to have no dominos
     */
    public void restart(){
        /*# YOUR CODE HERE */
        for(int i=0; i<hand.length; i++){
            hand[i] = null;

        }
        for(int i=0; i<table.size(); i++){
            table.get(i);
            table.remove(i);

        }

        this.redraw();
    }

    /**
     * If there is at least one empty position on the hand, then
     * create a new random domino and put it into the first empty position on the hand.
     * (needs to search along the array for an empty position.)
     */
    public void pickup(){
        /*# YOUR CODE HERE */
        for(int i=0; i<NUM_HAND; i++){
            if(hand[i] == null){
                hand[i] = new Domino();
                break;               

            }
        }

        this.redraw();
    }

    /**
     * Draws the outline of the hand,
     * draws all the Dominos in the hand,
     * highlights the selected position in some way
     */
    public void drawHand(){
        /*# YOUR CODE HERE */
        UI.setLineWidth(1);
        UI.setColor(Color.black);
        UI.drawRect(HAND_LEFT-3, HAND_TOP-3, HAND_LEFT+(DOMINO_SPACING*5)-5, HAND_TOP+DOMINO_HEIGHT-1);
        UI.setColor(Color.blue);
        UI.setLineWidth(2);
        UI.drawRect(HAND_LEFT+DOMINO_SPACING*selectedPos-1,HAND_TOP-1, HAND_LEFT-8, HAND_TOP+DOMINO_HEIGHT-4);
        for(int i=0; i<NUM_HAND; i++){
            if(hand[i]!=null){
                hand[i].draw(HAND_LEFT+DOMINO_SPACING*i,HAND_TOP); 

            }
        }
    }

    /**
     * Move domino from selected position on hand (if there is domino there) to the table
     * The selectedPos field contains the index of the selected domino.
     */
    public void placeDomino(){
        /*# YOUR CODE HERE */
        table.add(hand[selectedPos]);

        this.redraw();
    }

    /**
     * Draws the list of Dominos on the table, 10 to a row
     * Note, has to wrap around to a new row when it gets to the
     * edge of the table
     */
    public void drawTable(){
        /*# YOUR CODE HERE */
        UI.setColor(Color.black);
        UI.drawRect(TABLE_LEFT, TABLE_TOP, TABLE_LEFT+DOMINO_SPACING*10, 100000);
        for(int i=0; i<10; i++){
            if(table[i]<Domino> !=null){
                table[i].draw(HAND_LEFT+DOMINO_SPACING*i,HAND_TOP); 

            }
        }

    }

    /**
     * If there is a domino at the selected position in the hand, 
     * flip it over.
     */
    public void flipDomino(){
        /*# YOUR CODE HERE */
        for(int i=0; i<NUM_HAND; i++){
            if(i == selectedPos){
                hand[i].flip();
            }
        }

        this.redraw();
    }

    /**
     * Swap the contents of the selected position on hand with the
     * position on its left (if there is such a position)
     * and also decrement the selected position to follow the domino 
     */
    public void moveLeft(){
        /*# YOUR CODE HERE */
        if(selectedPos>0){
            Domino temp=hand[selectedPos];
            hand[selectedPos]=hand[selectedPos-1];
            hand[selectedPos-1]= temp;
            selectedPos--;

        }

        this.redraw();
    }

    /**
     * Swap the contents of the selected position on hand with the
     *  position on its right (if there is such a position)
     *  and also increment the selected position to follow the domino 
     */
    public void moveRight(){
        /*# YOUR CODE HERE */
        if(selectedPos<hand.length-1){
            Domino temp=hand[selectedPos];
            hand[selectedPos]=hand[selectedPos+1];
            hand[selectedPos+1]= temp;

            selectedPos++;

        }

        this.redraw();
    }

    /**
     * If the table is empty, only a double can be suggested.
     * If the table is not empty, see if one domino has a number that matches one of the 
     *    numbers of the last domino.
     */
    public void suggestDomino(){
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/

    /** Allows the user to select a position in the hand using the mouse.
     * If the mouse is released over the hand, then sets  selectedPos
     * to be the index into the hand array.
     * Redraws the hand and table */
    public void doMouse(String action, double x, double y){
        if (action.equals("released")){
            if (y >= HAND_TOP && y <= HAND_TOP+DOMINO_HEIGHT && 
            x >= HAND_LEFT && x <= HAND_LEFT + NUM_HAND*DOMINO_SPACING) {
                this.selectedPos = (int) ((x-HAND_LEFT)/DOMINO_SPACING);
                UI.clearText();UI.println("selected "+this.selectedPos);
                this.redraw();
            }
        }
    }

    /**
     *  Redraw the table and the hand.
     *  To work with the code above, this needs to use the constants:
     *   - DOMINO_SPACING, HAND_HEIGHT, HAND_LEFT, HAND_TOP, TABLE_LEFT, TABLE_TOP
     *   See the descriptions where these fields are defined.
     *  Needs to clear the graphics pane,
     *  then draw the hand with all its dominos, 
     *  then outline the selected position on the hand
     *  then draw the rows of dominos on the table.
     */
    public void redraw(){
        UI.clearGraphics();
        this.drawHand();
        this.drawTable();
    }

    public static void main(String[] args){
        DominoGame obj = new DominoGame();
    }   

}