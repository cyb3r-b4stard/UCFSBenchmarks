
/**
 * @###### 
 * @####### 
 */

public class MagicSquare
{
    /** The magic square array data */
    private int[][] array;

    /**
     * Constructs a MagicSquare object.
     * @param input the magic square array data.
     */
    public MagicSquare(int[][] input)
    {
        array = input;
    }

    public int row(int d) 
    {
        int n = 0;
        for( int i = 0; i < array.length; i++)
            n += array[d][i];

        return n;
    }

    public int col(int e) 
    {
        int n = 0;
        for( int i = 0; i < array.length; i++)
            n += array[e][i];

        return n; 

    }

    public int diag()
    {
        int n = 0;
        for(int i = 0; i < array.length; i++)
        {
            for(int d = 0; d < array[i].length; d++)
            {
                n+= array[i][d];
            }
        }

        return n;

    }

    public int diag2()
    {
        int n= 0;
        for(int i = array.length - 1; i >= 0; i--)
        {
            for(int d = 0; d >= 0; d--)
            {
                n+= array[i][d];
            }
        }
        return n;
    }

    /**
     * Tests to see if array is indeed a magic square
     * @return true if array is a magic square
     * @return false if the array is not a magic square
     */
    public boolean isMagicSquare()
    {
        for(int i = 0; i < array.length; i++)
        {
            if(row(0) != row(i))
                return false;
            if(col(0) != col(i))
                return false;

        }
        if(diag2 != diag1)
        {
            return false
        }
        return true;   
    }

    /**
     * Returns a String which represents the array.
     */
    public String toString()
    {
        String result = "";
        for(int r = 0; r < array.length; r++)
        {
            for(int c = 0; c <array[r].length; c++)
            {
                result += array[r][c];
                result += "\t";
            }
            result += "\n";
        }
        return result;
    }
}