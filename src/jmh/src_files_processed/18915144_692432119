
/* #### ### #### ### ########## #
 * ####: ### ### ######
 * ########: ##########
 * ##: #########
 */

import ecs100.*;
import java.awt.Color;
import javax.swing.JColorChooser;

public class MiniPaint{

    /*# YOUR CODE HERE */
    private String action;
    private double x,y;
    private String file;
    
    /** Sets up the user interface - mouselistener and buttons */
    public MiniPaint(){
        /*# YOUR CODE HERE */
        UI.setMouseListener(this::doMouse);
        UI.addButton("Draw Rectangle",this::drawARectangle);
        UI.addButton("Draw Oval", this::drawAnOval);
        UI.addButton("Draw Image",this::drawAnImage);
        UI.addButton("Draw Rings",this::drawRings);
        UI.addButton("Quit", UI::quit);
    }


    /**
     * Respond to mouse events
     * When pressed, remember the position.
     * When released, draw the current shape using the pressed position
     *  and the released position.
     * Uses the value in the field to determine which kind of shape to draw.
     * Although you could do all the drawing in this method,
     *  it may be better to call some helper methods for the more
     *  complex actions (and then define the helper methods!)
     */
    public void doMouse(String action, double x, double y) {
        /*# YOUR CODE HERE */
        if (action.equals("pressed")) {
            this.x=x;
            this.y=y;
        }
    }

    

    public void drawARectangle(double x, double y) {
    
    }

    public void drawAnOval(double x, double y) {
    
    }

    public void drawAnImage(double x, double y) {
        
    }

    public void drawRings(double x, double y) {
    
    }
     

    /*# YOUR CODE HERE */

    public static void main(String[] arguments){
        new MiniPaint();
    }        

}