/**
 * ### ###### ############## ##### ########### ########: 
 * 
 * @###### 
 * @####### ##.##.####
 */

import sum.komponenten.*;
import sum.werkzeuge.*;
import sum.ereignis.*;

public class Morsecodierung extends EBAnwendung
{
    private Etikett hatEtikettMorsecodierung;
    private Etikett hatEtikettAusgangstext;
    private Etikett hatEtikettMorsecode;
    private Etikett hatEtikettDecodierterText;
    private Zeichenbereich hatZeichenbereichAusgangstext;
    private Zeichenbereich hatZeichenbereichMorsecode;
    private Zeichenbereich hatZeichenbereichDecodierterText;
    private Knopf hatKnopfCodieren;
    private Knopf hatKnopfDecodieren;
    private Knopf hatKnopfBeenden;
    private Knopf hatKnopfPreorder;
    private Knopf hatKnopfInorder;
    private Knopf hatKnopfPostorder;
    private BinaryTree<String> hatMorsebaum;


/**
 * Konstruktor
 */
    public Morsecodierung()
    {
        super(1715, 948);

        hatEtikettMorsecodierung = new Etikett(632, 43, 152, 32, "Morsecodierung");
        hatEtikettMorsecodierung.setzeAusrichtung(Ausrichtung.LINKS);
        hatEtikettAusgangstext = new Etikett(207, 162, 100, 25, "Ausgangstext");
        hatEtikettAusgangstext.setzeAusrichtung(Ausrichtung.LINKS);
        hatEtikettMorsecode = new Etikett(650, 162, 117, 26, "Morsecode");
        hatEtikettMorsecode.setzeAusrichtung(Ausrichtung.LINKS);
        hatEtikettDecodierterText = new Etikett(1088, 162, 131, 25, "Decodierter Text");
        hatEtikettDecodierterText.setzeAusrichtung(Ausrichtung.LINKS);
        hatZeichenbereichAusgangstext = new Zeichenbereich(41, 214, 418, 520, "");
        hatZeichenbereichMorsecode = new Zeichenbereich(475, 215, 440, 517, "");
        hatZeichenbereichDecodierterText = new Zeichenbereich(932, 215, 448, 519, "");
        hatKnopfCodieren = new Knopf(380, 745, 171, 60, "Codieren");
        hatKnopfCodieren.setzeBearbeiterGeklickt("hatKnopfCodierenGeklickt");
        hatKnopfDecodieren = new Knopf(836, 749, 173, 62, "Decodieren");
        hatKnopfDecodieren.setzeBearbeiterGeklickt("hatKnopfDecodierenGeklickt");
        hatKnopfBeenden = new Knopf(597, 845, 201, 64, "Beenden");
        hatKnopfBeenden.setzeBearbeiterGeklickt("hatKnopfBeendenGeklickt");
        hatKnopfPreorder = new Knopf(1400, 300, 201, 64, "Preorder");
        hatKnopfPreorder.setzeBearbeiterGeklickt("hatKnopfPreorderGeklickt");
        hatKnopfInorder = new Knopf(1400, 400, 201, 64, "Inorder");
        hatKnopfInorder.setzeBearbeiterGeklickt("hatKnopfInorderGeklickt");
        hatKnopfPostorder = new Knopf(1400, 500, 201, 64, "Postorder");
        hatKnopfPostorder.setzeBearbeiterGeklickt("hatKnopfPostorderGeklickt");
    }

/**
 * Vorher: Ereignis GeklicktvonhatKnopfCodieren fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfCodierenGeklickt()
    {
        String lString;
        char lChar;
        
        hatZeichenbereichMorse.loescheAlles();
        lString = lSring.charAt(i);
        for (int i=0 ; i<lString.length(); i++)
        {
            lChar = lString.charAt(i);
            hatZeichenbereichMorse.haengeAn(this.morsecode(lChar)+"/");
        }
    }

public String morsecode(char pZeichen)
{
    String lLinks, lRechts;
    lLinks = preorderSuchen(hatMorsebaum.getLeftTree(), pZeichen, ".");
    lRechts = preorderSuchen(hatMorsebaum.getRightTree(), pZeichen, "-");
}
    
public String preorderSuchen(BinaryTree<String> pBaum, char pZeichen, String pCode)
{
    if (pBaum.isEmpty())
        return "";
    else
    {
        if (pBaum.getContent().equals(""+pZeichen))
            return pCode;
        else 
            return preorderSuchen(pBaum.getLeftTree(),
    }
}

/**
 * Vorher: Ereignis GeklicktvonhatKnopfDecodieren fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfDecodierenGeklickt()
    {
        decodieren();
    }

public void decodieren()
{
    
}

/**
 * Vorher: Ereignis GeklicktvonhatKnopfBeenden fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfBeendenGeklickt()
    {
        System.exit(2);
    }

/**
 * Vorher: Ereignis GeklicktvonhatKnopfPreorder fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfPreorderGeklickt()
    {
        hatZeichenbereichAusgangstext.loescheAlles();
        this.preorder(hatMorsebaum);
    }    

public void preorder(BinaryTree<String> pBaum)
{
    
    this.preorder(pBaum.getLeftTree());
    this.preorder(pBaum.getRightTree());
}
    
/**
 * Vorher: Ereignis GeklicktvonhatKnopfInorder fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfInorderGeklickt()
    {
        hatZeichenbereichAusgangstext.loescheAlles();
        this.inorder(hatMorsebaum);
    }

public void inorder(BinaryTree<String> pBaum)
{
    if (pBaum !=null)
    {
        this.inorder(pBaum.getLeftTree());
        this.inorder(pBaum.getRightTree());
    }
}    
    
/**
 * Vorher: Ereignis GeklicktvonhatKnopfPostorder fand statt.
 * Nachher: (schreiben Sie, was in dieser Methode ausgefuehrt wird)
 */
    public void hatKnopfPostorderGeklickt()
    {
        hatZeichenbereichAusgangstext.loescheAlles();
        this.postorder(hatMorsebaum);
    }

public void postorder(BinaryTree<String> pBaum)
{
    if (pBaum !=null)
    {
        this.postorder(pBaum.getLeftTree());
        this.postorder(pBaum.getRightTree());
    }
}
    
public void init()
{
    BinaryTree<String> lBaum1, lBaum2, lBaum3, lBaum4, lBaum5, lBaum6, lBaum7, lBaum8;
    
    lBaum1 = new BinaryTree<String>("H");
    lBaum2 = new BinaryTree<String>("V");
    lBaum3 = new BinaryTree<String>("S", lBaum1,lBaum2);
    lBaum1 = new BinaryTree<String>("F");
    lBaum2 = new BinaryTree<String>("Ü");
    lBaum4 = new BinaryTree<String>("U", lBaum1,lBaum2);
    lBaum5 = new BinaryTree<String>("I", lBaum3,lBaum4);
    
    lBaum1 = new BinaryTree<String>("L");
    lBaum2 = new BinaryTree<String>("Ä");
    lBaum3 = new BinaryTree<String>("R", lBaum1,lBaum2);
    lBaum1 = new BinaryTree<String>("P");
    lBaum2 = new BinaryTree<String>("J");
    lBaum4 = new BinaryTree<String>("W", lBaum1,lBaum2);
    lBaum6 = new BinaryTree<String>("A", lBaum3,lBaum4);
    lBaum7 = new BinaryTree<String>("E", lBaum5,lBaum6);
    
    lBaum1 = new BinaryTree<String>("B");
    lBaum2 = new BinaryTree<String>("X");
    lBaum3 = new BinaryTree<String>("D", lBaum1,lBaum2);
    lBaum1 = new BinaryTree<String>("C");
    lBaum2 = new BinaryTree<String>("Y");
    lBaum4 = new BinaryTree<String>("K", lBaum1,lBaum2);
    lBaum5 = new BinaryTree<String>("N", lBaum3,lBaum4);
    
    lBaum1 = new BinaryTree<String>("Z");
    lBaum2 = new BinaryTree<String>("Q");
    lBaum3 = new BinaryTree<String>("G", lBaum1,lBaum2);
    lBaum1 = new BinaryTree<String>("Ö");
    lBaum2 = null;
    lBaum4 = new BinaryTree<String>("O", lBaum1,lBaum2);
    lBaum6 = new BinaryTree<String>("M", lBaum3,lBaum4);
    lBaum8 = new BinaryTree<String>("T", lBaum5,lBaum6);
    
    hatMorsebaum = new BinaryTree<String>("", lBaum7, lBaum8);
}


}