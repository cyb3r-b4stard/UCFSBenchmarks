import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.scene.shape.*;
import javafx.stage.Stage;
import java.util.Random;

@Override
public void start() {
    super.start();
    try {
        new JFXPanel();

        Platform.runLater(new Runnable() {
            @Override
            public void run() {
/**
 * @author kevinlei
 * @version 20170228
 */
public class RandomSquares extends Application
{
    /**
     * @param primaryStage
     * builds stage
     * todo code
     */
    public void start(Stage primaryStage)
    {
        Random generator = new Random(); 
        Color color; 
        int r, g, b; 
        int locationX, locationY; 
        int diameter = 0; 
        int biggestDiameter = 0;
        Rectangle square = new Rectangle(0, 0, 0, 0);
        Rectangle biggestSquare = new Rectangle(0, 0, 0, 0);
        Group root = new Group();
        Scene scene = new Scene(root, 600, 400);
        primaryStage.setTitle("RandomSquares");
        primaryStage.setScene(scene);
        primaryStage.show();

        for (int i = 1; i <= 30; i++)
        {
            diameter = getRandomSize(generator); 
            locationX = getRandomX(generator); 
            locationY = getRandomY(generator); 
            color = getRandomColor(generator); 

            while ((600 - locationX) < diameter) 
            {
                locationX = getRandomX(generator);
            }

            while ((400 - locationY) < diameter)
            {
                locationY = getRandomY(generator);
            }

            square = new Rectangle(locationX, locationY, diameter, diameter);
            square.setStrokeWidth(3);
            square.setStroke(color);
            square.setFill(Color.rgb(0, 0, 0, 0.0));

            root.getChildren().add(square);

            if (square.getWidth() > biggestSquare.getWidth())
            {
                biggestSquare = square;
                biggestSquare.setFill(Color.rgb(255, 0, 0, .3));
            }
        }
        root.getChildren().add(biggestSquare);

        primaryStage.setOnCloseRequest(e -> System.exit(0));
    }

    /**
     * @return squareSize
     * Determines square's size
     */
    public int getRandomSize(Random generator)
    {
        return generator.nextInt(141) + 10; 
    }

    /**
     * @return squareColor
     * Determines square's color
     */
    public Color getRandomColor(Random generator)
    {
        int r, g, b;

        r = generator.nextInt(256); 
        g = generator.nextInt(256); 
        b = generator.nextInt(256); 

        return Color.rgb(r, g, b); 
    }

    /**
     * @return randomX
     * Determines square's horizontal location
     */
    public int getRandomX(Random generator)
    {
        return generator.nextInt(600); 
    }

    /**
     * @return randomY
     * Determines square's vertical location
     */
    public int getRandomY(Random generator)
    {
        return generator.nextInt(400); 
    }
    
    /**
     * @param args main method
     * launches start method
     */
    public static void main(String[] args)
    {
        launch(args);
    }
                new ArtisanArmourerInterface().start(new Stage());
            }
        });
    } catch (Exception e) {
        e.printStackTrace();
    }
}


}