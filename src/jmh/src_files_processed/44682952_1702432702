/**
 * ### #, #### #
 * 
 * @###### ###. ##### 
 * @####### ###### ####
 */
public class IntegerPlay{
   
    /**
     * The main method is provided as a means of testing the
     * functions written in this class.  You may add additional
     * test cases if desired.
     * 
     * @param args The input array.
     */
    public static void main(String args[]){
        
       System.out.println(maxOfTwo(5, 5) == -1);
       System.out.println(maxOfTwo(5, 1) == 5);
       System.out.println(maxOfTwo(1, 5) == 5);
       
       System.out.println(isMultipleOfNine(8) == false);
       System.out.println(isMultipleOfNine(9) == true);
       System.out.println(isMultipleOfNine(27) == true);
       System.out.println(isMultipleOfNine(49) == false);
       System.out.println(isMultipleOfNine(81) == true);
       System.out.println(isMultipleOfNine(351) == true);
       System.out.println(isMultipleOfNine(424) == false);
       System.out.println(isMultipleOfNine(801) == true);

       System.out.printf("$%1.2f\n", calcGrossPay(47, 10.50, "Exempt"));
       System.out.printf("$%1.2f\n", calcGrossPay(47, 10.50, "Hourly"));
       System.out.printf("$%1.2f\n", calcGrossPay(47, 10.50, "Plus"));
    }
   
    /**
     * This function returns the largest of two input integers.  If the input
     * integers are the same value, this function returns -1;
     * 
     * @param num1 The first input integer.
     * @param num2 The second input integer.
     * @return The largest of two input integers or -1 if their values are the same.
     */
    public static int maxOfTwo(int num1, int num2){
       int result = -1;
       
       if (num1 < num2)
       {
           result = (num2);
        }
       if (num1 > num2)
       {
           result = (num1);
        }
       
       
       return result;
       
    }



        
    /**
     * This function calculates a worker's gross pay according to their employee
     * type.  "Exempt" employees are paid straight time for all hours worked no
     * matter the number of hours.  "Hourly" employees are paid straight time
     * for all hours worked up to and including 40 hours.  For hours worked over
     * the first 40 hours, hourly employees are paid time and a half.  "Plus"
     * employees are paid straight time for all hours worked up to and including 
     * 40 hours, time and a half for up to five hours worked over the first 40
     * hours, and double time for hours worked over the first 45 hours.
     * 
     * E.g., An Exempt employee works 47 hours at a rate of $10.50 and is paid $493.50.
     *       An Hourly employee works 47 hours at a rate of $10.50 and is paid 
     *          (40 * 10.5) + (7 * 1.5 * 10.5) = $530.25.
     *       An Plus employee works 47 hours at a rate of $10.50 and is paid
     *          (40 * 10.5) + (5 * 1.5 * 10.5) + (2 * 2 * 10.5) = $540.75.
     *          
     * @param hoursWorked The number of hours the employee worked.
     * @param rate The hourly rate at which the employee is paid.
     * @param empType The employee's classification.  Valid types are Exempt, Hourly, and Plus.
     * @return The employee's gross pay.
     */
    public static double calcGrossPay(int hoursWorked, double rate, String empType)
    {
       String Word + Exempt
       if (empType = Exempt);
       {
           result = (hoursWorked) * (rate);
       }
       if (empType == Hourly);
       {
           result = ((40) * (rate)) + ((hoursWorked - 40) * (1.5)) * (10.5);
       }
       
       return 0.0;
    }
    
    /**
     * It is well known that the digits of an integer
     * that is a multiple of nine sum to nine.  For example,
     * 
     * 72 -> 7 + 2 = 9 -> 72 = 9 * 8
     * 117 -> 1 + 1 + 7 = 9 -> 117 =  9 * 13
     * 
     * This function takes as input a single positive integer in the range
     * [1, 999].  It returns true if the sum of the digits of the input
     * integer is nine and false otherwise.
     * 
     * Notes to the programmer:  You may NOT check if the number is divisible by
     * nine using any other method.  You can assume the input value is in the
     * correct range when the function is called.
     * 
     * @param num A positive integer in the range [1, 999].
     * @return true if the number is divisible by 9 and false otherwise.
     */
    public static boolean isMultipleOfNine(int num){
        
       return false;
    }
}