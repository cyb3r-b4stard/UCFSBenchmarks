public class Play2048{
        
		public static void printWelcomeAndDirections(){
		    System.out.println("Hello and Welcome to 2048.");
		    System.out.println("In this game you choose to slide tiles to the left, right, up or down to make the number 2048" );
		    System.out.println("To slide up press u , to slide down press d , to slide right press r and to slide left press l");
		    int [][] board = { {0,2,256,0} , {4,0,0,0} , {1024,0,16,0} , {8,512,0,2} } ;
		    
		    
		}


		public static void printBoard(int [][] board) {
		    
		    for (int r = 0 ; r < board.length ; r++)
		    {
		        System.out.println("") ;
		        
		        System.out.println("--------------------") ;
		        for(int c = 0 ; c < board[0].length ; c++)
                {
                    if(board[r][c] >= 1000)
                    {
                        System.out.print("" + board[r][c] + "|" );
                    }
                    else if(board[r][c] >= 100)
                    {
                        System.out.print(" " + board[r][c] + "|" ) ;
                    }
                    else if(board[r][c] >= 10)
                    {
                        System.out.print("  " + board[r][c] + "|" ) ;
                    }
                    else if(board[r][c] >= 0)
                    {
                        System.out.print("   " + board[r][c] + "|" ) ;
                    }
                    else
                    {
                        System.out.print("    " + board[r][c] + "|" ) ;
                    }
                    
                }
                
		    }
		    System.out.println("") ;
		    System.out.println("---------------------") ;
		    
		}


		public static void placeBlock(int [][] board){
		}


		public static char getUserChoice(){
			return (char)(32); 
			
		}


		public static void processUserChoice(int [][] board) {
		}


		public static String updateGameState(int [][] board){
			return "continue";
			boolean win = false ;
			boolean lose = false ;
			boolean continues = true ;
			while (lose == false && win == false && continues == true )
			{
			    for(int r = 0 ; r < board.length ; r++)
			    {
			        for (int c = 0 ; c < board[0].length ; r++
			        {
			            if (board[r][c] ==2048)
			            {
			                win = true ;
			                continues = false ;
			            }
			            
			        }
			        for (int c = 0 ; c < board[0].length ; r++
			        {
			            if (board[r][c] == 0)
			            {
			                continues = true ;
			            }
			            
			        }
			    }
			    lose = true ;
			    
			}
		}
		
		public static void slideUp(int [][]board){
		}
		public static void mergeUp(int [][]board){
		}


		public static void main(String [] args){
          int [][] board = {{0,2,256,0},{4,0,0,0},{1024,0,16,0},{8,512,0,2}};
	      printWelcomeAndDirections();printBoard(board); 
          placeBlock(board); placeBlock(board);
			}	
		}
	






/*
1. (10) The printWelcomeAndDirections() method tells the user what keys to press. 
 The printBoard() method must handle spacing depending on the number of digits in the block. 
---------------------
|  16|  32| 128|1024|
---------------------
|	|   4|  32|   2|
---------------------
|	|    |	|   8|
---------------------
|   4|    |	|   4|
---------------------


2.  (5) The updateGameState(board) method returns either “win”. “lose”, or “continue”.  You win if the board has a 2048, you lose if the board is full (and no 2048), and you continue otherwise.  Test all 3 cases with 3 different arrays.  Print out all 3 boards and the value of updateGameState() for each.


3.  (5) The placeBlock(board) method places a random 2 anywhere on the board that is open (ie, has a 0) .  Test this method on a board that is partly full, then test again with an empty board. For the rest of this program, assume you start with an empty board. 


4. (5)  The getUserChoice(board) method asks the user to enter one of four characters until their input is a valid character.   If it is not, repeat the user choice with the message “.... is not a valid character.  “  


5.  (5) The processUserChoice(choice) method determines what methods to call based on the choice.  If the choice is ‘u’, this method calls slideUp(board), mergeUp(board), and then slideUp(board) again.    When you call these methods, the only thing that happens for now is that a print statement tells you what method you are in.  


6. (5)  Implement the sliding only portions of the move methods.  Test thoroughly.  You should only place a new block on the board if a slide occurred. 




7.  (3)  Implement the merging portions of the move methods.   Test thoroughly.  Add to the score the sum of the two cells that were merged together.  (see the game play2048.com) 




8.  (2) Use this method inside a main while loop that runs the game.    See the code on the previous page.  
*/





		