
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.DefaultCaret;

import comp102x.Canvas;
import comp102x.ColorImage;

/**
 * #### ## ### #### #### #####
 */
public class Hangman implements KeyListener
{
    private final char UNKNOWN_CHARACTER = '?'; 
    private final int MAX_WORD_LIST_SIZE = 128; 
    private final int STARTING_LIFE = 6; 
    
    private Canvas canvas; 
    private JTextArea inputArea; 
    private int life; 
    private String secretWord; 
    private String displayWord; 
    private boolean gameOver; 
    
    public Hangman() throws IOException {

        canvas = new Canvas(400, 400);
        
        inputArea = new JTextArea();
        inputArea.addKeyListener(this);
        inputArea.setEditable(false);
        DefaultCaret caret = (DefaultCaret) inputArea.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        JPanel panel = new JPanel();
        panel.setPreferredSize(new Dimension(400, 300));
        panel.setLayout(new BorderLayout());
        panel.add(new JScrollPane(inputArea));
        panel.setBorder(BorderFactory.createEtchedBorder());
        canvas.setComponentAtBottom(panel);

        life = STARTING_LIFE;

        String[] wordList = new String[MAX_WORD_LIST_SIZE];

        int wordListSize = readWordList("wordList.txt", wordList);

        secretWord = pickSecretWord(wordList, wordListSize);
        
        gameOver = false;
    }
    
    /**
     * The entry point of the program
     * @throws IOException 
     */
    public static void main(String[] args) throws IOException
    {
        Hangman game = new Hangman();
        
        game.runGameLoop();
    }
    
    /**
     * The main game loop
     */
    public void runGameLoop()
    {
        displayWord = constructInitialDisplayWord(secretWord);
        
        showProgress(displayWord, life, canvas);
        
        inputArea.append("Guess a letter: ");
        
        while(!isGameOver())
        {
            
        }
        
        inputArea.append("\n");
        
        if(life == 0)  inputArea.append("You failed... :(\n");
        else  inputArea.append("You guessed the word correctly! Well done! :)\n");
    }
    
    public synchronized boolean isGameOver() {
        
        return gameOver;
    }
    
    public synchronized void setGameOver(boolean gameOver) {
        
        this.gameOver = gameOver;
    }
    
    /**
     * Load the word list from the specified text file and store the words in an array
     * 
     * @param   fileName      the file name of the word list text file
     * @param   wordList      the array for storing the words
     * @return  the number of words loaded from the file 
     * @throws IOException 
     */
    private int readWordList(String fileName, String[] wordList) throws IOException 
    {
        int i=0;
        Scanner scanner = new Scanner(new File(fileName));
        while (scanner.hasNext()) 
        {
            wordList[i] =scanner.next();
            i++;
        }
        scanner.close();
        
        return i;
    }
    
    /**
     * Pick a secret word randomly from the word list array
     * 
     * @param   wordList      the word list array
     * @param   wordListSize  the size of the word list array
     * @return  a randomly-chosen word from the word list array
     */
    private String pickSecretWord(String[] wordList, int wordListSize)
    {
        Random rnd = new Random();
        return wordList[(int)(rnd.nextDouble() * wordListSize)];
    }
    
    /**
     * Contruct the initial display word which contains exactly X UNKNOWN_CHARACTER where X is the number of letters in the secret word
     * 
     * @param   secretWord      the secret word
     * @return  the constructed display word
     */
    private String constructInitialDisplayWord(String secretWord)
    {
        String displayWord=[];
        for(int i=0;i<secretWord.length();i++)
        {
            displayWord += "?"
        }
        return displayWord;
    }
    
    /**
     * Update the display word - reveal all the occurrences of the guessed character if the guessed character is in the secret word
     * 
     * @param   displayWord     the current display word
     * @param   secretWord      the secret word
     * @param   guess           the guessed character
     * @return  the updated display word
     */
    private String updateDisplayWord(String displayWord, String secretWord, char guess)
    {
                
        
        
        return null;
    }
    
    /**
     * Check if the game is over: either the display word is the same as the secret word, or that the life is 0
     * 
     * @param   displayWord     the current display word
     * @param   secretWord      the secret word
     * @param   life            the player's life
     * @return  whether the game is over
     */
    private boolean checkGameOver(String displayWord, String secretWord, int life)
    {
        
        
        
        
        return false;
    }
    
    /**
     * Check if the display word has been changed, i.e., different from its original version
     * 
     * @param   displayWord              the current display word
     * @param   originalDisplayWord      the original dislpay word
     * @return  whether the display word has been changed
     */
    private boolean checkIfDisplayWordChanged(String originalDisplayWord, String displayWord)
    {
        return !originalDisplayWord.equals(displayWord);
    }
    
    /**
     * Check if the display word has been changed, i.e., different from its original version
     * 
     * @param   displayWord     the current display word
     * @param   life            the player's life
     * @param   canavs          the canvas to draw on
     */
    private void showProgress(String displayWord, int life, Canvas canvas)
    {
        inputArea.append("\n");
        
        inputArea.append("The word: " + displayWord + "\n");
        
        canvas.removeAll();
        
        ColorImage image = new ColorImage("images/life" + life + ".png");
        image.setMovable(false);
        canvas.add(image);
    }

    @Override
    public void keyPressed(KeyEvent e) {}

    @Override
    public void keyReleased(KeyEvent e) {}

    @Override
    public void keyTyped(KeyEvent e) {
        
        if (isGameOver())
        {
            return;
        }
        
        else
        {
            char guess = e.getKeyChar();
            
            if ((e.getKeyChar() < 'A' || e.getKeyChar() > 'Z') && (e.getKeyChar() < 'a' || e.getKeyChar() > 'z')) {
                return;
            }
            
            inputArea.append(("" + guess).toLowerCase() + "\n");
            
            String originalDisplayWord = displayWord; 
            displayWord = updateDisplayWord(displayWord, secretWord, guess); 
            if(checkIfDisplayWordChanged(originalDisplayWord, displayWord)) 
            {
                inputArea.append("Good job.\n");
            }
            else 
            {
                inputArea.append("Try another.\n");
                life--; 
            }
            
            showProgress(displayWord, life, canvas);
            
            setGameOver(checkGameOver(displayWord, secretWord, life));
            
            if (!isGameOver())
                inputArea.append("Guess a letter: ");
        }
    }
}