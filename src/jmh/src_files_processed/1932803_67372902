import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.net.URL;
import java.awt.image.*;

/**
 * #### ##### ########## # ###### ######### #### ######### #### # #### #####
 * ####, # #### ###### #### ### ## ######## #####.
 * 
 * @###### ####### #######
 * @####### #.# (### ####)
 */
public class UserInterface implements ActionListener
{
    private GameEngine aEngine;
    private JFrame aMyFrame;
    private JTextField aEntryField;
    private JTextArea aLog;
    private JLabel aImage;

    /**
     * Construct a UserInterface. As a parameter, a Game Engine
     * (an object processing and executing the game commands) is
     * needed.
     * 
     * @param pGameEngine  The GameEngine object implementing the game logic.
     */
    public UserInterface(final GameEngine pGameEngine)
    {
        this.aEngine = pGameEngine;
        this.createGUI();
    }

    /**
     * Print out some text into the text area.
     */
    public void print(final String pText)
    {
        this.aLog.append(pText);
        this.aLog.setCaretPosition(this.aLog.getDocument().getLength());
    }

    /**
     * Print out some text into the text area, followed by a line break.
     */
    public void println(final String pText)
    {
        this.aLog.append(pText + "\n");
        this.aLog.setCaretPosition(this.aLog.getDocument().getLength());
    }

    /**
     * Show an image file in the interface.
     */
    public void showImage(final String pImageName)
    {
        URL vImageURL = this.getClass().getClassLoader().getResource(pImageName);
        if(vImageURL == null){
            System.out.println("image not found");
        }
        else {
            ImageIcon vIcon = new ImageIcon(vImageURL);
            this.aImage.setIcon(vIcon);
            this.aMyFrame.pack();
        }
    }

    /**
     * Enable or disable input in the input field.
     */
    public void enable(final boolean pOn)
    {
        this.aEntryField.setEditable(pOn);
        if (!pOn) {
            this.aEntryField.getCaret().setBlinkRate(0);
        }
    }

    /**
     * Set up graphical user interface.
     */
    private void createGUI()
    {
        this.aMyFrame = new JFrame("Banana Quest");
        this.aEntryField = new JTextField(34);

        this.aLog = new JTextArea();
        this.aLog.setEditable(false);
        JScrollPane vListScroller = new JScrollPane(this.aLog);
        vListScroller.setPreferredSize(new Dimension(200, 200));
        vListScroller.setMinimumSize(new Dimension(100,100));

        JPanel vPanel = new JPanel();
        this.aImage = new JLabel();

        vPanel.setLayout(new BorderLayout());
        vPanel.add(this.aImage, BorderLayout.NORTH);
        vPanel.add(vListScroller, BorderLayout.CENTER);
        vPanel.add(this.aEntryField, BorderLayout.SOUTH);
        this.aMyFrame.getContentPane().add(vPanel, BorderLayout.CENTER);
        
        JPanel vPanel2 = new JPanel();
        vPanel2.setLayout(new BorderLayout());
        
        JButton vBN = new JButton("NORTH");
        JButton vBS = new JButton("SOUTH");
        JButton vBE = new JButton("EAST");
        JButton vBW = new JButton("WEST");
        
        vBN.addActionListener(this);
        vBS.addActionListener(this);
        vBE.addActionListener(this);
        vBW.addActionListener(this);
        
        vPanel2.add(vBN, BorderLayout.NORTH);
        vPanel2.add(vBS, BorderLayout.SOUTH);
        vPanel2.add(vBE, BorderLayout.EAST);
        vPanel2.add(vBW, BorderLayout.WEST);
        
        
        this.aMyFrame.getContentPane().add(vPanel2,BorderLayout.PAGE_END);

        this.aMyFrame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent pE) {System.exit(0);}
        });

        this.aEntryField.addActionListener(this);

        this.aMyFrame.pack();
        this.aMyFrame.setVisible(true);
        this.aEntryField.requestFocus();
    }

    /**
     * Actionlistener interface for entry textfield.
     */
    public void actionPerformed(final ActionEvent pE) 
    {
        if ( pE.getActionCommand().equals("NORTH"))    this.aEngine.interpretCommand("go North");
        else if (pE.getActionCommand().equals("SOUTH") this.aEngine.interpretCommand("go South");
        else if (pE.getActionCommand().equals("EAST") this.aEngine.interpretCommand("go East");
        else if (pE.getActionCommand().equals("WEST") this.aEngine.interpretCommand("go West");
        else this.processCommand();
    }

    /**
     * A command has been entered. Read the command and do whatever is 
     * necessary to process it.
     */
    private void processCommand()
    {
        boolean vFinished = false;
        String vInput = this.aEntryField.getText();
        this.aEntryField.setText("");

        this.aEngine.interpretCommand(vInput);
    }
}
