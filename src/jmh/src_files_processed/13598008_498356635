
public class AnswerMan
{

    /*******************************************
     * Name:    whoIsTheWinner
     * 
     * Action: decides who is the winner of the race (runner #1 or runner #2) and returns it.  If it is tie then it returns "tie".
     * 
     * Parameters/Arguements:   double - the time it took runner #1 to run the race
     *                          double - the time it took runner #2 to run the race
     * 
     * Returns:     String - the name of the winner, "tie" if it is tie
     ********************************************/
    public static String whoIsTheWinner(double runner1Time, double runner2Time){
        if(runner1Time > runner2Time){
            return "Runner 2";
        }else if(runner1Time == runner2Time){
            return "tie";
        }else{
            return "Runner 1";
        }
    }

    /*******************************************
     * Name:    isItEnoughForPS4
     * 
     * Action: Returns whether the amount is enough to buy a PS3 assuming that a PS4 is $300
     * 
     * Parameters/Arguements:   double - the amount of money the person has
     * 
     * Returns:     boolean - whether the amount is enough
     ********************************************/
    public static boolean isItEnoughForPS4(double amountmoney) { 
        if(amountmoney > 300) { 
            return true ; 
        }else{ 
            return false ;
        }
    }

    /*******************************************
     * Name:    howsThePorridge
     * 
     * Action:  Returns whether the porridge is "too hot" (T>99), "too cold" (T<75), or "just right"
     * 
     * Parameters/Arguements:   double - the temperature of the porridge
     * 
     * Returns:     String - how the temp is
     ********************************************/
    public static String howsThePorride (double temp) {
        if(temp>99) { 
            return "too hot" ;
        }else if (temp<75) { 
            return "too cold" ;
        }else{
            return "just right";
        }
    } 

    /*******************************************
     * Name:    whatGrade
     * 
     * Action: converts a percentage grade (Ex: 87) to a letter grade (Ex: B)
     * 
     * Parameters/Arguements:   double - the percent grade the person recieved
     * 
     * Returns:     char - the letter grade the person recieved
     ********************************************/
    public static char whatGrade (double grade){ 
        if(grade >= 90){
            return 'A';
        }
        if(grade >= 80){ 
            return 'B' ; 
        } 
        if(grade >= 70) { 
            return 'C' ;
        } 
        if (grade >= 60) { 
            return 'D'; 
        }
        
            return 'F'; 
        

    }
    /*******************************************
     * Name:    whatSchool
     * 
     * Action: Returns whether the student should go to "Elementary School", "Middle School, "High School", or "not eligible"
     * 
     * Parameters/Arguements:   int - the age of the student in years
     * 
     * Returns:     String - The School the student should be going to
     ********************************************/
     public static String whatSchool (int age) 
        if(age<10){ 
            return "Elementary School"  
        }
         else if( age<13)
         return "Middle School"
        }
         else (age< 18)
         return High "School" 
         return "not eligible" 
        }
    }  
        
    /*******************************************
     * Name:    whatsForLunch
     * 
     * Action:  tells the user what is for lunch given the day of the week(1-Monday, 2-Tuesday, etc)
     *      Monday - Pizza
     *      Tuesday - Fish Sticks
     *      Wednesday - Hamburger
     *      Thursday - Spaghetti
     *      Friday - Fried Rice
     *      Other - Error: Invalid Day
     * 
     * Parameters/Arguements:   int - day of the week
     * 
     * Returns:     String - what is for lunch
     ********************************************/

    /*******************************************
     * Name:    isItOdd
     * 
     * Action: Ouputs to the screen whether the number sent in is odd or even
     * 
     * Parameters/Arguements:   int - the number to check
     * 
     * Returns:     boolean - returns a true if it is odd, false if it is even
     ********************************************/ 

    /*******************************************
     * Name:    scrimmageForHowLong
     * 
     * Action:  prints out how long the team should scrimmage
     *      Normally the team scrimmages for 1 hour.
     *      IF it is raining though then they can't scrimmage at all.
     *      If the temperature gets over 100 then the scrmmage time needs to be cut in half.
     * 
     * Parameters/Arguements:   boolean - whether it is raining
     *                          double - the temperature
     * 
     * Returns:     double - the length of the scrimmage in minutes
     ********************************************/

    /*******************************************
     * Name:    whatsTheFine
     * 
     * Action: Ouputs to the screen what should be told to the motorist and returns how much the speeding ticket will be according to the following:
     *      Speed Limit - 55
     *      Below or at that speed limit - no fine
     *      Above the limit but below 5 miles over the limit - $5
     *      5 miles above the limit - $120 fine plus $10 for each mile above the limit
     *      25 miles above the limit - $500 fine for reckless driving and $25 for every mile above 25 miles above the speed limit
     * 
     * Parameters/Arguements:   double - the speed
     * 
     * Returns:     double - the cost of the speeding ticket
     ********************************************/

    /*******************************************
     * Name:    greet
     * 
     * Action: Returns the greeting that should is to be said given someone's age:
     *          0-3:  A googo gaga
     *          4-7:  Let me pinch those checks
     *          8-12:  You are just adorable
     *          13-18:  Yo
     *          19-20:  What are you up to these days?
     *          21-29:  Hello
     *          30-55:  How's work?
     *          56-65:  A good day sir
     *          66-80:  How's retirement
     *          81&up:  Ahoho
     *                    
     * 
     * Parameters/Arguements:   int - the age
     * 
     * Returns:     String - greeting
     ********************************************/

    /*******************************************
     * Name:    whichCollege
     * 
     * Action: Takes in information about a student's academic performance and returns the tier of college that they get into
     *      using the foolowing criteria:
     *      
     *      Tier 1 - min 3.8 GPA, min 2150 SAT score, min 10 Honors Classes
     *      Tier 2 - min 3.4 GPA, min 1900 SAT score, min 7 Honors Classes
     *      Tier 3 - min 3.0 GPA, min 1750 SAT score, min 4 Honors Classes
     *      Tier 4 - min 2.6 GPA, min 1600 SAT score, min 2 Honors Classes
     *      Tier 5 - min 2.2 GPA, min 1450 SAT score, min 0 Honors Classes
     * 
     * Parameters/Arguements:   double - GPA, double - SAT, int number of Honors Classes
     * 
     * Returns:     int - the tier of the college
     ********************************************/

    /*******************************************
     * Name:    salary
     * 
     * Action: Takes in information about a person at the company and returns their weekly salary according to the following chart:
     * 
     *      Job Level 1 -   full time:  salary is $600
     *                      part time:  hourly pay is $10 per hour, overtime pay is $20 per hour
     *      Job Level 2 -   full time:  salary is $800
     *                      part time:  hourly pay is $15 per hour, overtime pay is $25 per hour
     *      Job Level 3 -   full time:  salary is $1200
     *                      part time:  hourly pay is $25 per hour, overtime pay is $35 per hour
     *      Job Level 4 -   full time:  salary is $2000
     *                      part time:  hourly pay is $45 per hour, overtime pay is $50 per hour
     * 
     *      Assume a 40 hour work week and that full time employees doe not get overtime
     * 
     * Parameters/Arguements:   int - job level, boolean - fullTime, int hoursWorked
     * 
     * Returns:     double - tax percentage
     ********************************************/

    /*******************************************
     * Name:    getTruckSize
     * 
     * Action: Returns which truck should be used to move the furniture.  Use the following table for dimensions.
     *      If there is no truck big enough then return "load to large".
     * 
     *      couch - 250 cubic feet
     *      chair - 20 cubic feet
     *      table - 80 cubic feet
     *      
     *      "little" truck - 200 cubic feet
     *      "medium" truck - 600 cubic feet
     *      "large" - 2000 cubic feet
     * 
     * Parameters/Arguements:   int - number of couches, int number of chairs, int number of tables 
     * 
     * Returns:     String - name of the truck
     ********************************************/

    /*******************************************
     * Name:    taxRate
     * 
     * Action: Takes in the person's income and returns the percentage that they get charged on their taxes
     * 
     * Parameters/Arguements:   double - the amount of money the person earns before taxes
     * 
     * Returns:     double - tax percentage
     ********************************************/

    /*******************************************
     * Name:    taxAmount
     * 
     * Action: Takes in the person's income and returns the amount that they get charged in taxes (taking into account their tax bracket)
     * 
     * Parameters/Arguements:   double - the amount of money the person earns before taxes
     * 
     * Returns:     double - the amount of tax that the person has to pay on their income
     ********************************************/

    /*******************************************
     * Name:    afterTaxIncome
     * 
     * Action: Takes in the person's income and returns what they get to keep after the tax man cometh(taking into account their tax bracket)
     * 
     * Parameters/Arguements:   double - the amount of money the person earns before taxes
     * 
     * Returns:     double - the amount of money the person earns after taxes
     ********************************************/

}