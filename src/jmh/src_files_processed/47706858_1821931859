/**
 * ### #### #### ## ### ########## ##### ### ############.
 * 
 * @######: (#### ###)
 * @####### #.# (##########)
 */
public class CalcEngine
{

    /**
     * Create a CalcEngine.
     */
    public CalcEngine()
    {
 

    }

    private double currentTotal;

    public String getTotalString() {
        return currentTotal % 1.0 == 0
                ? Integer.toString((int) currentTotal)
                : String.valueOf(currentTotal);
    }

    public void equal(String number) {
        currentTotal = Double.parseDouble(number);
    }

    public void add(String number) {
        convertToDouble(number, Operator.ADD);
    }

    public void subtract(String number) {
        convertToDouble(number, Operator.SUBTRACT);
    }

    public void multiply(String number) {
        convertToDouble(number, Operator.MULTIPLY);
    }

    public void divide(String number) {
        convertToDouble(number, Operator.DIVIDE);
    }

    private void convertToDouble(String number, Operator operator) {
        double dblNumber = Double.parseDouble(number);
        switch (operator) {
            case ADD:
                add(dblNumber);
                break;
            case SUBTRACT:
                subtract(dblNumber);
                break;
            case MULTIPLY:
                multiply(dblNumber);
                break;
            case DIVIDE:
                divide(dblNumber);
                break;
            default:
                throw new AssertionError(operator.name());
        }
    }

    private void add(double number) {
        currentTotal += number % 1.0 == 0 ? (int) number : number;
    }

    private void subtract(double number) {
        currentTotal -= number % 1.0 == 0 ? (int) number : number;
    }

    private void multiply(double number) {
        currentTotal *= number % 1.0 == 0 ? (int) number : number;
    }

    private void divide(double number) {
        currentTotal /= number % 1.0 == 0 ? (int) number : number;
    }

}
        



    /**
     * @return The value that should currently be displayed
     * on the calculator display.
     */





    /**
     * A number button was pressed.
     * Either start a new operand, or incorporate this number as
     * the least significant digit of an existing one.
     * @param number The number pressed on the calculator.
     */




    /**
     * The 'plus' button was pressed. 
     */




    /**
     * The 'minus' button was pressed.
     */



    

    /**
     * The '=' button was pressed.
     */

    



    /**
     * The 'C' (clear) button was pressed.
     */




    /**
     * @return The title of this calculation engine.
     */





    /**
     * @return The author of this engine. This string is displayed as it is,
     * so it should say something like "Written by H. Simpson".
     */





    /**
     * @return The version number of this engine. This string is displayed as 
     * it is, so it should say something like "Version 1.1".
     */




}