
/**
 *### ## ### #### ############ ### ## ##### ######## ## ######## ########
 * 
 * @###### (########## ####) 
 * @####### (#### ####-##)
 */
import lineales.librerias.modelos.Cola;
import java.util.*;
public class ColaAC <T> implements Cola<T> { 
    T[] elArray;
    int primero,ultimo;
    int talla;
    /**Constructor de Cola */
    @SuppressWarnings({"unchecked"})
    public ColaAC (int MAX) {
        elArray = (T[]) (new Object [MAX]); 
        talla = 0;
        primero = 0;
        ultimo = 0;
    }

    /** Metodo privado para ampliar el array si hace falta**/
    @SuppressWarnings({"unchecked"})
    private void ampliarElArray(){

        T[]  arrayAux = (T[]) (new Object [elArray.length*2]);
        int i = 0,
        tallaAux=talla;
        while(!this.esVacia())
            try{arrayAux [i++] = this.desencolar();
            }catch(Exception e){
                System.out.println("Error al intentar ampliar una cola");
            }
        elArray = arrayAux;
        this.primero = 0;
        this.ultimo = tallaAux-1;
        this.talla = tallaAux;

    }


    /** Inserta el Elemento e en una cola situandolo al final **/

    public void encolar(T e){
        elArray [ultimo+1]=e
    }

    /** Consulta y extrae el primer elemento, solo si la cola no esta vacia.**/
    public T desencolar(){
    }

    /** Devuelve la cantidad de elementos  de la cola **/
    public int talla(){
    }

    /** Solo si la cola no esta vacia, consulta el primer elemento en cabeza,
     * (el primero en orden de insercion) **/
    public T primero() {
    }

    /** Comprueba si una cola esta vacia **/
    public boolean esVacia(){
    }

    /** Devuelve la siguiente posicion ocupada del array modulo MAX.
    Esta instruccion puede sustituirse por (i+1)%elArray.length**/
    private int incrementar (int i) {
        return i;
    }

    /** Devuelve el contenido de la cola con el formato 
    <-elem0<-elem1<-elem2<-...<-elemN<- donde N = talla()-1
    Cada elemi se devuelve con el formato que este definido para su tipo
     **/ 
    public String toString (){
    }
}