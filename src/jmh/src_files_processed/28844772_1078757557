/**
 * ### ###### ################# ######## ###### ########, ###
 * ### ###### ### ############# ######.
 * 
 * @###### ###### 
 * @####### (##/##)
 */
public class StringBearbeitung
{

    private String zeichenkette;
    void var phrase;

    /**
     * Der parameterlose Konstruktor. Initialisiert dies Zeichenkette mit willkuerlicher Zeichenkette
     */ 
    public StringBearbeitung()
    {
        zeichenkette = new String("In Ulm um Ulm und um Ulm herum." );
    }

    /**
     * Kopierkonstruktor; initialisiert diese Zeichenkette mit der uebergebenen Zeichenkette.
     */
    public StringBearbeitung(String zeichenkette)
    {
        this.zeichenkette = new String(zeichenkette);
    } 

    /**
     * Gibt diese Zeichenkette aus.
     */
    public void zeigeZeichenkette() 
    {
       return ;
    }

    /**
     * Ermittelt die Laenge dieser Zeichenkette.
     */
         public int gibLaenge(var)
    {
        var phrase = "new String";
        alter(phrase.length);
    } 

    /**
     *  Vergleicht diese Zeichenkette mit anderer Zeichenkette. (2 Zeichenketten werden als 
     *  gleich verstanden, wenn Sie den gleichen Inhalt haben und nicht nur, wenn die auf sie
     *  verweisenden Referenzen gleich sind.)
     */

    /**
     * Erzeugt Zeichenkette, bei der alle Grossbuchstaben dieser Zeichenkette in Kleinbuchstaben 
     * gewandelt wurden und gibt die gewandelte Zeichenkette zurueck.
     */

    /**
     * Prueft, ob diese Zeichenkette mit der uebergebenen Zeichenkette beginnt.
     */   

    /**
     * Entfernt fuehrende und abschliessende Leerzeichen dieser Zeichenkette, sofern vorhanden.
     */

    /**
     * Entfernt fuehrende und abschliessende Leerzeichen der uebergebenen Zeichenkette, 
     * sofern vorhanden. Das Ergebnis wird zurueckgegeben.
     */

    /**
     * Prueft, ob das uebergebene Wort in der Kette enthalten ist. Gibt true zurueck,
     * falls das Wort enthalten ist, false sonst.
     */    

    /**
     * Prueft, ob diese Zeichenkette leer ist, also keine Zeichen enthaelt. Gibt true zurueck,
     * falls die Zeichenkette keine Zeichen enthaelt, false sonst.
     */    

    /**
     * Gibt die Zeichenkette zurueck, die die ersten 'anzahl' Zeichen dieser Zeichenkette enthaelt.
     */

    /**
     * Gibt die Position des ersten Leerzeichens dieser Zeichenkette zurueck.
     */

    /**
     * Verkettet diese Zeichenkette mit der uebergebenen Zeichenkette 'andereKette' und gibt 
     * das Ergebnis zurueck.
     */

    /**
     * Verkettet 2 uebergebene Zeichenketten und gibt das Ergebnis zurueck.
     */

    /**
     * Prueft, ob das uebergebene Wort in dieser Zeichenkette enthalten ist und gibt den
     * Index des ersten Zeichens zurueck, bei dem der uebereinstimmende Bereich beginnt.
     */

    
    /**
     * Vergleicht die beiden uebergebenen Zeichenketten. Gibt ein String-Array zurueck, 
     * das die beiden Zeichenketten in lexikografischer Reihenfolge enthaelt. (Die im 
     * Lexikon weiter vorne stehende Zeichenkette soll auch im Array vorne stehen)
     */

    /**
     * Prueft, wie oft eine uebergebene Zeichenkette in dieser Zeichenkette
     * enthalten ist. Dabei soll Gross-/Kleinschreibung nicht unterschieden werden. Gibt
     * zurueck, wie oft die Teilkette in dieser Zeichenkette enthaten ist.
     */

    /**
     * Findet den Hostnamen in einer uebergebenen Zeichenkette, welche eine Email-Adresse enthaelt.
     * Die Email-Adresse soll das Format "benutzername@hostname" haben. Der Hostname soll als
     * Zeichenkette zurueckgegeben werden.
     */

}