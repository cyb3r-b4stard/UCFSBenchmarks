
/**
 * ########## ######## #### ######### #### #
 * 
 * @###### ###### #####
 * @####### #
 */
public class Triangular <A> implements Cloneable
{
    private int range;

    private A [][] box;

    /**
    * Constructor for objects of class Triangular
    * @param indexRange - indices between 0 and indexRange-1 will be legal to index
    *                     this a triangular array
    * @throws IllegalArgumentException - if indexRange is negative                    
    */
    @SuppressWarnings("unchecked")
    public Triangular(int indexRange) throws IllegalArgumentException
    {
        if (indexRange < 0 ) {
           throw new IllegalArgumentException( indexRange + " is not a legal number." );
        }
         range = indexRange;
         box = (A [][]) new Object [][range];
    }

    /** indexRange of a triangular array 
     */
    public int indexRange()
    {
        return range;
    }

    /**
     * read an entry from the matrix
     * 
     * @param  x   first index into the triangle
     * @param  y   second index into the triangle
     * @return     the entry at that positions
     * @throws IndexOutOfBoundsException if either index is out of bounds
     */
    public A get(int x,int y) throws IndexOutOfBoundsException
    {
        return null; 
    }

    /**
     * (over-)write an entry in the matrix
     * 
     * @param  x   first index into the triangle
     * @param  y   second index into the triangle
     * @param  newval  the new value to be put at that position
     * @throws IndexOutOfBoundsException if either index is out of bounds
     */    
    public void set(int x,int y,A newval) throws IndexOutOfBoundsException
    {
    }

    /** auxiliary method used for cloning objects
     * it should copy all data fields of this object into the target object
     * arrays would need to be copied across, it will not suffice to merely
     * copy the reference to an array
     */
    protected void copy(Triangular<A> target)
    {
        target.range=range;
    }

    public Triangular<A> clone()
    {
        Triangular<A> shell=new Triangular<A>(0);
        copy(shell);
        return shell;
    }

}