package main;

import java.io.Serializable;

import gui.InvalidPositionException;

/**
 * #### ## ## ######### ## ### #### #####. ### ##### ########## ### ##### ##
 * ### #### ### ######## ### #### ## # #### #####. ### ### #### #### #########
 * ## ### ### ####### ##### ## ### #### ## ##### ## ###### ### ###########
 * ######### ## ### #### ######.
 * ###### #### ### ######### ## #### ## ### #### #####, #########
 * 
 * ## ### #### ### ###### ########## ####### ## #### #########.
 * #### #### ## ### #### ### #######.
 * 
 * @###### ######### #########
 * @###### ####### #####
 *
 */
public class Model implements IModel{

    private Spieler spieler;
    private Aufzug aufzug;
    private IModel model;
    
    
    public Model(){
        this.spieler = new Spieler(this);
        this.aufzug = new Aufzug();
    }
    
    /**
     * Get the width of the grid.
     * The grid is the area of underground fields in which the player moves
     * around when digging for minerals. This area has a predefined width.
     * @return Width of the grid
     */
    public int getWidthOfGrid(){
        return 201;
       }
    
    /**
     * Get the height of the grid.
     * The grid is the area of underground fields in which the player moves
     * around when digging for minerals. This area has a predefined height.
     * @return Height of the grid
     */
    public int getHeightOfGrid(){
        return 201;
       }
    
    /**
     * In each game state, the player has position relative to the origin of a
     * predefined coordinate system. See the task description of the lab for
     * details on the coordinate system.
     * @return The position of the player
     * @see Position
     */
    public Position getPositionOfPlayer(){
        return spieler.GibPositionDesSpielers();
       }
    
    /**
     * Place the player at the initial position. See the task description of
     * the lab for details on how to figure out the correct initial position.
     * @see Position
     * @throws InvalidPositionException 
     */
    public void setPlayerToStartPosition() throws InvalidPositionException{
        spieler.SetPositionDesSpielers(new Position(0 , -2));
       }
    
    /**
     * Returns the position of the field at the upper left corner of the
     * underground area.
     * @return The position of the field at the top left corner of the
     * underground grid
     */
    public Position getUndergroundOrigin(){
        return new Position (0 , 0);
       }
    
    /**
     * Sets the position of the player relative to the origin of a predefined
     * coordinate system. See the task description of the lab for details on
     * the coordinate system.
     * @param position The position of the player
     * @throws InvalidPositionException 
     * @see Position
     */
    public void setPositionOfPlayer(Position position) throws InvalidPositionException{
        spieler.SetPositionDesSpielers(position);
       }
        

    /**
     * Places an item on the field at the specified position. An item in this
     * case would be a mineral, for example. The term field refers to a unit
     * of space which represents one step of the miner in the
     * underground area.
     * This method is used by the unit tests to produce test situations
     * for the controller tests.
     * @param position The position of the field on which the item should be
     * placed.
     * @param item The item to be placed.
     */
    public void placeItemOnField(Position position, String item){
       }

    /**
     * Removes a given item from a field, if the item is present. An item in
     * this case would be a mineral, for example. The term field refers to a
     * unit of space which represents one step of the miner in the
     * underground area.
     * This method is used by the unit tests to produce test situations for
     * the controller tests.
     * @param position The position of the field from which the item should
     * be removed
     * @param item The Item to be removed
     */
    public void removeItemFromField(Position position, String item){
       }
    
    /**
     * Removes all items from a given field. Items in this case
     * would be minerals, for example. The term field refers to a unit of
     * space which represents one step of the miner in the underground area.
     * This method is used by the unit tests to produce test
     * situations for the controller tests.
     * @param position to remove the items from
     */
    public void removeAllItemsFromField(Position position){
       }
    
    /**
     * Checks if an item is on the field at a specified position.
     * An item in this case would be a mineral, for example.
     * The term field refers to a unit of space which rep   resents one step of
     * the miner in the underground area.
     * @param position The position of the field to be checked
     * @param item The item to check the field for
     * @return True if the item is on the field, false if not
     */
    public boolean containsItemOnField(Position position, String item){
       return false;
    }
    
    /**
     * Sets the visibility of a field. If a field is visible, the items that
     * are contained by this field are visible to the user in the GUI.
     * @param position The position of the field to set the visibility for
     * @param visibility Boolean to represent if the field is visible or not
     */
    public void setVisibilityOfField(Position position, boolean visibility){
       }
    
    /**
     * Checks if a field at a given position is visible. If a field is
     * visible, the items that are contained by this field are visible to
     * the user in the GUI.
     * @param position The position to check
     * @return true if the field is visible, false if not
     */
    public boolean isFieldVisible(Position position){
       return false;
    }
    
    /**
     * The possible types which can be returned by this method can be found
     * in the task description of this lab and in the interface Constants.
     * If additional field types are implemented later, this will imply
     * changes to the GUI.
     * For predefined field types, the method should return one of the String
     * constants defined in the interface Constants, because only those can
     * be handled by the current implementation of the GUI.
     * @param position The Position of the field
     * @return The type of the field at the given position
     * @see Position
     */
    public String getTypeOfField(Position position){
    return "";   
    }
    
    /**
     * Sets the type of a field at a given position. The type of a field
     * refers to the kind of material it represents.
     * The set of possible types can be found in the task description of this
     * lab and in the interface Constants.
     * If additional field types are implemented later, this will imply
     * changes to the GUI.
     * @param position The position of the field
     * @param type of the Field at the given position
     */
    public void setTypeOfField(Position position, String type){
       }
    
    /**
     * Get the inventory of the player.
     * The inventory of the player contains all items which the player has,
     * including minerals, tools, etc. If additional items are
     * implemented later, this will imply changes to the GUI.
     * The inventory is modeled as an array of GuiInventoryEntries which map
     * items to natural numbers (integer) representing the number of items of
     * that type in the current inventory.
     * @see GuiInventoryEntry
     * @return the Inventory of the player
     */
    public GuiInventoryEntry[] getInventoryOfPlayer(){
        return new GuiInventoryEntry[0];
    }
    
    /**
     * Sets the inventory of the player.
     * The inventory of the player contains all items which the player has,
     * including minerals, tools, etc. If additional items are
     * implemented later, this will imply changes to the GUI.
     * The inventory is modeled as an array of GuiInventoryEntries which map
     * items to natural numbers (integer) representing the number of items of
     * that type in the current inventory.
     * @see GuiInventoryEntry
     * @param inventory to set
     */
    public void setInventoryOfPlayer(GuiInventoryEntry[] inventory){
       }
    
    /**
     * Get the player's current amount of money.
     * @return The amount of money
     */
    public int getMoneyOfPlayer(){
        return spieler.GibVermoegenDesSpielers();
       }
    
    /**
     * Set the player's current amount of money.
     * @param money The amount of money to set
     */
    public void setMoneyOfPlayer(int money){
        spieler.GibVermoegenDesSpielers();
       }
    
    /**
     * Get the player's current amount of health.
     * @return The amount of health
     */
    public int getHealthOfPlayer(){
        return spieler.GibGesundheitDesSpielers();
       }
    
    /**
     * Set the health of the player to a given amount.
     * The range for the health is 0 through 109.
     * @param The amount of health to set
     */
    public void setHealthOfPlayer(int health){
        spieler.SetGesundheitDesSpielers();
       }
    
    /**
     * Get the current Position of the elevator.
     * For details on the term position, see the task description and the
     * attached documentation.
     * @return The position of the elevator
     * @see Position
     */
    public Position getPositionOfElevator(){
      return Position Aufenthaltsort;
    }
    
    /** 
     * Set the position of the elevator.
     * For details on the term position, see the task description and the
     * attached documentation.
     * @param position The position to set
     * @throws InvalidPositionException 
     * @see Position
     */
    public void setPositionOfElevator(Position position) throws InvalidPositionException{
       }
    
    /**
     * Get the current location of the Player.
     * For details on the term location, see the task description and the
     * attached documentation.
     * @return The location of the player
     */
    public String getLocationOfPlayer(){
        return spieler.GibLocationDesSpielers();
        }
    
    /**
     * Sets the location of the player.
     * For details on the term location, see the task description and the
     * attached documentation.
     * @param location to set
     */
    public void setLocationOfPlayer(String location){
        spieler.SetLocationDesSpielers(location);
       }
    
    /**
     * Minerals are traded at a daily quote. This method gets a quote
     * from the model.
     * @param mineral The mineral to get the quote for.
     * @return A number that represents the quote.
     */
    public int getQuote(String mineral){
       }
    
    /**
     * Returns the vertical coordinate (x-coordinate) of the door position
     * of a given house. This method is used by the GUI in order to place the
     * houses displayed in the game window.
     * @param house The name of the house for which to get the door position
     * @return A number that represents the vertical coordinate of the
     * door position
     */
    public int getPositionOfHouse(String house){
       }   
}