
/* #### ### ####### ########## #
 * ####: ###### ######
 * ########: ##########
 * ##: #########
 */

import ecs100.*;
import java.awt.Color;

/**
 * ##### # #### #### ### #### ## ##### ########, ### #### ###### #### ### #### ## #####
 */

public class DateValidator {

    /**
     * Asks user for a date, then determines whether the date
     *    specified by the three integers is a valid date.
     * For the Core, you may assume that
     * - All months have 31 days, numbered 1 to 31
     * - The months run from 1 to 12
     * - Years start from 1900 
     */
    public void validateDateCore(){
        
        UI.printf("Code will validate a date for a specific year.\n");
        
        
        int day = UI.askInt("Please enter a day:");
        int month = UI.askInt("Please enter a month:");
        int year = UI.askInt("Please enter a year:");
        
        
        if (day <= 0 || day > 31) {
            
            UI.println("The date entered is not valid.");
            
        } else if (month <=0 || month > 12) {
            
            UI.println("The date entered is not valid.");
            
        } else if (year < 1900) {
            
            UI.println("The date entered is not valid.");
            
        } else {
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        }
        

    }

    /**
     * Asks user for a date, then determines whether the date
     *    specified by the three integers is a valid date.
     * For the Completion, you should also check that
     * - Months have the correct number of days
     * - On leap years February should have 29 days.
     *    A year is a leap year if:
     *       - The year can be evenly divided by 4 but not 100
     *       - The year can be evenly divided by 400 
     */
    
    /**
     * number of days in each month
     * every month final except feb
     * so we can check for leap year
     */
         
        public static final int jan = 31;
        int feb = 28;  
        public static final int mar = 31;
        public static final int apr = 30;
        public static final int may = 31;
        public static final int jun = 30;
        public static final int jul = 31;
        public static final int aug = 31;
        public static final int sep = 30;
        public static final int oct = 31;
        public static final int nov = 30;
        public static final int dec = 31;
    
    
    public void validateDateCompletion(){
        
        /**
         * ask for a date
         */
        
        UI.printf("Code will validate a date for a specific year.\n");
        
        
        int day = UI.askInt("Please enter a day:");
        int month = UI.askInt("Please enter a month:");
        int year = UI.askInt("Please enter a year:");
        
        /**
         * check for valid year, month, day
         */
        
        if (year < 0){
        
            UI.println("The date entered is not valid.");
            
        } else if (month <=0 || month > 12) {
            
            UI.println("The date entered is not valid.");
            
        } else if (month = 1) {
           
            if (! this.checkDaysInMonth(day,jan)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 2) {
            
            if (! this.checkDaysInMonth(day,feb)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 3) {
            
            if (! this.checkDaysInMonth(day,mar)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
                
        } else if (month = 4) {
            
            if (! this.checkDaysInMonth(day,apr)) UI.println("The date entered is not valid.");
                
        } else if (month = 5) {
            
            if (! this.checkDaysInMonth(day,may)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
         
        } else if (month = 6) {
            
            if (! this.checkDaysInMonth(day,jun)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 7) {
            
            if (! this.checkDaysInMonth(day,jul)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
        
        } else if (month = 8) {
            
            if (! this.checkDaysInMonth(day,aug)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 9) {
            
            if (! this.checkDaysInMonth(day,sep)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 10) {
            
            if (! this.checkDaysInMonth(day,oct)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else if (month = 11) {
            
            if (! this.checkDaysInMonth(day,nov)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        } else {
            
            if (! this.checkDaysInMonth(day,dec)) UI.println("The date entered is not valid.");
            
            UI.printf("The date %d/%d/%d is valid.", day,month,year);
            
        }
        
        
        
        
        
        
        boolean checkDaysInMonth(int day,int month) {
            
            if (day < 0) || day > month) return false;
            
        }
          
    }

    /**
     * For the challenge, your program should be extended to deal with the transition from the Julian to Gregorian calendar. 
     * The program should look at the date, determine whether this should be a Julian or Gregorian date, and test it appropriately. 
     * You will need to find the rules of the Julian calendar yourselves. 
     * 
     */
    public void validateDateChallenge(){
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/
    /** Constructor: set up user interface */
    public DateValidator(){
        UI.initialise();
        UI.addButton("Clear", UI::clearText );
        UI.addButton("Validate Date Core", this::validateDateCore );
        UI.addButton("Validate Date Completion", this::validateDateCompletion );
        UI.addButton("Quit", UI::quit );
        UI.setDivider(1);       
    }


}
