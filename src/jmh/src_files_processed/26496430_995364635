
/**
 * ##### # ########### ## ##### ####### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class BusStop
{
	private BusArrival[] _buses;
	private int _noOfBuses;
	private final int MAX_BUSES_ARR = 1000;
	
    public BusStop()
    {
		_buses = new BusArrival[MAX_BUSES_ARR];
		_noOfBuses = 0;
    }
	
	
    public BusStop(int size)
    {
		_buses = new BusArrival[size];
		_noOfBuses = 0;
    }
	
	
	public BusArrival[] getBuses()
	{

        BusArrival[] newArray = new BusArrival[_buses.length];
 
        for(int i =0;i < _noOfBuses;i++)
            newArray[i] = new BusArrival(_buses[i]);
			
		return newArray;
	}
	
	
	public int getNoOfBuses()
	{
		return _noOfBuses;
	}
	
	
	public boolean add(int line, int pass, Time1 t)
	{
		if(_noOfBuses < _buses.length)
		{
			_buses[_noOfBuses] = new BusArrival(line, pass, t);
			
			_noOfBuses++;
			
			return true;
		}
		
		return false;
	}
	
	
	public void removeAllLine(int line)
	{
		int numberOfBuses = _noOfBuses;
		int counter = 0;
		BusArrival[] newArray = new BusArrival[_buses.length];
		
		for(int i = 0;i < numberOfBuses;i++)
		{
			if(_buses[i].getLineNum() == line)
			{
				_noOfBuses--;
			}
			else
			{
				newArray[counter] = _buses[i];
			}
		}
		
		_buses = newArray;
	}
	
	
	public int getPopularLine()
	{
		return 0;
	}
	
	
	public long getAverageTime()
	{
		return 0;
	}
	
	
	public int totalPassengers()
	{
		return 0;
	}
	
	
	public BusArrival maxPassengers()
	{
		return new BusArrival(1, 1, new Time1(0,0,0);
	}
	
	
	public String toString()
	{
		return "sdf";
	}
	
	
	

}