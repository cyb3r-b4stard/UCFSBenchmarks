import java.util.*;

/**
 * ### #### ##### ########## # ####### ######## ## ### ########### ####. ##
 * ##### ##### ## ### ##### ######, ##### ## #####, ####, ### ##########
 * #######, ### ####### #####, ### ####### ### ###### ### ###.
 * 
 * ### #### ###### (##### ##'## ####### ### ###) #### ###### # ### ######## ##
 * #### ##### #### ### ###### ####### # ##### ## ####. 
 * 
 * ## #### ######### ## ### #### ####, ### #### ###### ##### ### ######() ######
 * ## ### #### #####. ### ######() ###### ##### #### ## ### ####### ## ### ####
 * ## ###### ###### ##### ## ### ##### ## ### ####. ## #### ###### ## ### ####
 * ## #### ## ###.
 */
public class Game 
{   
    private Snake snake;
    private ArrayList<Apple> apples;        
    private ArrayList<Rock> rocks;          
    private ArrayList<PortalPair> portals;  

    public int controlType;
    /**
     * 
     * TODO: Have students implement this
     * 
     * @param level - "RANDOM" or descriptions of the object to load
     * @param controlType - 1: classic, 2: analog, 3: slither
     */
    public Game(String level, int controlType) 
    {
        rocks = new ArrayList<Rock>();
        apples = new ArrayList<Apple>();
        portals = new ArrayList<PortalPair>();
        this.controlType = controlType;
        createRandomLevel();
    }

    /**
     * TODO: Have students implement this.
     * create a new level with randomly positioned:
     * Snake(1), Rocks(20), Apples(8), and PortalPairs(3)
     */
    public void createRandomLevel()
    {
        snake = new Snake((int)(Math.random()*Engine.getWidth()), (int)(Math.random()*Engine.getHeight()));
        for(int i = 0; i<20; i++)
        {
            int rx = (int)(Math.random()*Engine.getWidth());
            int ry = (int)(Math.random()*Engine.getHeight());
            Rock r = new Rock(rx,ry);
            rocks.add(r);
            System.out.println("added rock");
        }
        for(int i = 0; i<8; i++)
        {
            int ax = (int)(Math.random()*Engine.getWidth());
            int ay = (int)(Math.random()*Engine.getHeight());
            Apple a = new Apple(ax,ay);
            apples.add(a);
            System.out.println("added apple");
        }
        for(int i = 0; i<3; i++)
        {
            int bluex = (int)(Math.random()*Engine.getWidth());
            int bluey = (int)(Math.random()*Engine.getHeight());
            int orangex = (int)(Math.random()*Engine.getWidth());
            int orangey = (int)(Math.random()*Engine.getHeight());
            String name = "name";
            PortalPair p = new PortalPair(String)name,(float)blueX, (float)blueY,(float)orangeX,(float)orangeY,;
            portals.add(p);
            System.out.println("added portals");
        }
        
    }

    /**
     * Loads a level from a String description.
     * 
     * Initializes all of the class private fields which hold the Snake object
     * and the lists of Apple, Rock, and PortalPair objects from the provided
     * String which contains  
     * 
     * TODO: Implement this method
     * 
     * @param level - a string containing the names and locations of objects
     */
    public void loadLevel(String level)
    {



        

    }

    /**
     * Updates the game objects.
     * 
     * Goes through each of the objects--the snake, rocks, apples, and portals--
     * and tells them to behave according to the rules of the game. This method
     * returns true if the game should continue, or false if the game is over.
     * 
     * TODO: Implement this
     * 
     * @return - false if the game is over, otherwise true
     */
    public boolean update()
    {
        snake.updateMoveDirection(controlType);




        
        
        
        return true;
    }

    /**
     *  Returns true if the player has won
     * 
     * TODO: Implement this
     * 
     * @return true when the player has won, and false when they have lost or
     * the game is not over
     */
    public boolean playerHasWon()
    {
        return false;
    }
    
    /**
     * Returns the player's score.
     * 
     * TODO: Implement this.
     * 
     * @return the current score (number of apples eaten)
     */
    public int getScore() {
        return -1;
    }   

    /**
     * There is nothing left to implement in this method, it simply calls
     * Engine.startEngineAndGame(), which in turn starts the Engine and creates
     * an instance of this Game class.  The engine will then repeatedly call
     * the update() method on this Game until it returns false.
     * 
     * If you want to turn off the logging you can change the parameter being
     * passed to startEngineAndGame to false.  
     *  
     * @param args - command line arguments
     */
    public static void main(String[] args)
    {
        Application.startEngineAndGame(true);
    }
}