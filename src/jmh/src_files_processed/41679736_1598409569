import java.util.Random;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
/**
 * @###### ##### #########
 * @#### ##/#/##
 */
public class Company
{
    private int MIN;
    private int MAX;
    private Random randomGenerator;
    private String name;
    private HashMap<String , String> employees;
    
    /**
     * The Constructor.
     */
    public Company (String name){
        this.name = name.trim().toUpperCase().replaceAll(name , this.name);
        employees = new HashMap();
    }
    
    /**
     * This method will return the Name field.
     */
    public String getName(){
        return name;
    }
    
    /**
     * This method will return the Employees field.
     */
    public HashMap getEmployees(){
        return employees;
    }
    
    /**
     * This method will return the Total number of employees.
     */
    public int getTotalNumberEmployees(){
        return employees.size();
    }
    
    /**
     * This method will return the formatted strtring.
     */
    public String formatString(String origString){
        if (origString == null){
            return "";
        }
        String newString = origString;
        newString = newString.trim().toUpperCase().replaceAll(origString , newString);
        return newString;
    }
    
    /**
     * This method will return the employee name and an id that was generated ranomly.
     */
    public String generateId (String name){
        MAX = 1000;
        MIN = 100;
        String[] nameArray = name.split(" ");
        HashSet<String> words = new HashSet<>();
        for (String word : nameArray){
            words.add(word);
        }
        randomGenerator = new Random();
        int index = randomGenerator.nextInt(MAX - MIN) + MIN;
        return name + " " + index ;
    }
    
    /**
     * This method will add employees.
     */
    public void addEmployee (String inputName){
        inputName = inputName.trim();
        String ID = generateId(inputName);
        formatString(ID);
        if ((inputName == null) || (inputName.isEmpty() == true)){
            System.out.println("Name is INVALID");
        }
        
        if (employees.containsKey(inputName)){
            System.out.println("Existing: "+inputName);
        }
        else{
            employees.put(inputName , ID);
            System.out.println(ID);
        }
        
    }
    
    /**
     * This method will remove an employee.
     */
    public void removeEmployee (String inputName){
        if ((inputName == null) || (inputName.isEmpty() == true)){
            System.out.println("Name is INVALID");
        }
        
        if (!employees.containsKey(inputName)){
            System.out.println("Non-existing: "+name);
        }
        else if(employees.containsKey(inputName)){
            System.out.println("Removed " +employees.get(inputName));
            employees.remove(inputName);
        }
        
    }
    
    /**
     * This method will remove ALL the ID mappings.
     */
    public void removeIds (String id)
    {
        boolean isFound;
        formatString(id);
        Iterator<C>;
        if ((id == null) || (id.isEmpty() == true)){
            System.out.println("Error");
        }
        
        
        for ( String  M : employees.keySet())
        {
            
            
            
            
            
        }
        
        System.out.println(employees.get(name));
        if (isFound = false){
            System.out.println("NO employees with id: "+id);
        }
    }
    
    /**
     * This method will print ALL the employees names.
     */
    public void listEmployees(){
        if (employees.isEmpty() == true){
            System.out.println("NO employees");
        }
        else{
            System.out.println("Employees for "+name);
            for (String L : employees.keySet()){
                System.out.println(" "+ employees.get(name) + " ");
            }
        }
    }
    
}