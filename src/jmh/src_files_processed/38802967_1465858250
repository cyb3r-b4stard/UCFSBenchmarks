public class Test
{
    private int []examScores;
    private int []testScores;
    
    public Test(){
        examScores = new int[100];
        testScores = new int[100];
    }
    
    public void problem1(){
        int []myList = new int[10];
        for (int i = 0; i < myList.length; i++){
            myList[9-i] = i;
        }
        
        for (int i = 0; i < myList.length; i++){
            System.out.println(myList[i]);
        }
        
        for (int i = 5; i < myList.length; i++){
            myList[i] = myList[i] + myList[i-3];
        }
        
        for (int i = 0; i < myList.length; i++){
            System.out.println(myList[i]);
        }
    }
    
    public boolean noFs(){
        for (int i = 0; i < examScores.length; i++){
            if (examScores[i] < 60){
                return false;
            }
        }
        return true;
    }
    
    public void badTeacher(){
        int maxScore = 0;
        for (int i = 0; i < examScores.length; i++){
            if (examScores[i] >= maxScore){
                maxScore = examScores[i];
            }
        }
        examScores[4] = maxScore;
    }
    
    public int range(){
        int highScore = 0;
        int lowScore = 100;
        for (int i = 0; i < testScores.length; i++){
            if (testScores[i] > highScore){
                highScore = testScores[i];
            }
            
            if (testScores[i] < lowScore){
                lowScore = testScores[i];
            }
        }
        int range = highScore - lowScore;
        return range;
    }
    
    public void problem5(){
        int [] arr = new int[10];
        int k;
        for (int j = 0; j < 10; j++){
            k = 10 - (j + 1);
            arr[j] = k;
        }
        
        for (int j = 0; j < 10; j++){
            System.out.println(j + " " + arr[j]);
        }
    }
    
    public int gpaCheck(){
        double []midtermArr = new double[8];
        double []finalArr = new double[8];
        improve = 0;
        for (int i = 0; i < 8; i++){
            if (finalArr[i] - midtermArr[i] >= 1.0){
                improve++
            }
        }
        return improve;
    }
}