import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class ConnecTicThree{

    public static void main(String[] args) {
        Connect4JFrame frame = new Connect4JFrame();
        frame.setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);

    }
}

class Connect4JFrame extends JFrame implements ActionListener {

    private Button          btn1, btn2, btn3;
    int[][]                 theArray;
    boolean                 gameIsOver=false;
    boolean                 gameStart;
    MenuItem                newGame, exit, redMI, yellowMI;
    public static final int BLANK = 0;
    public static final int RED = 1;
    public static final int YELLOW = 2;

    public static final int MAXROW = 3;   
    public static final int MAXCOL = 3;    

    int activeColour = RED;

    public Connect4JFrame() {
        Panel panel = new Panel();
        setTitle("ConnectTicThree");
        JMenuBar menuBar;

        JMenu fileMenu;

        JMenuItem newGame;
        JMenuItem exit;

        menuBar = new JMenuBar();
        setJMenuBar(menuBar);

        fileMenu = new JMenu("Game");

        newGame = new JMenuItem("New Game");
        exit = new JMenuItem("Exit");
        exit.addActionListener(this);
        newGame.addActionListener(this);

        menuBar.add(fileMenu);

        fileMenu.add(newGame);
        fileMenu.add(exit);
        add(Box.createHorizontalStrut(50));

        btn1 = new Button("|1|_|_|");
        btn1.addActionListener(this);
        panel.add(btn1);
        panel.add(Box.createHorizontalStrut(20));

        btn2 = new Button("|_|2|_|");
        btn2.addActionListener(this);
        panel.add(btn2);

        panel.add(Box.createHorizontalStrut(20));

        btn3 = new Button("|_|_|3|");
        btn3.addActionListener(this);
        panel.add(btn3);

        panel.add(Box.createHorizontalStrut(30));

        add(panel, BorderLayout.NORTH);
        initialize();
        setSize(1024,500 );

    } 

    /**
     * Initialiazes the array of the game with 0
     * in order to start the game
     * @param none
     * @return none
     */

    public void initialize() {
        theArray=new int[MAXROW][MAXCOL];
        for (int row=0; row<MAXROW; row++)
            for (int col=0; col<MAXCOL; col++)
                theArray[row][col]=BLANK;
        gameStart=false;
    } 

    /**
     * A method that paints the an illustration of the array
     * in order to give player a better view
     * @param Graphics g
     * @return none
     */
    public void paint(Graphics g) {
        g.setColor(Color.BLUE);
        g.fillRect(280, 90, 90+100*MAXCOL, 90+100*MAXROW);
        for (int row=0; row<MAXROW; row++)
            for (int col=0; col<MAXCOL; col++) {
                if (theArray[row][col]==BLANK) g.setColor(Color.WHITE);
                if (theArray[row][col]==RED) g.setColor(Color.RED);
                if (theArray[row][col]==YELLOW) g.setColor(Color.YELLOW);
                g.fillOval(330+100*col, 130+100*row, 100, 100);
        }
        findWinner(g);
    } 

    public void putDisk(int n) {
        if (gameIsOver){
            return;
        }
        else{
            gameStart=true;
            int row;
            n--;
            for (row=0; row<MAXROW; row++)

                if (theArray[row][n]>0) break;

            if (row>0) {
                theArray[--row][n]=activeColour;
                if (activeColour==RED)
                    activeColour=YELLOW;
                else
                    activeColour=RED;
                repaint();
            }
        }
    }

    /**
     * A method that displays the winner of the game and its
     * colour after being checked by the findWinner() method
     * @param Graphics g,int n
     * @return none
     */
    public void displayWinner(Graphics g, int n) {
        g.setColor(Color.BLACK);
        g.setFont(new Font("Courier", Font.BOLD, 100));
        if (n==RED)
            g.drawString("Red wins!", 100, 400);
        else
            g.drawString("Yellow wins!", 100, 400);
        gameIsOver=true;
    }

    /**
     * A method that checks if there's a winner by checking the
     * array horizontally,vertically,and diagonally both upper left
     * to lower right and upper right to lower left
     * @param Graphics g
     * @retrun none
     */
    public void findWinner(Graphics g) {

        int colh=0;
        for (int rowh=0; rowh<MAXROW; rowh++) {

            int curr = theArray[rowh][0];
            if (curr>0 && curr == theArray[rowh][colh+1] && curr == theArray[rowh][colh+2]) 
            {
                displayWinner(g, theArray[rowh][colh]);
            }

        }

        int rowv=0;
        for (int colv=0; colv<MAXCOL; colv++) {

            int curr = theArray[0][colv];
            if (curr>0 && curr == theArray[rowv+1][colv]&& curr == theArray[rowv+2][colv]){
                displayWinner(g, theArray[rowv][colv]);
            }

        }

        int rowd=0;
        int cold=0;
        for (int j=0; j<MAXROW; j++) {
            int curr = theArray[rowd][cold];
            if (curr>0 && curr == theArray[rowd+1][cold+1] && curr == theArray[rowd+2][cold+2]){
                displayWinner(g, theArray[rowd][cold]);
            }
        }

        int row_d=2; 
        int col_d=0;
        for(int i=0;i<MAXCOL;i++){
            int curr = theArray[row_d][col_d];
            if (curr>0 && curr == theArray[row_d-1][col_d+1]&& curr == theArray[row_d-2][col_d+2]){
                displayWinner(g, theArray[row_d][col_d]);
            }

        }

    } 

    exit.addActionListener(new ActionListener(){
        public void actionPerformed(ActionEvent e){
            System.exit(0);
        }
    });
    /*
    public void actionPerformed(ActionEvent e) {
    if (e.getSource() == btn1)
    putDisk(1);
    else if (e.getSource() == btn2)
    putDisk(2);
    else if (e.getSource() == btn3)
    putDisk(3);
    else if (e.getSource() == newGame) {
    gameIsOver=false;
    initialize();
    repaint();
    }
    else if (e.getSource() == exit) {
    System.exit(0);
    }
    else if (e.getSource() == redMI) {
    if (!gameStart) activeColour=RED;
    } else if (e.getSource() == yellowMI) {
    if (!gameStart) activeColour=YELLOW;
    }
    } 
     */
} 
