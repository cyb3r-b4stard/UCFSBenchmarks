/**
 * #### ##### #### ########## # ####-#### #### ####
 * 
 * @######  ###### #. ##### ##.
 * @####### ## ### ##; ## ### ##; ## ### ##; ## ### ##; ## ### ##; ## ### ##
 *          ## ### ##; ## ### ##; ## ### ##
 */

interface Functor { Object fn(Object x); }

interface Predicate { boolean pred(Object x); }

public class Cons
{
    private Object car;
    private Cons cdr;
    private Cons(Object first, Cons rest)
       { car = first;
         cdr = rest; }
    public static Cons cons(Object first, Cons rest)
      { return new Cons(first, rest); }
    public static boolean consp (Object x)
       { return ( (x != null) && (x instanceof Cons) ); }
    public static Object first(Cons lst) {
        return ( (lst == null) ? null : lst.car  ); }
    public static Cons rest(Cons lst) {
      return ( (lst == null) ? null : lst.cdr  ); }
    public static Object second (Cons x) { return first(rest(x)); }
    public static Object third (Cons x) { return first(rest(rest(x))); }
    public static void setfirst (Cons x, Object i) { x.car = i; }
    public static void setrest  (Cons x, Cons y) { x.cdr = y; }
   public static Cons list(Object ... elements) {
       Cons list = null;
       for (int i = elements.length-1; i >= 0; i--) {
           list = cons(elements[i], list);
       }
       return list;
   }

    public String toString() {
       return ( "(" + toStringb(this) ); }
    public static String toString(Cons lst) {
       return ( "(" + toStringb(lst) ); }
    private static String toStringb(Cons lst) {
       return ( (lst == null) ?  ")"
                : ( first(lst) == null ? "()" : first(lst).toString() )
                  + ((rest(lst) == null) ? ")" 
                     : " " + toStringb(rest(lst)) ) ); }

    public static int square(int x) { return x*x; }

public static Cons dmerj (Cons x, Cons y) {
  if ( x == null ) return y;
   else if ( y == null ) return x;
   else { Cons front = x;
          if ( ((Comparable) first(x)).compareTo(first(y)) < 0)
             x = rest(x);
            else { front = y;
                   y = rest(y); };
          Cons end = front;
          while ( x != null )
            { if ( y == null ||
                   ((Comparable) first(x)).compareTo(first(y)) < 0)
                 { setrest(end, x);
                   x = rest(x); }
               else { setrest(end, y);
                      y = rest(y); };
              end = rest(end); }
          setrest(end, y);
          return front; } 
        }

public static Cons midpoint (Cons lst) {
  Cons current = lst;
  Cons prev = current;
  while ( lst != null && rest(lst) != null) {
    lst = rest(rest(lst));
    prev = current;
    current = rest(current); };
  return prev; }

public static Cons llmergesort (Cons lst) {
  if ( lst == null || rest(lst) == null)
     return lst;
   else { Cons mid = midpoint(lst);
          Cons half = rest(mid);
          setrest(mid, null);
          return dmerj( llmergesort(lst),
                        llmergesort(half)); 
         } 
                    }



public static Cons union (Cons x, Cons y) {
    Cons v = llmergesort(x);
    Cons w = llmergesort(y);
    return mergeunion (v,w);
}

public static Cons mergeunion (Cons x, Cons y) {
    if (x == null){
        return y;
    }
    else if (y == null){
        return x;
    }
    else if (((Comparable)first(x)).compareTo(first(y)) == 0){
        return cons(first(x),mergeunion(rest(x),rest(y)));
    }
    else if (((Comparable)first(x)).compareTo(first(y)) < 0){
        return cons (first(x),mergeunion(rest(x),y));
    }
    else{
        return cons(first(y),mergeunion(x,rest(y)));
    }
}

public static Cons setDifference (Cons x, Cons y) {
    Cons v = llmergesort(x);
    Cons w = llmergesort(y);
    return mergediff(v,w);
}

public static Cons mergediff (Cons x, Cons y) {
    if (x == null){
        return null;
    }
    else if ( y == null){
        return cons(first(x),mergediff(rest(x),y));
    }
    else if (((Comparable)first(x)).compareTo(first(y)) == 0){
        return mergediff(rest(x),rest(y));
    }
    else if (((Comparable)first(x)).compareTo(first(y)) < 0){
        return cons(first(x),mergediff(rest(x),y));
    }
    else{
        return mergediff(x,rest(y));
    }
}

public static Cons bank(Cons accounts, Cons updates) {
    Cons combine = union (accounts,updates);
    System.out.println (combine);
    Cons Sort_update = list();
     while (combine != null){
        if (((Comparable)first(combine)).compareTo(second(combine)) == 0){
            if (((Account)first(combine)).amount() + ((Account)second(combine)).amount() < 0){
            int balance =  (((Account)first(combine)).amount() + ((Account)second(combine)).amount());
            System.out.println ("Overdraft " + ((Account)first(combine)).name() + (((Account)first(combine)).amount() + ((Account)second(combine)).amount()));
            Cons Update = list (((Account)first(combine)).name(),balance);
            return Update;
            }
        }
        else if (((Comparable)first(combine)).compareTo(second(combine)) > 0){
            int balance =  (((Account)first(combine)).amount() + ((Account)second(combine)).amount());
            System.out.println ("Overdraft " +((Account)first(combine)).name() + (((Account)first(combine)).amount() + ((Account)second(combine)).amount()));
            Cons Update = list( 
            ((Account)first(combine)).name(),balance),
            bank(accounts,combines));
            return Update;
        }
        else{
            int balance = ((Account)first(combine)).amount();
            System.out.println ("Overdraft " +((Account)first(combine)).name() + (((Account)first(combine)).amount() + ((Account)second(combine)).amount()));
            Cons Update = list (((Account)first(combine)).name(),balance);
            return Update;
        }
        combine = rest(combine);
    }
    return Sort_update;
}
        
    

public static String [] mergearr(String [] x, String [] y) {
   String [] Merge = new String [x.length + y.length];
   int u = 0;
   int v = 0;
   int w = 0;
   while (u < x.length && v < y.length){
       if (((Comparable)x[u]).compareTo(y[v]) > 0){
           Merge[w] = y[v];
           v++;
           w++;
        }
       else if (((Comparable)x[u]).compareTo(y[v]) < 0){
           Merge[w] = x[u];
           u++;
           w++;
        }
       else{
           Merge[w] = x[u];
           w++;
           u++;
           Merge [w] = y[v];
           w++;
           v++;
        }   
       while(v < y.length){
           Merge[w] = y[v];
           w++;
           v++;
        }
       while(u < x.length){
           Merge[w] = x[u];
           w++;
           u++;
        }
    }
   return Merge;    
}

public static boolean markup(Cons text) {
    Cons x = null;
    int position = 0;
    while(text != null){

        StringBuffer s = new StringBuffer(((String)first(text)).trim());

        if(s.length() > 0){
            if(s.charAt(0) == 60 && s.charAt(1) != 47){
                String tag = s.substring(1,s.length()-1);
                x = cons(tag, x);
            }

            else if(s.charAt(0) == 60 && s.charAt(1) == 47){
                String tag = s.substring(2,s.length()-1);

                if(tag.equals(first(x))){
                    x = rest(x);
                }
                else{
                    System.out.println("Bad tag " + tag + " at pos " + position + " should be " + first(x));
                    return false;
                }
            }
        }
        text = rest(text);
        position++;
        }
    if(x != null){
        System.out.println("Unbalanced tag " + first(x));
        return false;
    }
    return true;
}


    public static void main( String[] args )
      { 
        Cons set1 = list("d", "b", "c", "a");
        Cons set2 = list("f", "d", "b", "g", "h");
        System.out.println("set1 = " + Cons.toString(set1));
        System.out.println("set2 = " + Cons.toString(set2));
        System.out.println("union = " + Cons.toString(union(set1, set2)));

        Cons set3 = list("d", "b", "c", "a");
        Cons set4 = list("f", "d", "b", "g", "h");
        System.out.println("set3 = " + Cons.toString(set3));
        System.out.println("set4 = " + Cons.toString(set4));
        System.out.println("difference = " +
                           Cons.toString(setDifference(set3, set4)));

        Cons accounts = list(
               new Account("Arbiter", new Integer(498)),
               new Account("Flintstone", new Integer(102)),
               new Account("Foonly", new Integer(123)),
               new Account("Kenobi", new Integer(373)),
               new Account("Rubble", new Integer(514)),
               new Account("Tirebiter", new Integer(752)),
               new Account("Vader", new Integer(1024)) );

        Cons updates = list(
               new Account("Foonly", new Integer(100)),
               new Account("Flintstone", new Integer(-10)),
               new Account("Arbiter", new Integer(-600)),
               new Account("Garble", new Integer(-100)),
               new Account("Rabble", new Integer(100)),
               new Account("Flintstone", new Integer(-20)),
               new Account("Foonly", new Integer(10)),
               new Account("Tirebiter", new Integer(-200)),
               new Account("Flintstone", new Integer(10)),
               new Account("Flintstone", new Integer(-120))  );
        System.out.println("accounts = " + accounts.toString());
        System.out.println("updates = " + updates.toString());
        Cons newaccounts = bank(accounts, updates);
        System.out.println("result = " + newaccounts.toString());

        String[] arra = {"a", "big", "dog", "hippo"};
        String[] arrb = {"canary", "cat", "fox", "turtle"};
        String[] resarr = mergearr(arra, arrb);
        for ( int i = 0; i < resarr.length; i++ )
            System.out.println(resarr[i]);

        Cons xmla = list( "<TT>", "foo", "</TT>");
        Cons xmlb = list( "<TABLE>", "<TR>", "<TD>", "foo", "</TD>",
                          "<TD>", "bar", "</TD>", "</TR>",
                          "<TR>", "<TD>", "fum", "</TD>", "<TD>",
                          "baz", "</TD>", "</TR>", "</TABLE>" );
        Cons xmlc = list( "<TABLE>", "<TR>", "<TD>", "foo", "</TD>",
                          "<TD>", "bar", "</TD>", "</TR>",
                          "<TR>", "<TD>", "fum", "</TD>", "<TD>",
                          "baz", "</TD>", "</WHAT>", "</TABLE>" );
        Cons xmld = list( "<TABLE>", "<TR>", "<TD>", "foo", "</TD>",
                          "<TD>", "bar", "</TD>", "", "</TR>",
                          "</TABLE>", "</NOW>" );
        Cons xmle = list( "<THIS>", "<CANT>", "<BE>", "foo", "<RIGHT>" );
        Cons xmlf = list( "<CATALOG>",
                          "<CD>",
                          "<TITLE>", "Empire", "Burlesque", "</TITLE>",
                          "<ARTIST>", "Bob", "Dylan", "</ARTIST>",
                          "<COUNTRY>", "USA", "</COUNTRY>",
                          "<COMPANY>", "Columbia", "</COMPANY>",
                          "<PRICE>", "10.90", "</PRICE>",
                          "<YEAR>", "1985", "</YEAR>",
                          "</CD>",
                          "<CD>",
                          "<TITLE>", "Hide", "your", "heart", "</TITLE>",
                          "<ARTIST>", "Bonnie", "Tyler", "</ARTIST>",
                          "<COUNTRY>", "UK", "</COUNTRY>",
                          "<COMPANY>", "CBS", "Records", "</COMPANY>",
                          "<PRICE>", "9.90", "</PRICE>",
                          "<YEAR>", "1988", "</YEAR>",
                          "</CD>", "</CATALOG>");
        System.out.println("xmla = " + xmla.toString());
        System.out.println("result = " + markup(xmla));
        System.out.println("xmlb = " + xmlb.toString());
        System.out.println("result = " + markup(xmlb));
        System.out.println("xmlc = " + xmlc.toString());
        System.out.println("result = " + markup(xmlc));
        System.out.println("xmld = " + xmld.toString());
        System.out.println("result = " + markup(xmld));
        System.out.println("xmle = " + xmle.toString());
        System.out.println("result = " + markup(xmle));
        System.out.println("xmlf = " + xmlf.toString());
        System.out.println("result = " + markup(xmlf));

      }

}