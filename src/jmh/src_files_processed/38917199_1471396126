/**
 * ######## # ####### ## ###### ###########.
 * 
 * @###### (##### #######) 
 * @####### (####### ##, ####)
 */
public class Computer
{
    private String name; 

    /**
     * Constructor for objects of class Computer with a name
     */
    public Computer(String str)
    {
        name = str; 
    }

    /**
     * Return the sum of the digits of the integer 
     * 
     * @param  number  an integer, may be positive, zero or negative 
     * @return int     return the sum of the digits of the integer
     */
    public int sumDigits (int number)
    {
        int sum = 0;
        while (number > 0 || number < 0){
            int lastDigit = number % 10;
            sum += lastDigit;
            number /= 10;
        }
        if (sum < 0)
            sum = -sum;
        return sum;
    }

    /**
     * Return the substring of three characters in the middle of string 
     * 
     * @param  str     a string of odd length, with length >= 3 
     * @return String  return substring of three characters in the 
     *                 middle of string
     */
    public String middleThree (String str)
    {
        if (str.length() >= 3){
            int start = ((str.length() + 1) / 2) - 2;
            int end   = start + 3;
            return (str.substring(start, end));
        }
        else
            return ("invalid");
    }

    /**
     * Return the reverse of the string 
     * 
     * @param  str     a string to be reversed 
     * @return String  return reverse of the string provided 
     *                 
     */
    public String reverse (String str)
    {
        String result = new StringBuffer(str).reverse().toString();
        return result;
    }

    /**
     * Check if the password string meets rules set by administrator
     * 
     * @param  pasword a string to be checked for validitiy as password
     * @return boolean return true is password is of length >= 8, 
     *                 contains at least one digit and at least one 
     *                 uppercase letter
     */
    public boolean isValidPW (String password)
    {
        boolean hasUpper = false;
        boolean hasNumber = false;
        if (password.length() >= 8){
            for (int i = 0; i < password.length(); i++){

            }
        }
    }