import java.util.*;

public class MysterySolverI implements MysterySolverInterfaceI
{

  public String mystery1(String input)
  {
  	StringTokenizer strTok = new StringTokenizer(input);
  	Stack<String> s = new Stack<String>();
  	Queue<Integer> q = new LinkedList<Integer>();
  	String str = new String();
  	while(strTok.hasMoreTokens())
  	{
  	    s.push((strTok.nextToken()));
  	}
  	for(int x=0; x<5; x++)
  	{
  	    str+=s.pop()+" ";
  	}
  	return str.substring(0, str.length()-1);
  }
  
  public String mystery2(String input)
  {
  	StringTokenizer strTok = new StringTokenizer(input);
/*  Stack<?????> s = new Stack<??????>();
  	Queue<?????> q = new LinkedList<?????>();
  	plus one other Object
*/  	
  	return "";
  }

  public String mystery3(String input)
  {
  	StringTokenizer strTok = new StringTokenizer(input);
  	Stack<String> s = new Stack<String>();
  	Queue<Integer> q = new LinkedList<Integer>();
  	String str = new String();
  	while(strTok.hasMoreTokens())
  	{
  	    s.push((strTok.nextToken()));
  	}
  	for(int x=0; x<5; x++)
  	{
  	    str+=(int)Math.pow(q.poll(), 2)+" ";
  	}
  	return str.substring(0, str.length()-1);
  }

  public String mystery4(String input)
  {
  	StringTokenizer strTok = new StringTokenizer(input);
  	Stack<String> s = new Stack<String>();
  	Queue<Integer> q = new LinkedList<Integer>();
  	String str = new String();
  	while(strTok.hasMoreTokens())
  	{
  	    s.push((strTok.nextToken()));
  	}
  	strTok = new StringTokenizer(input);
  	while(strTok.hasMoreTokens())
  	{
  	    q.add(Integer.parseInt(strTok.nextToken()));
  	}
  	int x=q.poll()*q.poll()*q.poll()*q.poll()*q.poll();
  	str+=x+" ";
  	x=x/Integer.parseInt(s.pop()));
  	while(!(s.empty()))
  	{
  	    x=x/Integer.parseInt(s.pop()));
  	    str+=x+" ";
  	 }
  	return str.substring(0, str.length()-1);
  }

   public String mystery5(String input)
   {
  	StringTokenizer strTok = new StringTokenizer(input);
/*  Stack<?????> s = new Stack<??????>();
  	Queue<?????> q = new LinkedList<?????>();
  	plus one other Object
*/  	
  	return "";
  }
}