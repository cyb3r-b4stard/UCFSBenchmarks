
/**
 * ##### # ########### ## ##### ######### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Translate {
    private static Character letter = new Character('a');

  /**
    * Is char a consonant?
    */
  public static boolean isConsonant(char c) { 
      String[] Consonant = {"b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", 
                                                "s", "t", "v", "w", "x", "y", "z"};
      for (int i = 0; i < Consonant.length; i++){
          String index = Consonant[i];
        if(index.equals(c)) {
            return true;
        }
    }
            return false;
      }

  /**
    * Is char a vowel?
    */
  public boolean isVowel(char c) {
      String[] Vowel = {"a", "e", "i", "o", "u"};
      for (int i = 0; i < Vowel.length; i++){
          String index = Vowel[i];
        if(Vowel.equals(c)) {
            return true;
        }
    }
            return false;
    }

  /**
    * converts given word to Pig Latin
    */
  public static String toPigLatin(String word) { 
     String pig = word;
     if (word.equals(null)) {
          return null; 
      }
      int len = word.length();
     for (int i = 0; i < len; i++) {
         letter = word.charAt(i); 
        if (isConsonant(letter) = true)  {
            pig = word.substring(i + 1, len) + word.charAt(i);
        }
        if (isVowel(letter) = true) {
            pig = pig + "ay";
            return pig;
        }
    }
    pig = pig + "ay";
    return pig;
}
    /** converts given word to Opish
    */
public String toOpish(String word) {
    String op = word;
    if (word.equals(null)){  
        return null; 
    }
    for (int i = 0; i < len; i++){
        letter = word.charAt(i); 
        if (isConsonant(letter) = true)  {
            pig = op.substring(0, i) + "op" + op.substring(i + 1);
        } 
        }
    return op
    }
} 
