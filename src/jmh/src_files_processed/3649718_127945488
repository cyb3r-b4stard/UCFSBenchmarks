import java.util.HashSet;
/**
 * ######## ##### ####### - ##### # ########### ## ### ##### ####
 * 
 * @###### (#### #### ####)
 * @####### (####### ###### ## #### ####)
 */
public abstract class Carrier extends Actor
{
    private HashSet<Item> bag;
    private double weight;

    public Carrier(Room initialRoom)
    {
        super(initialRoom);
        bag = new HashSet<Item>();
        weight = 100;
    }

    /**
     * This method 'weighs' the players bag and returns the total weight.
     * @return total Weight of all the items in the bag.
     */
    protected abstract double getWeight();

    /**
     * This method returns the description of the Player's current room.
     * @return  Description of player's current room
     */
    protected abstract String look();
   
    /** 
     * "go (direction)" was entered. 
     * If there is an exit facing this direction, exit current room and enter the room in the direction specified.
     * @param direction The direction player should head towards.
     * @return String Name of new room that player has entered.
     */
    protected abstract String goRoom(String direction);

    /** 
     * "add (item)" was entered.
     * Add this item to the player's bag if it does not exceed the total weight limit of the bag.
     * @param item The item to be added to the player's bag.
     */
    protected abstract void addItem(Item item);

    /** 
     * Remove this item to the player's bag.
     * @param item The item to be removed from the player's bag.
     * @return item The item that has been removed from player's bag.
     */
    protected abstract Item removeFromBag(Item item);

    /** 
     * Print out the names and information about all of the items in the player's bag.
     * @return The items and their information
     */
    protected abstract String getItemString();

    /**
     * Check if an item is in bag.
     * @param searchItem The item that you wish to check for.
     * @return item If it is found in room.
     */
    protected abstract Item searchBag(String searchItem);

    /**
     * This method sets a new weight limit for the bag.
     * @param newWeight The value you wish to add to max weight limit for bag.
     */
    protected abstract setWeight(double newWeight);
}