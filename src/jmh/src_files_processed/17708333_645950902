/**
 * #### "###########" ##### ## # ###### ############ ##
 * ####### ### ######### / ###### / ####### #### #######. 
 * 
 * @###### ####### ######
 * @####### ##### ####; # "######" ####### ### # ### ####
 */

/*
 * ####: ### ###### ### #### ## ######## #### ## ########
 *       #### ########. ### ####### ####### ##### ######
 *       #### ###### ###### ######## # ### ## ###########,
 *       ########## ### ##### ######### "@#####" ###
 *       "@######".  ### #### ## ### #########
 *       "#############", "###########" ### "#######"
 *       (#.#. ###, ###### ### ###### ############)
 *       ####### ###### ###### ###########.
 */

public class BankAccountStatic
{
  /*
   * The variables follow. These are also
   * called "fields? or ?private data members?.
   */

   private static int accountNumber = 0;
    
   private static String accountName = "no name";

   private static double balance; 
   
       
   /**
    * @return     The account number 
    */
    public static int getAccountNumber()       
    {
        return accountNumber;
    }
   
    
   /**
    * @param   newAccountNo A new account number 
    * 
    * Note: Later, in the object-oriented version of this
    *       class, this method "setAccountNumber" will
    *       not be included. The reason for that change
    *       will be discussed when the object-oriented
    *       version is introduced.
    */
    public static void setAccountNumber(int newAccountNumber)
    {
       accountNumber = newAccountNumber;
    }
    
    
   /**
    * @return   The name for the account 
    */
    public static returntype getAccountName(parametersIfAny)
    {
       add whatever code is required here in the method body
    }
    
    
   /**
    * @param   newName The new name for the account 
    */
    public static returntype setAccountName(parametersIfAny)
    {
       add whatever code is required here in the method body
    }
 
    
   /**
    * @return     The account balance 
    */
    public static double getBalance(parametersIfAny)
    {
        add whatever code is required here in the method body
    }

    
   /**
    * @param   amount  To be added to the balance
    */
    public static returntype deposit(parametersIfAny)  
    {
        add whatever code is required here in the method body
    }

    
   /**
    * @param   amount  The amount to be withdrawn
    * 
    * @return  new balance or -1.0 if withdrawal refused
    *
    * The withdrawal is refused when the withdrawal would
    * have resulted in a negative balance.
    * 
    * Note: This method "withdraw" has been provided in
    *       its entirety. You do NOT have to make any
    *       changes to it.
    */
    public static double withdraw(double amount)
    {  
       if ( balance >= amount )
       {
          balance = balance - amount;
          return balance;
       }
       else
          return -1.0;
    }
  
} 
