
/* #### ### #### ### ########## # ####
 * ####:
 * ########:
 * ##:
 */

import ecs100.*;
import java.awt.Color;


/** ### ####### ######## ### ####### ### ######### ### ###### ## # ##### #### 
  *  ### ###### ## # ### ## ### ##### ######.  ##### ### ####### ###### ####
  *  ## ######## ### ## ########## ##:
  *  ### ####### ### ####### ###### (### ##### ### ### #### ###### ### ### ###)
  *    ### ####### ### ##### #### ## #### ## #####, ### ## ### ####
  *  ### ####### ### ### ####### ###### ## ### ##### ###### ### ###
  *  ### ####### ##### ###### ### ###.
  *
  *  ### ####### ### ### #######.  #### #### #### # ######## ## ###### ####
  *  ### #### (####### ### ######## ######).
  *  ### ###### ######## ### ###### ### ### ### ####### ## ########:
  *    #######, #######, ### ####### #####.
  *    #### ### ##### #####,
  *    ###### ## #### (## ####)
  *  ### ##### ###### ##### ### ###### ####### ### ### ## # ###### ### #####.
  */
public class StockAnalyser{

    /**
     * analysePrices reads a sequence of prices from the user  and prints out
     *   the maximum, minimum, and average price over the day
     *   the opening and closing prices,
     *   the amount the price rose or fell,
     * The sequence is terminated by any word (non-number) such as "close" or "end".
     * All the prices are in cents (as positive integers) 
     * The method must keep track of the maximum and minimum prices, the count and
     * sum of the prices, and the opening price.
     * It will need variables for each of these quantities, all of which 
     * need to be initialised to an appropriate value.
     * It will need a loop to keep reading the prices until there isn't an integer next.
     * [Core]
     *   - There is guaranteed to be at least one price,
     *   - You only need to print the maximum, minimum, and average price
     *   - Hint, keep track of the sum of the prices using a variable of type double
     * [Completion]
     *   - Print the opening and closing prices as well, along with the rise/fall.
     *   - The method should work even if there were no prices for the day
     * [Challenge] The method should also compute and print out
     *   - the standard deviation of the prices
     *   - the median price (a value such that at least half the values
     *     are less than or equal to it and at least half the values are
     *     greater than or equal to it). You may find some of the static
     *     methods in the Math class and the Arrays class to be helpful.
     */
    public void analysePrices() {
       

        /*# YOUR CODE HERE */
     UI.print("Please enter six numbers and end with 'done':");
   
     double user1=0;
     double maximum = 0;
        while( UI.hasNextDouble()){
        user1 = user1+  UI.nextDouble(); 
        double scan = UI.nextDouble();
        if(scan>maximum){
            maximum=scan;
            
         
            }
            
        UI.next();
        double maximum = user1;
         double average = user1/6;
         
          UI.printf("%4.2f %n",average);
           
            
           

            
    
    
     
} 

    /**
     * Reads a sequence of prices (integers) from the user (using Scanner
     * and the terminal window) and plots a bar graph of them, using narrow 
     * rectangles whose heights are equal to the price.
     * The sequence is terminated by any word (non-number) such as "close" or "end".
     * The method may assume that there are at most 24 numbers.
     * The method will need a loop to keep reading the prices until there isn't a number next.
     *  Each time round the loop, it needs to read the next price and work out where
     *  to draw the rectangle for the bar. 
     * It will need a JFrame and a DrawingCanvas to do the drawing on.
     * [Core]
     *   - assume that all the numbers are between 0 and 380
     * [Completion]
     *   - Any price greater than 380 should be plotted 
     *      as if it were just 380.
     *   - The graph should also have a horizontal green line at the 
     *      height of the opening price and a red line at the height of the closing price.
     * [Challenge:] 
     *   - The graph should also have labels on the axes, roughly every 50 pixels
     *   - Make the method read all the numbers, then scale the graph to fit them,
     *     so that the largest numbers fit on the graph.
     *   - The numbers on the y axis should reflect the scaling.
     *  Hint; you may want to use an array or the ArrayList class to
     *  store the numbers as you read them.
     */
    public void plotPrices() 
    {
        UI.clearText();
        UI.clearGraphics();
        /*# YOUR CODE HERE */
        
        

        UI.nextLine(); 
        UI.println("Done");
    }





}