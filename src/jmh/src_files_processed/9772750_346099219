import java.io.*;  
import java.util.*; 
/**
 * ##### # ########### ## ##### ############## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class InfixToPostfix
{
    private String infixExp;
    
    private PrintWriter pw;
    public InfixToPostfix(PrintWriter pw) {
        this.pw = pw;
    }
    
    /**
     * Constructor for objects of class InfixToPostfix
     
    public InfixToPostfix(String infix)
    {
        infixVal = infix;
        System.out.println("Value is " + infixVal);
        
        pw.println("Value is " + infixVal);
    } */

    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public void prepareInfix(String infix) {
    
        infixExp = infix;
        StringBuffer  expNoSpaces =  new StringBuffer("");
        
        System.out.println("Value is with spaces: " + infixExp);
        pw.println("Value is with spaces: " + infixExp);
        
        String delims = "[ ]+"; 
        String [] term = infixExp.split(delims);
        
        for(int k=0; k < term.length; k++) 
            expNoSpaces.append(term[k]);
            
        System.out.println ("Equation with no spaces: " + expNoSpaces.toString());
        pw.println ("Equation with no spaces: " + expNoSpaces.toString()); 
        
        formatPostfix(expNoSpaces);        
    }
    
    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public void formatPostfix (String theEquation) {
    
    StringBuffer postFix new StringBuffer("");
    
        
        
    }
    
    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public int priority(char op) {
        switch (op) {
            case '^': return 3;
            case '*':
            case '/': return 2;
            case '+':
            case '-': return 1;
            default : return 0;
        }   
    }    
        
}