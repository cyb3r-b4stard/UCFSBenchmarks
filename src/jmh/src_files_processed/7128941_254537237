
/**
 * ########## ### ######## ## ### ######/####/###### ## ### ####.
 * ######### #### ###### ## ##### ### ### ########## ####.
 *
 * @###### ###### ##### & #### ########
 * @####### ##.# - ####.##: ####### 
 * @####### ##.# - ####.##: ######## ### ########## #
 * @####### ##.# - ####.##: ######## ### ########## #
 */
public class Position
{
    private int    row;
    private int    column;
    private Galaxy galaxy;
    private Position centre, topLeft, bottomRight;
    /**
     * Constructor for objects of class Position.
     * Can only construct valid positions. 
     * Invalid arguments result in exceptions.
     * 
     * @param galaxy  the galaxy which this position is referring to
     * @param row     row value for position
     * @param column  column value for position
     * 
     * @throws IllegalArgumentException if row/column is invalid
     *                                  or the galaxy is null
     */
    public Position(Galaxy galaxy, int row, int column)
    { if ( galaxy == null )
        {
            throw new IllegalArgumentException(
                    "Galaxy parameter cannot be null");
        }
        if ( (row < 0) || (row >= galaxy.getNumRows()) )
        {
            throw new IllegalArgumentException(
                    "Invalid row for position (" + row + ")");
        }
        if ( (column < 0) || (column >= galaxy.getNumColumns()) )
        {
            throw new IllegalArgumentException(
                    "Invalid column for position (" + column + ")");
        }
        
        this.galaxy = galaxy;
        this.row    = row;
        this.column = column;
    }

    /**
     * Gets the row number of the position.
     * 
     * @return the row number
     */
    public int getRow()
    {
       return this.row;
    }
    
    /**
     * Gets the column number of the position.
     * 
     * @return the column number
     */
    public int getColumn()
    {
       return this.column;
    }
    
    public Position calculateNewPosition(int r, int c)
    {
        Position position = new Position(galaxy,0,0);
        for(int r1 = r-1; r1 <= r+1; r1++)
        {
            
            for(int c1 = c-1; c1 <= c+1; c1++)
        
        }
    return position;
}
    
    public Position calculateDestination( MoveDirection dir )
    {
   
 
     
      Position currentPos = new Position(galaxy,2,3);
      
       Position newPos = new Position(galaxy,row,column);
      
      if (dir == MoveDirection.X_PLUS && dir == MoveDirection.Y_PLUS &&  dir == MoveDirection.X_MINUS && dir == MoveDirection.Y_MINUS){
       if(galaxy != null)
       return 
       
       currentPos= currentPos.calculateNewPosition(row,column); }
       else 
       return null;
     
     return
       currentPos;
        
       
  
}
}