
/* #### ### ####### - ######
 * ####: ##### ###
 * ########: #######
 * ##: #########
 */

import ecs100.*;
import java.awt.Color;
import java.util.*;

/** ### ####### ######## ####### ####### ### ######### ### ######## ## ### ########### ###### #### ### ###### ## # ###.
 *  ##### ### ####### ###### ##### ### ########### ###### #### # #### ### ## ########## ##: 
 *    ### ####### ########### #####.
 *    ### ### ############ #### ### #### #### ### ###.
 *    ### ####### ### ### ####### ########### ###### ###### ### ###.
 */
public class TemperatureAnalyser{
    /** Constructor: set up user interface */
    public TemperatureAnalyser(){
        UI.initialise();
        UI.addButton("Analyse", this::doAnalyse );
        UI.addButton("Quit", UI::quit );
    }

    /* doAnalyse reads a sequence of temperature levels from the user and prints out
     *    average, maximum, and minimum level and plots all the levels
     *    by calling appropriate methods
     */
    public void doAnalyse(){
        UI.clearPanes();
        ArrayList<Double> listOfNumbers = UI.askNumbers("Enter levels, end with 'done': ");
        if (listOfNumbers.size() != 0) {
            this.printAverage(listOfNumbers);
            this.plotLevels(listOfNumbers);

            UI.printf("Maximum level was:  %f\n", this.maximumOfList(listOfNumbers));
            UI.printf("Minimum level was:  %f\n", this.minimumOfList(listOfNumbers));
        }
        else {
            UI.println("No readings");
        }
    }

    /** Print the average level
     *   - There is guaranteed to be at least one level,
     *   - The method will need a variable to keep track of the sum, which 
     *     needs to be initialised to an appropriate value.
     *  CORE
     */
    public void printAverage(ArrayList<Double> listOfNumbers) {
        UI.println("method printAverage() is not implemented yet");  
        double sum = 0;
        double average = 0;

        for(double num: listOfNumbers){
            sum += num;
        }
        average = sum/ listOfNumbers.size();
        
        UI.println("Average level was: " + average);
    }

    /**
     * Plot a bar graph of the sequence of levels,
     * using narrow rectangles whose heights are equal to the level.
     * [Core]
     *   - Plot the bars.
     * [Completion]
     *   - Draws a horizontal line for the x-axis (or baseline) without any labels.
     *   - Any level greater than 400 should be plotted as if it were just 400, putting an
     *         asterisk ("*") above it to show that it has been cut off.
     * [Challenge:] 
     *   - The graph should also have labels on the axes, roughly every 50 pixels.
     *   - The graph should also draw negative temperature levels correctly.
     *   - Scale the y-axis and the bars so that the largest numbers and the smallest just fit on the graph.
     *     The numbers on the y axis should reflect the scaling.
     *   - Scale the x-axis so that all the bars fit in the window.
     */
    public void plotLevels(ArrayList<Double> listOfNumbers) {
        UI.println("method plotLevels() is not implemented yet");  
        int base = 420;              
        int left = 50;               
        int step = 25;               

        UI.setColor(Color.black);
        UI.setLineWidth(2);
        UI.drawRect(50, 420, 50, 50);
        
        /*# YOUR CODE HERE */
        UI.setColor(Color.black);
        UI.fillRect(50, 420, 10, 10);  
        
        UI.println("Finished plotting");
    }

    /** Find and return the maximum level in the list
     *   - There is guaranteed to be at least one level,
     *   - The method will need a variable to keep track of the maximum, which
     *     needs to be initialised to an appropriate value.
     *  COMPLETION
     */
    public double maximumOfList(ArrayList<Double> listOfNumbers) {
        UI.println("method maximumOfList() is not implemented yet");  
        
        /*getMaxValue(listOfNumbers);
        for (int i = 0; i < listOfNumbers.size(); i++){
            listOfNumbers.maximum();
                UI.println("Call");
                maximumOfList = max;
            
        }*/
        
        for(double num: listOfNumbers){
            sum = num;
            if (sum > num){
                max = sum;
                UI.println("Max Number" + max);
            }
        }
        
        return 0 ;
    }

    /** Find and return the minimum level in the list
     *   - There is guaranteed to be at least one level,
     *   - The method will need a variable to keep track of the minimum, which
     *     needs to be initialised to an appropriate value.
     *  COMPLETION
     */
    public double minimumOfList(ArrayList<Double> listOfNumbers) {
        UI.println("method minimumOfList() is not implemented yet");  
        /*# YOUR CODE HERE */
        return 0 ;
    }
}