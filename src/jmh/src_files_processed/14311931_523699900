/**
 * # ##### #### ########## # ######## (#### # ######### ### ###########)
 * 
 * @###### ###### ######
 * @####### ####-#-#
 */
public class Fraction
{
    private int num;
    private int den;
    

    /**
     * Main method so that we can automatically "run a program" that makes
     * use of fractions instead of interacting with them manually in BlueJ
     * DO NOT CHANGE OR REMOVE THIS!
     */
    public static void main(String[] args)
    {
        Fraction f1 = new Fraction();
        Fraction f2 = new Fraction(5, 8);
        Fraction f3 = new Fraction(3, 4);
        Fraction f4 = new Fraction(1, 0);

        System.out.println("f1=" + f1.getNum() + "/" + f1.getDen() + "=" + f1.getReal());
        System.out.println("f2=" + f2.getNum() + "/" + f2.getDen() + "=" + f2.getReal());
        System.out.println("f3=" + f3.getNum() + "/" + f3.getDen() + "=" + f3.getReal());
        System.out.println("f4=" + f4.getNum() + "/" + f4.getDen() + "=" + f4.getReal());
        System.out.println();
        
        f3.setNum(5);
        f3.setDen(8);
        f1 = f2.add(f3);
        f4.setDen(88);

        System.out.println("f1=" + f1.getNum() + "/" + f1.getDen() + "=" + f1.getReal());
        System.out.println("f2=" + f2.getNum() + "/" + f2.getDen() + "=" + f2.getReal());
        System.out.println("f3=" + f3.getNum() + "/" + f3.getDen() + "=" + f3.getReal());
        System.out.println("f4=" + f4.getNum() + "/" + f4.getDen() + "=" + f4.getReal());
    }

    /**
     * Default constructor for objects of class Fraction
     */
    public Fraction()
    {
        num = 0;
        den = 1;
    }

    /**
     * Parametrized constructor for objects of class Fraction
     */
    public Fraction(int n, int d)
    {
        num = n;
        den = d;
        
        if (den == 0)
        {
            den = 1;
        }
    }

    /**
     * Accessor for a fraction's numerator
     * 
     * @return      the fraction's numerator
     */
    public int getNum()
    {
        return num;
    }

    /**
     * Mutator for a fraction's numerator
     * 
     * @param   n   the value for numerator
     */
    public void setNum(int n)
    {
        num = n;
    }

    /**
     * Accessor for a fraction's denominator
     * 
     * @return      the fraction's denominator
     */
    public int getDen()
    {
        return den;
    }

    /**
     * Mutator for a fraction's denominator
     * 
     * @param   d   the value for denominator
     */
    public void setDen(int d)
    {
        den = d;
    }

    /**
     * Calculates a fraction's decimal value
     */
    public double getReal()
    {
        return (double) num/den;
    }

    /**
     * Adds two fractions and returns a fraction representing the sum
     * 
     * @param   f   the second fraction (to add to "this")
     * @return      a fraction representing the sum of "this" and f
     */
    public Fraction add(Fraction f)
    {
        Fraction sum = new Fraction();          
        int common_denominator;                 
        int num1;                               
        int num2;                               
        
        common_denominator = this.den * f.den;
         
        num1 = this.num * (common_denominator / this.den);
        num2 = f.num * (common_denominator / f.den);
        
        sum.num = num1+num2;
        
        sum.den = common_denominator;
        
        sum.reduce();
        
        return sum;
    }

    /**
     * Returns the fraction as a String (formatted appropriately)
     */
    public String toString()
    {
        return num + "/" + den + "=" + getReal();
    }
    
    /**
     * Reduces the fraction by finding the greatest common divisor
     */
    private void reduce()
    {
        public int GCD(num,den);
        {
            int remainder = num % den;
            if (remainder > 0)
            return GCD(den ,remainder);
            return den;
            )
    }
}