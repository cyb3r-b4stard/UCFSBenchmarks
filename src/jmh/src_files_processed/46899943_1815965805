/**
 *  #### ##### ## ### #### ##### ## ### "##### ## ####" ###########. 
 *  "##### ## ####" ## # #### ######, #### ##### ######### ####.  ##### 
 *  ### #### ###### #### #######. ####'# ###. ## ###### ###### ## ######## 
 *  ## #### ## #### ###########!
 * 
 *  ## #### #### ####, ###### ## ######## ## #### ##### ### #### ### "####"
 *  ######.
 * 
 *  #### #### ##### ####### ### ########### ### ### ######: ## ####### ###
 *  #####, ####### ### ###### ### ###### ### ####.  ## #### ######### ###
 *  ######## ### ######## #### ### ###### #######.
 * 
 * @######  ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */

public class Game 
{
    /**
     *  Fields that contain the game objects.
     */
    private Parser parser;
    private Room currentRoom;
    private Player player;
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        createRooms();
        parser = new Parser();
        player = new Player("Amrith",100);
    }

    /**
     * Create all the rooms and link their exits together.
     */
    private void createRooms()
    {
        Room outside, theater, pub, lab, office;
        Item coin, berry, potion, sword, magicCookie;

        outside = new Room("outside the main entrance of the university");
        theater = new Room("in a lecture theater");
        pub = new Room("in the campus pub");
        lab = new Room("in a computing lab");
        office = new Room("in the computing admin office");

        coin = new Item("shiny coin",40);
        berry = new Item("sweet berry",20);
        potion = new Item("toxic- do not consume",30);
        sword = new Item("pointy",80);
        magicCookie = new Item("magic cookie",100);

        outside.addItem(berry);
        theater.addItem(potion);
        pub.addItem(coin);
        office.addItem(sword);
        lab.addItem(magicCookie);

        outside.setExit("east", theater);
        outside.setExit("south", lab);
        outside.setExit("west", pub);

        theater.setExit("west", outside);

        pub.setExit("east", outside);

        lab.setExit("north", outside);
        lab.setExit("east", office);

        office.setExit("west", lab);

        currentRoom = outside;  
    }

    /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();


        boolean finished = false;
        while (! finished) {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing.  Good bye.");
    }

    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("World of Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println(currentRoom.getLongDescription());
    }

    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help")) {
            printHelp();
        }
        else if (commandWord.equals("go")) {
            goRoom(command);
        }
        else if (commandWord.equals("quit")) {
            wantToQuit = quit(command);
        }
        else if(commandWord.equals("take")){
            player.takeItem(room,command.getSecondWord());
        }
        else if(commandWord.equals("look")){
            System.out.println(currentRoom.getLongDescription());
        }
        else if (commandWord.equals("eat")) {
            if(player.ateCookie())
            {
                System.out.println("Successfully ate cookie");
                player.toString();
            }
            else
            {
                System.out.println("Find then pick up the magic cookie to eat it!");
            }
        }
        else if(commandWord.equals("items"))
        {
            System.out.println(player.toString());
        }
        return wantToQuit;
    }


    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */

    private void printHelp() 
    {
        System.out.println("You are lost. You are alone. You wander");
        System.out.println("around at the university.");
        System.out.println();
        System.out.println("Your command words are:");
        parser.showCommands();
    }

    /** 
     * Try to in to one direction. If there is an exit, enter the new
     * room, otherwise print an error message.
     */
    private void goRoom(Command command) 
    {
        if(!command.hasSecondWord()) {
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        Room nextRoom = currentRoom.getExit(direction);

        if (nextRoom == null) {
            System.out.println("There is no door!");
        }
        else {
            currentRoom = nextRoom;
            System.out.println(currentRoom.getLongDescription());
        }
    }

    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  
        }
    }

    /**
     * Contains the movements of the ogres.
     */
    public void ogreMove()
    {
        if(currentRoom.equals(ogre.getRoom()))
        {
           System.out.println("the dwarf ran away with an item of yours.");
        }
    }

    /**
     * method that contains the poison nettles move method.
     */
    public void poisonNettles()
    {
        int numTurnsAsleep = Random.nextInt(5);
        for(int i = 0; i < numTurnsAsleep; i++)
        {
            ogreMove();
            dwarfMove();
            System.out.println("");
            you know your cool, and you think you know the other dude is cool too. Then you know its time to take the mask off. And tr
        }
    }
}