
/**
 * ##### # ########### ## ##### # ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */



public class è

{
    Calendario calendar = new GregorianCalendar (PDT);
    Date trialTime = new Date ();
    
    calendar.setTime(trialTime);

    /**
     * Constructor for objects of class è
     */
    public è()
    {


 System.out.println ("ERA:" + calendar.get (Calendar.ERA));
 System.out.println ("ANNO:" + calendar.get (Calendar.YEAR));
 System.out.println ("MESE:" + calendar.get (Calendar.MONTH));
 System.out.println ("WEEK_OF_YEAR:" + calendar.get (Calendar.WEEK_OF_YEAR));
 System.out.println ("WEEK_OF_MONTH:" + calendar.get (Calendar.WEEK_OF_MONTH));
 System.out.println ("DATE:" + calendar.get (Calendar.DATE));
 System.out.println ("DAY_OF_MONTH:" + calendar.get (Calendar.DAY_OF_MONTH));
 System.out.println ("DAY_OF_YEAR:" + calendar.get (Calendar.DAY_OF_YEAR));
 System.out.println ("DAY_OF_WEEK:" + calendar.get (Calendar.DAY_OF_WEEK));
 System.out.println ("DAY_OF_WEEK_IN_MONTH:"
                    + Calendar.get (Calendar.DAY_OF_WEEK_IN_MONTH));
 System.out.println ("AM_PM:" + calendar.get (Calendar.AM_PM));
 System.out.println ("HOUR:" + calendar.get (Calendar.HOUR));
 System.out.println ("HOUR_OF_DAY:" + calendar.get (Calendar.HOUR_OF_DAY));
 System.out.println ("MINUTE:" + calendar.get (Calendar.MINUTE));
 System.out.println ("SECONDO:" + calendar.get (Calendar.SECOND));
 System.out.println ("MILLISECOND:" + calendar.get (Calendar.MILLISECOND));
 System.out.println ("ZONE_OFFSET:"
                    + (Calendar.get (Calendar.ZONE_OFFSET) / (60 * 60 * 1000)));
 System.out.println ("DST_OFFSET:"
                    + (Calendar.get (Calendar.DST_OFFSET) / (60 * 60 * 1000)));
ialise instance variables
      
    }

    
    
}