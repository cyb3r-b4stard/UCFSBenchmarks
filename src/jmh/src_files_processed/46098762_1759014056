/**
 * #### ####### ############ # ##### ######### #########.  ######## #### 
 * ### ####### ########## #### ## ##### ######:
 *      # - ########## # ########
 *      # - ######### # ########### #########
 *      # - ######### / ######### ### ########
 * @###### #. #######
 * @####### # ######## ####, ## ####### ####
 */
public class SimpleRecursion
{
    public static void main(String[] args)
    {
        countdown(5);   System.out.println();
        countdown(10);  System.out.println();
        countdown(15);  System.out.println();
        System.out.println();
        
        System.out.println("Sum of 1 - 10:\t" + recSum(10));
        System.out.println("Sum of 1 - 50:\t" + recSum(50));
        System.out.println("Sum of 1 - 100:\t" + recSum(100));
        System.out.println();
        
        System.out.println("Factorial of 4:\t" + recFactorial(4));
        System.out.println("Factorial of 5:\t" + recFactorial(5));
        System.out.println("Factorial of 6:\t" + recFactorial(6));
        System.out.println();
    }
    
    /**
     * Recursive method, countdown, displays integer values from the 
     * initial parameter value of n through 0.
     * @param n - the integer to be displayed
     * @return a recursive call to the method, countdown
     */
    private static void countdown(int n)
    {
        System.out.print(n + " ");
        
        if (n == 0) return;
        
        else countdown(n - 1);
    }
    
    /**
     * Calculate the sum of integers from 1 through n using RECURSIVE calls.
     * @param n - the final integer to sum
     * @return the sum of the integers
     */
    private static int recSum(int n)
    {
       int sum;
       
       if (n == 1) sum = 1;
       else
           sum = n + recSum(n - 1);
       
       return sum;
    }
    
    /**
     * Generate the nth factorial of the number n.
     * @param n -the integer
     * @return the factorial of the integer
     */
    private static int recFactorial(int n)
    {
        if (n == 0) return 1;
        else n * recFactorial(n - 1);
    }

    /**
     * Determine the largest integer that Java can calculate as a factorial.
     * @return  the largest factorial integer
     */
    private static int largestFactorial()
    {
        
        return 0;
    }
    
    /**
     * Calculate the sum of integers from 1 through n using ITERATIVE calls.
     * @param n - the final integer to sum
     * @return the sum of the integers
     */
    private static int iterSum(int n)
    {
        int sum = 0;
        
        for (int x = n; x >= 1; x--)
            sum += x;
        
        return sum;
    }
}