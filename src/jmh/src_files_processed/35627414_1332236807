import edu.duke.*;
import java.io.*;
/**
 * ######## ### # ###### ## ##### #### ####, ##### ##### ##### ### ####### ### ######## ###.
 * 
 * @######## ####### 
 * @###### #, ####
 */
public class SuperFinder { 
    public int findStopIndex(String dna, int index){
        int test = dna.length();
        int stop1 = dna.indexOf("TGA", index);
        if(stop1 == -1 || (stop1-index)%3 != 0){
            stop1 = dna.length();
        }
        int stop2 = dna.indexOf("TAA", index);
        if(stop2 == -1 || (stop2-index)%3 != 0){
            stop2 = dna.length();
        }
        int stop3 = dna.indexOf("TAG", index);
        if(stop3 == -1 || (stop3-index)%3 != 0){
            stop3 = dna.length();
        }
        return Math.min(stop1, Math.min(stop2,stop3));
    }
    public StorageResource storeAll(String dna){
        int start = 0;
        StorageResource store = new StorageResource();
        while(true){
            int loc = dna.indexOf("ATG",start);
            if(loc == -1) {
                break;
            }
            int stop = findStopIndex(dna,loc);
            if(stop != dna.length()){
            String gene = dna.substring(loc,stop+3);
            store.add(gene);
            }
            start = loc + 3;
        }
        return store;
    }
    public float cgRatio(String dna){
        StorageResource counter = new StorageResource();
        int start = 0;
        while(true){
            int locC = dna.indexOf("C",start);
            if(locC == -1) {
                break;
            }
            else{
            String C = dna.substring(locC,locC+1);
            counter.add(C);
            }
            start = locC + 1;
        }
        while(true){
            int locG = dna.indexOf("G",start);
            if(locG == -1) {
                break;
            }
            else{
            String G = dna.substring(locG,locG);
            counter.add(G);
            }
            start = locG + 1;
        }
        float ratio = (float)counter.size()/dna.length();
        System.out.println(ratio);
        return(ratio);
    }
    public void printGenes(StorageResource sr){
        StorageResource length = new StorageResource();
        StorageResource ratio = new StorageResource();
        
        System.out.println("Genes longer than 60 characters:");
        for (String gene : sr.data()){
            if(gene.length()>60){
                System.out.println(gene);
                length.add(gene);
            }
        }
        System.out.println("Number of genes longer than 60 characters: " + length.size());
        
        System.out.println("Genes with C-G ratio higher than 0.35:");
            if((float)cgRatio(gene)>0.35){
                System.out.println(gene);
                ratio.add(gene);
            }
        }   
        System.out.println("Number of genes with a C-G ratio higher than 0.35: " + ratio.size());
    }
    public void testStorageFinder(){
        DirectoryResource dr = new DirectoryResource();
        for (File f : dr.selectedFiles()){
            FileResource fr = new FileResource(f);
            String s = fr.asString();
            StorageResource box = storeAll(s.toUpperCase());
            int number = box.size();
            System.out.println("Number of genes found: " + number);
            printGenes(box);
        }
    }
    
}