
/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
import java.util.*;
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private NumberDisplay seconds;
    private NumberDisplay alarmHours;
    private NumberDisplay alarmMinutes;
    private Boolean alarmOnOff;
    private Calendar calendar;
    private String displayString;   
    static Timer timer;
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        timer = new Timer();
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        seconds = new NumberDisplay(60);
        alarmHours = new NumberDisplay(24);
        alarmMinutes = new NumberDisplay(60);
        alarmOnOff = false;
        calendar = new GregorianCalendar();
        setTime(calendar.get(Calendar.HOUR), calendar.get(Calendar.MINUTE), calendar.get(Calendar.SECOND))
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hour, int minute, int second)
    {
        timer = new Timer();
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        seconds = new NumberDisplay(60);
        alarmHours = new NumberDisplay(24);
        alarmMinutes = new NumberDisplay(60);
        alarmOnOff = false;
        setTime(hour, minute, second);
    }
    
    public String timeIncrement()
    {
        seconds.increment();
        if (seconds.getValue() == 0)
        {
            minutes.increment();
            if(minutes.getValue() == 0) 
            {  
                hours.increment();
            }
        }
        return (displayString);
    }
    
    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        timeIncrement();
        updateDisplay();
        
        if ( alarmHours.getValue() == hours.getValue() )
        {
            if ( alarmMinutes.getValue() == minutes.getValue() )
            {
                if ( alarmOnOff == true )
                {
                    System.out.println("Alarm at " + alarmHours.getDisplayValue() + ":" + 
                                        alarmMinutes.getDisplayValue() + " Triggered");
                }
            }
        }
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    public void setTime(int hour, int minute, int second)
    {
        hours.setValue(hour);
        minutes.setValue(minute);
        seconds.setValue(second);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue() + ":" + 
                        seconds.getDisplayValue();
    }
    
    public void setAlarm(int alarmHour, int alarmMinute)
    {
        alarmHours.setValue(alarmHour);
        alarmMinutes.setValue(alarmMinute);
        alarmOnOff = true;
        
    }
    
    public String getAlarm()
    {
        if ( alarmOnOff == true)
        return alarmHours.getDisplayValue() + ":" + alarmMinutes.getDisplayValue();
        else
        return "alarm is off";
        
    }
    
    public void start()
    {
        int delay = 1000;
        int period = 1000;
        timer.scheduleAtFixedRate(new TimerTask() 
        {
            public void run() 
            {
                System.out.print('\u000C');
                System.out.println(timeIncrement());
            }
        },  period, delay);  
        else
            System.out.println("Please close the door before start!");
        }
}