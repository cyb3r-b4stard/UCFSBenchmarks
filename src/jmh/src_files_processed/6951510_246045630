
public class HashTable<K, V> {
    public final int HASH_TABLE_SIZE = 101;
    private ChainNode[] table;     
    private int size = 0;          
    private ChainNode currNode;

    public HashTable() {
        table = new ChainNode[HASH_TABLE_SIZE];
    }  

    public boolean tableIsEmpty() {
        return size==0;
    }  

    public int tableLength() {
        return size;
    }  

    public void tableInsert(K key, V value)
    throws HashException 
    {
        searchKey = key;
        i = hashIndex(searchKey);
        ChainNode node = new ChainNode(key, value, );
        node.next = table[i];
        table[i] = node;


    }  

    public boolean tableDelete(K searchKey) {
        int i = hashIndex(searchKey);
        ChainNode node = table[i];
        
        
        while((node != null) && (node.getKey() != searchKey))
        {
           node = node.next;
        }
        
        if(node != null)
        {
            node = null;
            return true;
        }
        else
        {
            return null;
        }
    }  

    public V tableRetrieve(K searchKey) {
        int i = hashIndex(searchKey);
        ChainNode node = table[i];
        
        
        while((node != null) && (node.getKey() != searchKey))
        {
           node = node.next;
        }
        
        if(node != null)
        {
            return (V)node.getValue();
        }
        else
        {
            return null;
        }

    }

    public int hashIndex(K key) {
        int index = 0;
        
        
        
        return index;
    }  

}  
