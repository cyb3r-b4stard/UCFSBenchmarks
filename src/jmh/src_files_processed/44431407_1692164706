import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;


/**
 * #### ## ### ##### ######## ##### #### ####### ### ## ##.
 * 
 * @###### #####, #### 
 */

public class Sem1Final
{
    /**
     *
     *  5 Points
     * 
     * Simply return your name as a String, last name then first name, separated by a comma
     *
     * @return your name as a String
     */
    public static String yourName()
    {
        return String "Clark, Greg"; 
    }
    
    /**
     *  20 Points
     * 
     * Given 3 integer parameters, return the one with the highest value
     * 
     * @param   val1 an integer
     * @param   val2 an integer
     * @param   val3 an integer
     * @return  the maximum of the 3 parameter values
     */    
    public static int maxValue(int val1, int val2, int val3)
    {
        return 0;
    }    
    
    /**
     *  20 Points
     * 
     * Given 2 Strings, if they are the same, return 0.  Otherwise, return the sum of the
     * lengths of the 2 Strings.
     * 
     * @param str1 is a String
     * @param str2 is a String
     * @return 0 if the Strings are the same.  If the strings are different, calculate and
     *         return the sum of the lengths of the two Strings.
     */    
    public static int stringStuff(String str1, String str2)
    {
        return 0;
    }           
    
    /**
     *  20 Points
     * 
     * Your method will be passed a String parameter that might have a asterisk character "*" in
     * it.   If there is an asterisk in the String, replace it with a dash character "-" and 
     * return the new String.  
     * If there is no asterisk found, return the string "nope"
     * 
     * EXAMPLES:
     * When aster is "hello*world" return "hello-world"
     * When aster is "hello" return "nope"
     * 
     * Precondition: the aster String is not null and may or may not have an asterisk character
     *               in it.
     *               
     * 
     * @param aster is a String that may contain an asterisk 
     * @return a String that is the same as aster with the "*" replaced with a dash "-"
     */    
    public static String replaceAster(String aster)
    {
        return null;
    }        
    
    /**
     *  10 Points
     * 
     * Given an array of integers, return true of all of the values in the array are the same
     * 
     * Precondition: values contains at least two items
     * Postcondition: do not modify the values array
     * 
     * @param values an array of integers
     * @return true if all of the values in the array are the same, otherwise return false
     */    
    public static boolean allTheSame(int[] values)
    {
        return false;
    }        
    
    
    /**
     *  5 Points
     * 
     * When we talk about numbers in terms of their order in a list we append a suffix to the
     * number.   For example, if someone wins a race we say that they are 1st.  If they come in 
     * second place we say that they are 2nd.  Third place, is 3rd.  Etc.
     * Using the following rules, you will convert the given number to a String and append the 
     * appropriate suffix.
     * RULES:
     * Number ends with 1:  Append "st"
     * Number ends with 2:  Append "nd"
     * Number ends with 3:  Append "rd"
     * Number ends with 4 through 9:  Append "th"
     * Number ends with 0 : Append "th"
     * 
     * EXAMPLE:
     * For the value 42 return the String "42nd"
     * For the value 41 return the String "41st"
     * For the value 54 return the String "54th"
     * For the value 103 return the String "103rd"
     * 
     * @param   value a positive integer
     * @return  a String containing the number and the appropriate suffix appended according to the
     *          rules above
     */    
    public static String addSuffix(int value)
    {
        return null;
    }        
    

    /**
     *  5 Points
     * 
     * Given a 2 dimensional array of integers, return a 1 dimensional array
     * representing the largest value in each row.
     * 
     * Precondition: arr2D is a rectangular 2D array.
     *               Each row has at least one element.
     * 
     * @param arr2D a 2 dimensional array of integers
     * @return an array representing the largest value in each row
     */    
    public static int[] largestByRow(int[][] arr2D)
    {
        return null;
    }   
    
    /**
     *  5 Points
     * 
     * Given a List of integers, replace each element with its absolute value
     * 
     * Precondition: list contains at least one value
     * 
     * @param list is a list of integers
     * @return the list with each element replaced with its absolute value
     */    
    public static List<Integer> absList(List<Integer> list)
    {
        return null;
    }       
        
    
    /**
     *  5 Points
     * 
     * Given a double value, return a List of Doubles that starts with that value.  
     * Each subsequent value in the List should be 0.5 less than the prior value in the List.  
     * The last value in the List should be greater than or equal to 0.0 so do not include
     * negative numbers in your List
     * 
     * EXAMPLES:
     * For the value 2.5 the returned List should be { 2.5, 2.0, 1.5, 1.0, 0.5, 0.0 }
     * For the value 1.3 the returned List should be { 1.3, 0.8, 0.3 } 
     * 
     * Precondition: value is a positive number.
     * 
     * @param value is a positive double
     * @return a List of positive doubles starting with value and counting down by 0.5
     */    

    public static List<Double> countDown(double value)
    {
        return null;
    }   
    
          
    
    /**
     * 5 Points
     * 
     * 
     * Given a string containing a simple integer based math expression, calculate the
     * result of the expression and return the resulting value.
     * For this problem we will only use the following operators: + or *
     * 
     * Examples :
     * mathFromString("5*10") should return 50
     * mathFromString("5+10") should return 15
     *  
     * NOTE: You will have to convert the String into numerical values.
     *       Remember to use the following method, which is not on the AP Java reference:
     *       int Integer.parseInt(String) 
     * 
     * Precondition: the expression contains 2 operands and one math operator between them
     *               the math operator will be one of : + *
     *               there are no spaces or any other extra characters in the String
     *               both operands are integers
     * 
     * @param   expression is a String containing 2 operands and one math operator between them.
     * @return  the result of calculating the mathematical expression
     */    
    public static int mathFromString(String math)
    {
        return 0;
    }
    
}