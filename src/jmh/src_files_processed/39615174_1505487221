import java.awt.Color;
import kareltherobot.*;
import java.util.Random;  
/**
 * ##### ############ 
 * 
 * @###### ####### ########## ######## ####### #######
 * @####### ####### #### 
 */
public class ReflectorRobot extends Robot
{
    int width;
    int counterCol;
    boolean nextToABeeper;

    /**
     * Add whatever instance variables you think should be here
     * Having an integer array would sure be a good idea!
     */

    public ReflectorRobot(int Street, int Avenue, Direction direction, int numberOfBeepers, java.awt.Color badgeColor)
    {   
        super(Street, Avenue, direction, numberOfBeepers, badgeColor);
    }

    public ReflectorRobot(int Street, int Avenue)
    {   
        super(Street, Avenue, Directions.North, 0, Color.green);
    }

    /** 
     * reflectAll method
     * 
     * Paramaters:    none
     * Returns:       nothing
     * Precondition:  the robot is at (1,1) facing East. 
     *                the world is surrounded by walls. 
     *                there are several single beepers "randomly" placed in the world
     * Postcodition:  the robot is at (1,1) facing East.  
     *                All beepers have been reflected vertically
     *                For example, if the grid within the walls, stretchs from 1 to 9 avenue.  
     *                      Than a beeper that was at (1,1) will be reflected to (1,9)
     *                      Than a beeper that was at (1,3) will be reflected to (1,7)
     *                      Than a beeper that was at (2,4) will be reflected to (2,6)
     */
    public void reflectAll()
    {

        counterCol();
        moveUntilWall();
        

        turnAround();

        moveAndPick();
        counterCol();

        turnAround();
        moveAndPlace();
        
         moveUntilWall();
        counterCol();

        turnAround();

        moveAndPick();
        counterCol();

        turnAround();
        moveAndPlace();
        
        

        
    }

    public void turnAround()
    {
        turnLeft();
        turnLeft();
    }

    public void turnRight()
    {
        turnLeft();
        turnLeft();
        turnLeft();
    }

    public void moveUntilWall()
    {
        while(frontIsClear())
        {
            move();
        }

    }

    public int counterCol()
    {

        int[]colsForBeeper = new int[width];

        return width;
        
        move():

    }
    public void pickBeeper()
    {
        if(nextToABeeper)
        {
            pickBeeper();
        }
    }

    
    public void putBeeper()
    {
        counterCol = 1;
        putBeeper();
        
    }

    public void moveAndPick()
    {
        counterCol = 1;
        move();
        pickBeeper();

    }

    public void moveAndPlace()
    {
        counterCol = 1;
        moveUntilWall();
        putBeeper();

    }
}
