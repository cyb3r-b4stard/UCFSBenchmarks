/**
 * ####### ###### ############## ##### ### ###### ######### ######## 
 * #### ######### ## #####. ##### ########, ######## ## ###### ######
 * ## #### ## ## ###### ## ### ###.
 * 
 * @####### ()
 */
import java.util
public class RijBewerkingen
{
    

    /**
     * deze methode creert een rij met willekeurige getallen. De getallen
     * zijn gelegen tussen ondergrens en bovengrens.
     * @param grootte de grootte van de te creÃ«ren rij
     * @param ondergrens de kleinst mogelijke getal dat in de rij mag voorkomen.
     * @param bovengrens het grootst mogelijke getal dat inde rij mag voorkomen.
     * @return de rij opgevuld met random waarden
     */
    public static int[] vulRij (int grootte, int ondergrens, int bovengrens){
        return new int[1];
        int waarde = (int) ondergrens + (Math.random()*bovengrens);
    }

    /**
     * deze methode schrijft de rij getallen uit.
     * @param deRij de rij uit te schrijven getallen
     */
    public static String toString (int[] deRij){
        return "";
    }

    public static int[] bubbleSortGrootNaarKlein (int[] deRij){
        return new int[1];
    }

    public static int[] bubbleSortKleinNaarGroot (int[] deRij){
        return new int[1];
    }

    /**
     * deze methode zoekt het kleinste element uit een rij getallen, vanaf een start
     * positie tot aan een eindpositie.
     * @param deRij rij getallen waarin moet gezocht worden.
     * @param van de startpositie vanaf waar moet gezocht worden.
     * @param tot de eindpositie tot waar moet gezocht worden.
     * @return keert terug met de positie in de rij van het kleinste element.
     */
    private static int zoekPositieKleinste (int[] deRij, int van , int tot){
        return 0;
    }

    /**
     * deze methode sorteert getallen van klein naar groot via het selection sort algoritme.
     * Loop langs alle elementen om de kleinste te vinden. Zet het kleinste element op de eerste positie,
     * dat wil zeggen verwissel het kleinste element en het element op dat op de eerste plaatst staat van plaats.
     * 
     */
    public static int[] selectionSort (int[] deRij){
        return new int[1];
    }

    /**
     * deze methode zoekt een getal volgens het algoritme binair zoeken.
     * Eerst wordt gekeken naar het middenste element, als dat is wat je zoekt ben je klaar.
     * Als het middelste element kleiner is dan wat je zoekt ga dan verder in de rechter helft van de array met zoeken.
     * Als het middelste element groter is dan wat je zoekt ga dan verder in de linker helft van de array
     * @param gezochteGetal
     * @return keert terug met de positie van het gezochteGetal of -1 indien niet gevonden.
     * @PRE de waarden zijn reeds gesorteerd, anders onbeslist resultaat.
     */

    public static int binairZoeken (int[] deRij, int gezochteGetal){
        return 0;
    }
}