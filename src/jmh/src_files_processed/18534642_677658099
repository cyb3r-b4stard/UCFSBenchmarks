import java.util.Arrays;
/**
 * ### ##### ####### ## ## ######### ### ####### ####### ##
 * ######## ######.
 * ##### ## ##### ## ######## #### ## ########## ### # ###### ######,
 * #### #### ## ## #### # #### ## ##### ####### ###### ### ##### ####
 * #### ## ## #### ###### ######. ### #######, ##### ### #######
 * (#, #, #, #, -#) ### ### ###### ### #, ### ####### (#, #) #### ##
 * ## #. ## ### ##### ####, ## ### ###### ### #### #, ### ###### ##
 * ##### ##### ##### ## ## ####### #### #### ## ## #.
 *
 * #### ## ### ####### #######:
 * ######### #########:
 * ######## ### #### ####### ## ### #####
 *  ### ###### # ### #### #### #######
 *  ### ###### # ### ####### #### #######
 *  ## ####### ## ########, ###### #####

 @###### ###### #######
 @####### ##### ####
 */

public class Project4 {

   public boolean subListExists(int [] num, int target) {
       return subListExists(num, target, num.length-1);
   }
   
   private boolean subListExists(int [] num, int target, int n) {
        if (target == 0)
            return true;
        if (n == 0 && target != 0)
            return false;
        if (num[n] > target)
            return subListExists(num, target, n-1);
        return subListExists(num, target, n-1) || subListExists(num, target-num[n], n-1);
   }

   /**
    * You're standing at the base of a staircase and are heading
    * to the top. A small stride will move up one stair, a large
    * stride advances two. You want to count the number
    * of ways to climb the entire staircase based on different
    * combinations of large and small strides. For example, a
    * staircase of three steps can be climbed in three different
    * ways: via three small strides or one small stride followed
    * by one large stride or one large followed by one small.
    * A staircase of four steps can be climbed in five
    * different ways.  This recursive method takes number
    * of stairs to be climbed as a parameter and returns
    * the total number of ways we can climb those stairs
    * using either one or two strides at each step.
    *
    * @param numStairs number of stairs to be climbed
    *
    * @return the count of the ways that numStairs can be climbed
    */
   public int numWaysToClimb(int numStairs) {
       if (numStairs <= 1)return 1;
       return numWaysToClimb(numStairs-1) + numWaysToClimb(numStairs-2);
   }

   /**
    * You have been given a puzzle consisting of a row of squares
    * each containing an integer. The circle on the initial square
    * is a marker that can move to other squares along the row.
    * At each step in the puzzle, you may
    * move the marker the number of squares indicated by the
    * integer in the square it currently occupies.
    * The marker may move either left or right along the row
    * but may not move past either end. For example, if the
    * left most square has value 3 and it is the position of
    * the initial marker position, the only legal first
    * move is to move the marker three squares to the right
    * because there is no room to move three spaces to the left.
    *
    * @param num the array of integers representing the values
    * in the squares.
    * @param index the starting position of the marker square
    *
    * @return true if the marker can be successfully moved to
    * the right most square; false otherwise
    */
   
   public boolean traverse(int index, int[] num){
        /*int prev = index;
        if (num[index]==0)
            return true;
        if ((num[index]<=(num.length-1) - index)){
            prev = index;
            index += num[index];
            return traverse(index, num);
        }
        if ((num[index]>(num.length-1) - index)) {
            if (prev == num[index])
                return false;
            else {
                prev = index;
                index -= num[index];
                return traverse(index, num);
            }
        }
        return false;
   }*/
        if (num[index==0]{
            return true;
        }
        else {
            return traverse(index+1, num) || traverse(index-1, num)
        }
}