
/* #### ### #### ###, ########## #
 * ####:
 * ########:
 * ##:
 */

import java.util.*;

/**
 *  ######## - # ### ##########;
 *
 *  ### ############## #### ## ##### ## ##### ### #####
 *  ### # ##### ######## ## ##### ### ###### ## ##### ## ### #####.
 * 
 *  ### ##### ## ### ### ###### ## ###### ## #########
 *    #, #,... (#####-#) ## ### #####.
 * 
 *  ### ###### ## ### ##### #### ### ### ## ##### ####### ###### ## ##. 
 * 
 *  ### ##### #### ### ## ## ### ########## #####, ### ### ###### ###
 *    ##### #### ## #### ## #######. ##### ## ## #### ## ##### ### ### ##### 
 *    ## ## #### ## #### #### ## # ######## #####.
 * 
 *  #### #### # ### #### ### ##### #### ##### ## ##########.
 *  ########## ## ### #### ###### ##### ## ######################## #########
 *  ###### ## #### ##### ## ####### ####### ###### ###### ###### #####, #######
 *    ######## ### ###.
 *  ## ###### ###### ####### ##### ##### ######()  (### ##### ==)
 *  #### ### ##### ## ####, ## #### ###### # ### ##### ## ###### ### #######
 *    ####, ### #### ### ### ##### #### ## ### ### #####
 */

public class ArraySet <E> extends AbstractSet <E> {

    /*# YOUR CODE HERE */


    @SuppressWarnings("unchecked")  
    public ArraySet() {
        /*# YOUR CODE HERE */
       E[] array=new E[](); 

    }

    /** 
     * @return the number of items in the set  
     */
    public int size () {
        /*# YOUR CODE HERE */

    }

    /** 
     *  Adds the specified item to this set 
     *  (if it is not already in the set).
     *  Will not add a null value (throws an IllegalArgumentException in this case).
     *  
     *  @param item the item to be added to the set
     *  @return true if the collection changes, and false if it did not change.
     */
    public boolean add(E item) {
        /*# YOUR CODE HERE */

    }

    /** 
     * @return true if this set contains the specified item. 
     * 
     */
    public boolean contains(Object item) {
        /*# YOUR CODE HERE */

    }

    /** 
     *  Removes an item matching a given item.
     *  @return true if the item was present and then removed.
     *  Makes no changes to the set and returns false if the item is not present.
     */
    public boolean remove (Object item) {
        /*# YOUR CODE HERE */

    }

    /** 
    * 
    * Ensures data array has sufficient capacity (length)
    * to accomodate a new item 
    */
    @SuppressWarnings("unchecked")  
    private void ensureCapacity () {
        /*# YOUR CODE HERE */

    }


    /** 
     *  Finds the index of an item in the dataarray.
     *  Assumes that the item is not null.
     *  
     *  @return the index of the item, or -1 if not present
     */
    private int findIndexOf(Object item) {
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/

    /** 
     * @return an iterator over the items in this set. 
     * 
     */
    public Iterator <E> iterator() {
        return new ArraySetIterator<E>(this);
    }

    private class ArraySetIterator <E> implements Iterator <E> {


        private ArraySet<E> set;
        private int nextIndex = 0;
        private boolean canRemove = false;

        private ArraySetIterator(ArraySet<E> s) {
            set = s;
        }

        /**
         * @return true if iterator has at least one more item
         */
        public boolean hasNext() {
            return (nextIndex < set.count);
        }

        /** 
         * Returns the next element or throws a 
         * NoSuchElementException exception if none exists. 
         * 
         * @return next item in the set
         */
        public E next() {
            if (nextIndex >= set.count)
                throw new NoSuchElementException();

            canRemove = true;

            return set.data[nextIndex++];
        }

        /** 
         *  Removes the last item returned by the iterator from the set.
         *  Can only be called once per call to next.
         */
        public void remove() {
            if (! canRemove)
                throw new IllegalStateException();

            nextIndex--;
            set.count--;
            set.data[nextIndex] = set.data[set.count];
            set.data[set.count] = null;
            canRemove = false;
        }
    }
}
