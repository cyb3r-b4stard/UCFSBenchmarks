import java.util.Scanner;

/**
 * ### ##### ########### #### ##### ####### ## ###### ## ####### ### ####### ######### #####..
 * 
 * ##. ###### ########## 
 * #.#. ######## ####### - #### # - ####### ##########
 */
public class FactorClass
{
    private static Scanner scan = new Scanner(System.in);
    private int firstValue;
    private int lastValue;

    /**
     * Constructor for objects of class FactorClass
     */
    public FactorClass()
    {
        firstValue = 0;
        lastValue  = 0;
    }

    /**
     * Method to input a valid range of positive integers - used in printFactors and printPrimes
     * 
     * @param       none
     * @return      none
     * @mutator     changes private attributes firstValue and lastValue to input values
     */
    public void inputRange()
    {
        do
        {
            System.out.print("Input the first value in the range (>= 1): ");
            firstValue = scan.nextInt();
        }
        while (firstValue<1);
        do
        {
            System.out.print("Input the last value in the range (>= first value): ");
            lastValue = scan.nextInt();
        }
        while (lastValue < firstValue);
    }

    /**
     * Method to input a valid positive integer - used in printPrimeFactors and printGCF_LCM
     * 
     * @param       none
     * @return      an inputted positive integer
     */
    private int inputNumber()
    {
        int num;
        do
        {
            System.out.print("Input a number (0 to stop): ");
            num = scan.nextInt();
        }
        while (num < 0);
        return num;
    }

    /**
     * Part A - replace this comment with your own
     * 
     * @param   none
     * @return  none 
     */
    public void printFactors()
    {
        int numlines =0; int primes = 0; int comp =0; int numfact = 0;
        for (int num = firstValue; num<=lastValue; num++)
        {
            System.out.print(num+";\t1");
            if (num!=1)
            {int factor =2;
                while (num%factor!= 0 && factor <=  num)
                    factor++;
                if(factor == num)
                    primes++;
                else
                    comp++;
                for (int fact = factor; fact<=(num/factor); fact++)
                {
                    {if (num%fact==0)
                        {System.out.print(num+"\t" + fact);
                            numfact++;
                            if (numfact%10==0)
                                System.out.println();
                        }
                    }
                }
                System.out.print("\t" + num);
                System.out.println();
                numlines++;
                if (numlines>= 30)
                {System.out.print("press any key");
                    scan.nextLine();
                    numlines=0;

                }
            }
        }
        System.out.print ("Number of primes:" + primes + "\t" + "Number of compsoites:" + comp);
    }

    /**
     * Part B - replace this comment with your own
     * 
     * @param   none
     * @return  none 
     */
    public void printPrimes()

    {
        boolean isPrime; int fact = 0; int numlines=0;
        for (int num = firstValue; num<=lastValue; num++)
        {
            isPrime=true;
            for (fact =2; fact<=Math.sqrt(num);fact++)
            {    if (num%fact =0)
                {
                    isPrime=false;
                }
                if (isPrime)
                {   
                    numlines++;
                    if (numlines=10)
                    {
                        system.out.println();
                    }
                    system.out.print(num);
                }
            }
        }
    }

    /**
     * Part C - replace this comment with your own
     * 
     * @param   none
     * @return  none 
     */
    public void printPrimeFactors()
    {

    }

    /**
     * Part D - replace this comment with your own
     * 
     * @param   none
     * @return  none 
     */
    public void printGCF_LCM()
    {

    }
}