/**
 * #### ##### ######### ## ######### ###### #### ## ########.
 * 
 * ## #### ####### #:
 * #. ### #### ## ### #### ## ##### ##### ### ###### ## #######.
 * #. ### #### ####### ##### ## ## ##### ### ####### ## ### ####.
 * 
 * #### ##### ########## ### ### ## #####.
 * 
 * @###### ####### ###### 
 * @####### ######### ####
 * 
 */
public class ListOfNVersion01PartB
{   
    private int[] list;  

    /**
     * This constructor initializes the list to the same values
     * as in the parameter.
     *
     * @param  element   the initial elements for the list
     */
    public ListOfNVersion01PartB(int [] element)
    {




        

        list = new int[element.length];

        for ( int i=0 ; i<element.length ; ++i ) 
        {
         list[i] = element[i];
        }

        

    } 

    /**
     * @return     the first element in the list 
     */
    public int getFirst()
    {
        return list[0];

    } 

    /**
     * In ListOfN in this test, the toString method
     * should return a String such that:
     * 
     * 1. The String begins with an open brace "{" followed
     *    IMMEDIATELY (i.e. no space) by the first element
     *    of the list.
     * 2. All remaining elements of the list are preceded by
     *    ", " (i.e. a comma folowed by a SINGLE space).
     * 3. The String ends with a closing brace "}".
     *
     * e.g. "{1, 2, 3, 4}"
     * 
     * @return     A summary of the contents of the list.
     */
    public String toString()
    {
        String s = "{" + list[0]; 



            
        for ( int i=1 ; i<list.length ; ++i ) 
        {
           s= s + ", " +list[i];
        }

        s = s + "}";
        

        return s;

    } 

    /**
     * @return     the sum of the elements of the array
     */
    public int sum()
    {
        int sum = 0; 



             
        for ( int i=0 ; i<list.length ;++i ) 
        {
           sum = sum+list[i];
        }
        

        return sum;

    } 

    /**
     * @return     the number of times the replacement was made (i.e. 0 or 1)
     * 
     * @param  replaceThis   the element to be replaced
     * @param  withThis      the replacement
     */
    public int replaceOnce(int replaceThis, int withThis)
    {        


              
        for ( int i=0 ; i<list.length ; ++i ) 
        {
           if(list[i] == replaceThis)
           {
            list[i] = withThis;
            return 1;
        }
        

        return 0;

    } 

    /**
     * @return     the value of the smallest element in the array
     */
    public int minVal()
    {
        int mostWantedHolder = list[0];  



            
        for ( int i=0 ; i<list.length ; ++i ) 
        {
            if ( list[i] < mostWantedHolder )
         {
            mostWantedHolder = list[i];
        }}
        
   }    
        return mostWantedHolder;

       /* Exercise for students: implement the analogous method "maxVal", both
         * with constant subscripts for ListOf4, as shown above, and with a variable
         * subscript, as required in the previous exercise above.  The method
         * "maxVal" is examinable.
         */

    } 

    /**
     * Inserts an element in the first position. The elements already in the
     * list are pushed up one place, and the element that was previously
     * last is lost from the list.
     * 
     * @param  newElement   the element to be inserted
     */
    public void insertFirst(int newElement)
    {   


        /* delete this comment line      
        for ( int i=xxx ; xxxxxxxxxx ; xxx ) 
        {
           xxxxxxxxxxx
        }
        list[0] = newElement;

        delete this comment line */ 

    } 
    
    /*
     *  This method is NOT examinable in this test.
     *  
     *  Swaps two elements in the list.
     *  
     * @param  i   the position of one of the elements to be swapped
     * @param  j   the position of one of the elements to be swapped
     */
    private void swap(int i, int j)
    {
        int temp; 

        temp = list[i];
        list[i] = list[j];
        list[j] = temp;

    } 

    /**
     * "So the first shall be last, and the last first"
     *  -- The Christian Bible, book of Matthew 20:16
     */
    public void reverse()
    {


        /* delete this comment line   
        int i = xxxxx; 
        int j = xxxxx; 

        while ( xxxxxxx )
        {
        xxxxxxxxxxxxxx
        }
        delete this comment line */

    } 

    /* 
     * ... several methods NOT examinable in this test
     *     have been deleted.
     */

} 
