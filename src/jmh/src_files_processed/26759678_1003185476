import java.util.Random;
/**
 * ##### # ########### ## ##### ###### ####.
 * 
 * @###### #### ######## ######
 * @####### ##/##/####
 */
public class Matriz
{
    public final static int MAX = 20;

    private int[][] matriz;

    /**
     * Constructor con un parámetro entero 
     */
    public Matriz(int filas)
    {
        Random r = new Random();
        if(filas<=0 || filas>20)
            throw new RuntimeException("El numero de filas y de columnas debe ser mayor que 0 y menor o igual que 20");

        matriz = new int[filas][filas];
        for(int i=0;i<matriz.length;i++)
        {
            for(int j=0;j<matriz[0].length;j++)
            {
                matriz[i][j] =  r.nextInt(50+1)+1;               
            }
        }
    }

    /**
     * Constructor con un parámetro array 
     */
    public Matriz()
    {        
        matriz = new int[5][5];
        int c =1;
        for(int i=0;i<matriz.length;i++)
        {
            for(int j=0;j<matriz[0].length;j++)
            {            
                matriz[i][j] =  c;  
                c++;
            }
        }
    }

    public void print()
    {
        for(int i=0;i<matriz.length;i++)
        {
            String fila=" ";
            for(int j=0;j<matriz[0].length;j++)
            {                
                fila=fila+" "+matriz[i][j];
            }
            System.out.println(fila);
            System.out.println();
        }
    }

    /**
     * Método que cambia las
     */
    public void intercambioDeDiagonales()
    {        
        for (int i=0;i<matriz.length;i++)
        {
            int matrizNueva = matriz;
            matriz[i][i]=matriz[i][matriz.length-1-i]
        }
    }
    
    /**
     * Método que devuelva la matriz.
     */
    public int [][] mostrarPorConsola()
    {
        int [][] matrizNueva = matriz;
        for(int i=0;i<matriz.length;i++)
        {
            for(int j=0;j<matriz[0].length;j++)
            {
                matrizNueva[i][j]=matriz[i][j];
            }
        }   
        return matriz;
    }
}