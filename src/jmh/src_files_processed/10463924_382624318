import java.awt.event.KeyEvent;
import javax.swing.JFrame;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import java.util.Random;
import javax.swing.ImageIcon;
import java.awt.event.ActionListener;
import java.awt.event.KeyListener;
import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Container;
import javax.swing.Timer;
public class NorthKorea implements KeyListener
{
    final int ROWS=11;
    final int COLS=11;
    final int UP=87;
    final int LEFT=65;
    final int DOWN=83;
    final int RIGHT=68;
    GridLayout grid;
    
    int currentRow=5;
    int currentCol=5;
    int currentEnemyCol=0;
    int currentEnemyRow=0;
    int rNum=0;
    int cNum=0;
    
    int PlayerHealth=0;
    ImageIcon Player = new ImageIcon("red.jpg");
    ImageIcon Enemy = new ImageIcon("enemy.jpg");
    ImageIcon Background = new ImageIcon("green.jpg");
    ImageIcon Border= new ImageIcon("WireBorder.jpg");
    JFrame frame = new JFrame();
    JButton[][] arrButton = new JButton[ROWS][COLS];
    JPanel panel = new JPanel();
  void openingcredits()
  {
      JOptionPane.showMessageDialog(null,"North Korea Simulator 2015TM - Created by Rob Boland");
      JOptionPane.showMessageDialog(null,"Rules: Collect missle parts, Use WASD to move, dont get exploded");
  }
  void startgame()
  {
    grid = new GridLayout(ROWS,COLS);
    frame.setLayout(grid);
    
     for (int r=0; r < arrButton.length; r++)
      {
          for(int c=0; c < arrButton[r].length; c++)
          {
            arrButton[r][c] = new JButton(Player);
            
            arrButton[r][c].addKeyListener(this);
            arrButton[r][c].setBorderPainted(true);
            frame.add(arrButton[r][c]);
            if (c==0)
            {
                arrButton[r][c].setIcon(Border);
            }
            if (r==0)
            {
                arrButton[r][c].setIcon(Border);
            }
            if ( c == COLS-1)
            {
                    arrButton[r][c].setIcon(Border);
            }
            if (r == ROWS-1)
            {
                arrButton[r][c].setIcon(Border);
            }
       
            
          }           
     }
    for (r=0;)
     {
         rNum = (int)(Math.random()*ROWS);
        cNum = (int)(Math.random()*COLS);
        arrButton[rNum][cNum].setIcon(Enemy);
    }
     }
     
 
      final int FRAME_WIDTH = 720;
      final int FRAME_HEIGHT = 480;
      frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
      frame.setTitle("North Korea Simulator 2015");
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
      frame.setVisible(true);
  }


 

  /* player is kim jung un
   * has to get nuke parts (random locations)
   * timer that shoots missle at random location in the bordered area
   * 
   */ 
  public void keyTyped(KeyEvent e)
  {
  }
  public void keyPressed(KeyEvent e)
  {
       int keyCode = e.getKeyCode();
      
       /*    final int UP=87;
        *  final int LEFT=65;
        *  final int DOWN=83;
        *  final int RIGHT=68;
        */       
       
       if(keyCode == UP && currentRow>1)
       {
           arrButton[currentRow-1][currentCol].setIcon(Background);
           arrButton[currentRow][currentCol].setIcon(Player);
           currentRow--;
       }
       if(keyCode == DOWN && currentRow <ROWS-2)
       {
         arrButton[currentRow+1][currentCol].setIcon(Background);
         arrButton[currentRow][currentCol].setIcon(Player);
         currentRow++;  
       }
       if(keyCode == LEFT && currentCol>1)
       {
           arrButton[currentRow][currentCol-1].setIcon(Background);
           arrButton[currentRow][currentCol].setIcon(Player);
           currentCol--;  
       }
       if(keyCode == RIGHT && currentCol <COLS-2)
       {
           arrButton[currentRow][currentCol+1].setIcon(Background);
           arrButton[currentRow][currentCol].setIcon(Player);
           currentCol++;  
       }      
  }
  public void keyReleased(KeyEvent e)
  {
  }
  void moveLeft()
    {
        currentCol--;          
    }
  void moveRight()
  {
        currentCol++;
  }
  void moveDown()
  {
        currentRow--;
  }
  void moveUp()
  {
      currentRow++;
  }
}