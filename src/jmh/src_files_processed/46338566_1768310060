
/**
 * ## ### ######### ### ## # ####, ### #### #### ### ## ### ##.
 * 
 * #### ######## ### # ####### ###### ######### ## #### #### ## ########. 
 * 
 * ### ######### #### ## ##### #### #### ##### #### #### ## #### ##### ###.
 * ##'## ##### ### # ######## ### ######## ### ### ## #### #### ####.
 * 
 * 
 */
public class Test2
{
    /**
     * Simple function that takes an expected and actual values
     * and checks whether a function returned the right value.
     * 
     * You use the function like this:
     * 
     * test(5, doStuff(1,2,3));
     * 
     * In this case, 5 is the expected result of calling the doStuff()
     * function with inputs 1, 2, 3.
     * 
     * Each problem has at least one test case.
     * 
     */
    public static void test(int expected, int actual) {
        System.out.print("expected="+expected+", actual="+actual);
        if (expected==actual) {
            System.out.println(" correct");
        } else {
            System.out.println(" WRONG");
        }
    }
    
    /**
     * Same as the test() function for ints, expect with booleans.
     * 
     * Java lets you multiple versions of the test() function
     * so long as they have different parameters (which in this
     * case they do, as one uses ints and the other booleans).
     * 
     */
    public static void test(boolean expected, boolean actual) {
        System.out.print("expected="+expected+", actual="+actual);
        if (expected==actual) {
            System.out.println(" correct");
        } else {
            System.out.println(" WRONG");
        }
    }
    
    public static void main(String[] main)
    {
        int[] ar1 = new int[] {0, 2, 3, 4, -5, 6};
        int[] ar2 = new int[] {0};
        int[] ar3 = new int[] {0};
        
        String[] words=new String[] {"minotaur", "elf", "griffin", "bunyip", 
            "jormungandr", "lusca", "mongolian death worm", "jinn"};

        int[][] grid = new int[][] {
            {0,0,0,0,1},
            {0,1,1,1,0},
            {0,1,1,1,0},
            {0,1,1,1,0},
            {0,1,1,1,0}
        };

        test(4, indexOfMax(ar1));
        
        test(true, hasBottomRight(grid, 2, 2));
        
        test(3, countNumDivisibleBy(ar1, 3));
        
        test(true, sameNumPosNeg(new int[] {-1, 0, 17}));
        
        test(20, longestString(words));
        
        test(9,sumFirstLastMiddle(new int[] {1, 2, 3, 4, 5}));
        test(14, sumFirstLastMiddle(new int[] {1, 2, 3, 4, 5, 6}));
        test(27, sumFirstLastMiddle(new int[] {9}));
        test(38, sumFirstLastMiddle(new int[] {10, 9}));
    }
    
    /**
     * Question #1
     */
    public static int indexOfMax(int[] nums) {
        int indexOfMax=0;
        for ( i = 0; i < nums.length; i++ ){
            nums.length;
        }
        if ( indexOfMax < nums[i].length ){
            (indexOfMax == nums[i].length);
        }
        return indexOfMax;
        
        return -1;
    }
    
    /**
     * Question #2
     */
    public static boolean hasBottomRight(int[][] cells, int row, int col) {
        return false;
    }
    
    /**
     * Question #7
     */
    public static int countNumDivisibleBy(int[] nums, int x) {
        return -1;
    }
    
    /**
     * Question #8
     * 
     */
    public static boolean sameNumPosNeg(int[] nums) {
        return false;
    }
    
    /**
     * Question #9
     */
    public static int longestString(String[] words) {
        return -1;
    }
    
    /**
     * Question #12
     */
    public static int sumFirstLastMiddle(int[] nums) {
        return -1;
    }
}