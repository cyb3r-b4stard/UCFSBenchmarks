import java.util.Random;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.HashSet;
import java.util.stream.Collectors;

/**
 * # ###### ########-#### #########, ##### ## # ########### #####
 * ########## ####### ### #####.
 * 
 * @###### ##### #. ######, ####### ####### ### #### ######
 * @####### ####/#/##
 */
public class Simulator
{

    private final List<Actor> animals;
    private final Field field;
    private int step;
    private final Factory factory;
    private final View view;
    /**
     * Internal class invariants:
     * All actors in list are alive.
     * Same actors on field and in list.
     * Locations in field and in actors should agree.
     * Simulation and all actors use the same field.
     */
    public void sane()
    {
        assert animals != null : "The list of actors is null";
        assert field != null : "The field is null";
        assert step >= 0 : "Negative step";  
        assert view != null : "The view is null";

        for (Actor animal : animals) {
            assert animal.isActive() : "Dead animal in list";
        }

        for (Actor animal : animals) {
            assert animal.getField() == field : 
            "An animal has a different field: " + 
            animal.getField() + " " + field;
        }

        for(int row = 0; row < field.getDepth(); row++) {
            for(int col = 0; col < field.getWidth(); col++) {
            }
        }
    }

    /**
     * Create a simulation field with the given size.
     * @param factory A factory for creating the actors.
     * @param view A view for displaying the simulation.
     * @param depth Depth of the field. Must be greater than zero.
     * @param width Width of the field. Must be greater than zero.
     */
    public Simulator(Factory factory, View view, int depth, int width)
    {
        assert (width > 0 && depth > 0) : 
        "The dimensions are not greater than zero.";

        this.factory = factory;
        this.view = view;

        animals = new ArrayList<Actor>();
        field = new Field(depth, width);

        reset();
    }

    /**
     * Return the animal's field.
     * @return The animal's field.
     */
    public Field getField()
    {
        return field;
    }

    /**
     * Current value of the step counter.
     */
    public int getStep()
    {
        return step;
    }

    /**
     * Run the simulation from its current state for a single step.
     * Iterate over the whole field updating the state of each
     * fox and rabbit.
     */
    public void simulateOneStep()
    {

        step++;

        List<Actor> newAnimals = new ArrayList<Actor>(); 

        for(Iterator<Actor> it = animals.iterator(); it.hasNext(); ) {
            it.next().act(newAnimals);
        }


        for(Iterator<Actor> it = animals.iterator(); it.hasNext(); ) {
            if(! it.next().isActive()) {
                it.remove();
            }
        }

        view.update(this);

    }

    /**
     * Determine whether the simulation is still viable.
     * I.e., should it continue to run.
     * @return true If there is more than one species alive.
     */
    public boolean isViable()
    {
        return (animals.stream().map((a) -> a.getClass())
            .collect(Collectors.toSet())).size() 
        > 1;
    }

    /**
     * Reset the simulation to a starting position.
     */
    public void reset()
    {

        step = 0;
        animals.clear();
        field.clear();
        populate();

        view.update(this);

    }
    
   /**
     * Randomly populate the field with foxes and rabbits.
     * Pre-condition: the field is empty
     */
    private void populate()
    {
        sane();
        
        Random rand = Randomizer.getRandom();
        for(int row = 0; row < field.getDepth(); row++) {
            for(int col = 0; col < field.getWidth(); col++) {
                Location location = new Location(row, col);
                Actor temp =factory.optionallyCreateActor(rand.nextDouble(),field,location);
                if(temp != null)
                animals.add(temp);
            }
        }
        
        sane();
    }
    
}