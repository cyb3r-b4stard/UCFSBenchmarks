/**
 * #### ##### ######## # ########## ### ## #### ######### #######.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Shuffler 
{
    
    /**
     * Apply a "perfect shuffle" to the argument.
     * The perfect shuffle algorithm splits the deck in half, then interleaves
     * the cards in one half with the cards in the other.
     * @param values is an array of integers simulating cards to be shuffled.
     */
    public static int[] perfectShuffle(int[] values) 
    {
        int shuffled [] = new int [52];
        int k=0;
        while(int j<25)
        {
            shuffled[k] = values[j];
            k=k+2;
        }
        k=1;
        for (int j=26; j<51; j++)
        {
            shuffled[k] = values[j]; 
            k=k+2;
        }
        return shuffled;
    }

    /**
     * Apply an "efficient selection shuffle" to the argument.
     * The selection shuffle algorithm begins by exchanging the last element
     * in the array with randomly selected element preceeding it, and then 
     * exchanging the second-to-the-last element with another randomly 
     * selected element preceeding it.  The selection thus continues from 
     * the back to the front with random elements selected from those 
     * preceeding it.
     * @param values is an array of integers simulating cards to be shuffled.
     */
    public static void selectionShuffle(int[] values) 
    {
        for(k =51; k>=1; k--)  
        {
            int r = (int)(Math.random() * k);
            
        }
    }
}