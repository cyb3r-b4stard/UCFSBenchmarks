import java.util.*;

/**
 * # ##### #### ######### #
 * ###### ### ### ##### 
 * ## #####.
 * 
 * @###### #### ######### 
 * @####### ##/##/##
 */
public class Cinema
{
   private Map<String, Set<String>> film = new HashMap<>();
   private Set<String> tag = new HashSet<>();
   /**
    * Constructor for objects of class Cinema which 
    * creates an empty map and assigns it to the map
    * instance variable.
    */
   public Cinema()
   {
      Map<String, Set<String>> aFilm = new HashMap<>();
      Set<String> aTag = new HashSet<>();
   }

   /**
    *  Public instance method used to populate the
    *  map with test data.  Takes no argument, all
    *  data is written into the code of the method.
    */
   public void testData()
   {
      tag.add("Animation");
      tag.add("Drama");
      tag.add("Romance");
      tag.add("Comedy");
      film.put("Bobs Job", tag);
      
      tag = new HashSet<>();
      tag.add("Sci-Fi");
      tag.add("Thriller");
      tag.add("Horror");
      tag.add("Aliens");
      film.put("Outer Space", tag);
   }
   
   /**
    * Method that takes no argument and iterates 
    * over the keys of the map and prints out 
    * a textual representation of the map's 
    * content.
    * @param method must find keys to work.
    * Returns no value.
    */
   public void printMap()
   {
     Set<String> filmKeys = film.keySet();   
     for (String eachKey: filmKeys)
     {
        System.out.println("The Film " + (eachKey) + " contains the following themes " 
                          + (film.get(eachKey))); 
     }
   }
   
   /**
    * Takes a single argument in the form aFilm.  
    * @param aFilm which must be equal to a key
    * in the map.  If the key is present it informs 
    * the user.  If the key is not present it informs
    * the user that it is not found.
    */
   public void printMapValue(String aFilm)
   {
     boolean result = film.containsKey(aFilm);
     if (result == true) 
     {
        System.out.println("The Film " + (aFilm) + " is available to view." 
                          + " It contains the following themes " + (film.get(aFilm)));
     }
     else 
     {
     System.out.println("We apologise but the Film " + (aFilm) + 
                       " is not available at this time."); 
     }
   }
   
   /**
    * Takes two arguments representing a key and a value
    * and adds them to the map.  
    * @param aFilm if present the existing value is overwritten. 
    * @param aTag adds values to the key.
    * Returns no value.
    */
   public void addMapEntry(String aFilm, String aTag)
   {
      tag = new HashSet<>();
      tag.add(aTag);
      film.put(aFilm, tag);
   }
   
   /**
    * Takes a single argument representing a key in the map.
    * @param aFilm if the key exists the key-value pair is
    * deleted from the map. 
    * @return true if key is found, otherwise returns false.
    */
   public boolean deleteEntry(String aFilm)
   {
      boolean result = film.containsKey(aFilm);
      if (result == true)
      {
         film.remove(aFilm);
      }
      return result;
   } 
   
   /**
    * Returns a collection of all the keys based on whether 
    * a tag is present in the values. The tag represents the
    * type of movie a person is looking for eg.comedy.
    * @param aTag must be present in a key-value pair.
    * @return collection of the keys that contain the argument.
    */
   public Collection selectKeys(Set<String aTag)
   {
     Collection<Set<String>> filmValues = film.values();   
     for (Set<String> eachValue: filmValues)
     if (eachValue.() == (aTag))
     {
         
     }
     return filmValues;
   }
   
}