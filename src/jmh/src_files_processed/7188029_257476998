
/**
 * ##### # ########### ## ##### ####### ####.
 * 
 * @### ###### (#########) 
 */
public class BusStop
{
    private BusArrival[] _buses;
    private int _noOfBuses;
    
    private final int MAX_ARRAY_SIZE = 1000;

    /**
     * Default constructor creates new array by default size.
     */
    public BusStop() {
    _buses = new BusArrival[MAX_ARRAY_SIZE];
    _noOfBuses = 0;
    }
    
   /**
    * Constructor that creates a new array by  size.
    * @param size of array.
    */ 
   public BusStop(int size) {
   _buses = new BusArrival[size];
   _noOfBuses = 0;
   }
   
   /**
    * Returnes the actual nomber of buses
    * @actual nomber of buses 
    */
   public int getNoOfBuses()   {
       return _noOfBuses;
   }
   
   /**
    * Returnes the array of nomber of buses
    * @array of nomber of buses 
    */
   public BusArrival[] getBuses()    {
       return _buses;
   }
   
   /**
    * Add bus object according to BusArrival constructor
    * @param  The bus line number (should be between 1-99).
    * @param The number of passengers (should be between 0-70).
    * @param The time of bus arrival.
    * @return true if bus addition sucessful.
    * @return false if bus addtion failed.
    */
   public boolean add(int line, int pass, Time1 t)  {
       if (getNoOfBuses() < getBuses().length)   {
        int ifFree = (getNoOfBuses() + 1);
        _buses[ifFree] = new BusArrival(line, pass, t);
    return true;}
    else return false;}
    
   public void removeAllLine(int line)  {
   BusArrival[] _busesCopy = new BusArrival[getBuses().length];
   int newNoOfBuses = 0;
        for (int i = 0; i < getNoOfBuses(); i++)   {
            if(getBuses()[i].getLineNum() != line)    {
                _buses[i] new BusArrival(_busesCopy[i]);
                newNoOfBuses++;}
        }
     if (newNoOfBuses != 0)
     _buses = _busesCopy;
    }
    

    
}