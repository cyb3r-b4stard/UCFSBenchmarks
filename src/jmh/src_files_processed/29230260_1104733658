/**
 * #### ##### ########## # ###### #### ##### ### ####
 * ## #####. # ###### ####### ### ##### ############.
 */
public class Vendor
{
  private int myPrice;
  private int myStock;
  private int myDeposit;
  private int myChange;
  private int cents;
  private int price;
  private int stock;
  
  /**
   * Constructs a Vendor
   * @param price the price of a single item in cents (int)
   * @param stock number of items to place in stock (int)
   */
  public Vendor (int myPrice, int myStock)
  {
    myDeposit = 0;
    myChange = 0;
  }

  /**
   * Sets the quantity of items in stock.
   * @param qty number of items to place in stock (int)
   */
  public void setStock (int items)
  {
    myStock = items;
  }

  /**
   * Returns the number of items currently in stock.
   * @return number of items currently in stock (int)
   */
  public int getStock (int myStock)
  {
      return myStock;
  }

  /**
   * Adds a specified amount (in cents) to the
   * deposited amount.
   * @param number of cents to add to the deposit (int)
   */
  public int addMoney (int myDeposit, int myChange) 
  {
    myDeposit = cents;
    return cents;
  }

  /**
   * Returns the currently deposited amount (in cents).
   * @return number of cents in the current deposit (int)
   */
  public int getDeposit (int myDeposit)
  {
   return myDeposit;
  }

  /**
   * Implements a sale.  If there are items in stock and
   * the deposited amount is greater than or equal to
   * the single item price, then adjusts the stock and
   * calculates and sets change, sets deposit to 0 and
   * returns true; otherwise refunds the whole deposit
   * (moves it into change) and returns false.
   * @return true for a successful sale, false otherwise (boolean)
   */
  public boolean makeSale (int myDeposit, int myStock, int myChange, int myPrice)
  {
    if (myStock >= 0 && myDeposit >= myPrice)
    {
        myStock --; 
        myDeposit-myPrice = myChange;
    } 
    return true;
}
  
  

  /**
   * Returns and zeroes out the amount of change (from
   * the last sale or refund).
   * @return number of cents in the current change (int)
   */
  public int getChange (int myChange)
  {
    
      return myChange;
  }
}






















