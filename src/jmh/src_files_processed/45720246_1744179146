
/**
 * #### ##### #### ### ##### ## #### # ###### ####. ## ########## ### ####
 * (#### ## ##### ###) ########### ## ####### ### ##### ######.
 *
 **/

  public class LLStack {
      
      private Node head;
      
      public LLStack( ) {
          head=null;
      }
      
      private class Node  {
         private Object data;
         private Node next;
         
         public Node(){
            data=null;
            next=null;
         }
         public Node (Object newData, Node nextLink) {
                 data=newData;
                 next=nextLink;
         }
      }
      
       public void addToStart(Object itemData) {
           head=new Node(newData, nextLink); 
       }
       
       public boolean deleteHead( ) {
         if(head!=null){
             head=head.nextLink();
             return true;
            }
            else 
            return false;
       }
      
      public int size( ) {
          int count=0;
          Node position=head;
          while(position!=null){
              count++;
              postion=position.nextLink();
         
          }
          return count;
      
    
      public boolean contains(Object item) {
      }
      
      private Node findData(Object target) {
          Node current = head;
          Object itemAtPosition;
          while (current != null) {
              itemAtPosition = current.data;
              
              if (itemAtPosition.equals(target))
                return current;
              current = current.next;
            }
            return null;            
      }
    
      
      public void outputList( ) {
          Node current = head;
          while (current != null) {
              System.out.println(current.data);
              current = current.next;
          }
      }
      
      public String toString() {
          String retValue = "";
          Node current = head;
          
          while(current != null) {
              retValue += current.data.toString() + " ";
              current = current.next;
          }
          return retValue;
      }
  
      
      public boolean isEmpty( ) {
      }
      
      public void clear( ) {
      }
      public boolean equals(Object otherObject) {
          if (otherObject == null)
            return false;
          
          else if(!(otherObject instanceof LLStack))
            return false;
            
          else {
              LLStack otherList = (LLStack)otherObject;
              if (size( )!= otherList.size( ))
                return false;
              Node position = head;
              Node otherPosition = otherList.head;
              while (position != null) {
                  if (!(position.data.equals(otherPosition.data)))
                    return false;
                    position = position.next;
                    otherPosition = otherPosition.next;
              }
              return true;      
            }
      }
      
        public static void main(String[] args) {
            
            String target = "Somethings!";
            String palindrome = "a man a plan canal panama";
            
            LLStack list = new LLStack( );
            Object object1 = (Character) target.charAt(4);
            Object object2 = (Character) target.charAt(1);
            Object object3 = (Character) target.charAt(2);
            Object object4 = (Character) target.charAt(9);
            Object object20 = (Character) target.charAt(6);  
            
            list.addToStart(object1);
            list.addToStart(object2);
            list.addToStart(object3);
            list.addToStart(object4);
            
            System.out.println("My list has " + list.size( ) + " nodes.");
            list.outputList( );
            System.out.println("toString = " + list.toString());
            
            Node itemFound = list.findData(object1); 
            System.out.println("Item found: " + itemFound.data);
            
            if (list.contains(object1))
                System.out.println("Object1 found.");
            else
                System.out.println("There is NO object1.");
                
            if (list.contains(object20))
                System.out.println("Object20 found.");
            else
                System.out.println("There is NO object20.");
                
            LLStack linkedList = new LLStack();
          
            for(int i = 0; i < palindrome.length(); i++) {
              Object object = (Character) palindrome.charAt(i);
              linkedList.addToStart(object);
            }
            linkedList.outputList();
             
            System.out.println("This time my list has " + linkedList.size( ) + " nodes.");
            System.out.println("Is our linkedList empty? " + linkedList.isEmpty());
              
            Object mismatchObject = (Integer) Character.getNumericValue(target.charAt(0));
            
            boolean areEqual = linkedList.equals(mismatchObject);
            System.out.println("Are the 2 objects equal? " + areEqual);
              
            boolean areEqualAgain = linkedList.equals(linkedList);
            System.out.println("Are the 2 objects equal? " + areEqualAgain);
             
           list.deleteHead( );
           if (list.contains(object4))
               System.out.println("Object4 found.");
           else
               System.out.println("Object4 has been deleted!");
           while (list.deleteHead( ));            
           System.out.println("Start of list:");
           list.outputList( );
           System.out.println("End of list.");
                
                    
           System.out.println("In the begining linkedList has " + linkedList.size() + " nodes");
           linkedList.clear();
          
           System.out.println("After testing clear(), linkedList has " + linkedList.size() + " nodes");
        }
            
     }

          