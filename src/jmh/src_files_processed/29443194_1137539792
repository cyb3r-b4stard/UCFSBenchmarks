
/**
 * ##### # ########### ## ##### ######## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */

import GLOOP.*;

public class Asteorid
{
       GLKugel[] asteorid_array = new GLKugel[100];
       double[] asteorid_radius = new double[101];
       private Rocket rocket;

       public Asteorid(int a){
           asteorid_array = new GLKugel[100];
           for(int f= 0; f<a; f++){
               double az = 4000;
               double ax = Math.random()*4000;
               double ar = (Math.random()*200)+100;
               asteorid_array[f] = new GLKugel(ax,0,az,ar);
               asteorid_radius[f] = ar;
               asteorid_array[f].setzeTextur("a.jpg");
               
            }
   
        }           

       public void asteorid_move(int i){
         public asteorid_array = new GLKugel[100];
         if(asteorid_array.length <= i+1){
               for(int f= 0; f<=i; f++){

                   asteorid_array[f].verschiebe(2,2,1);

                
                }
            }
        }
       public void remove(){
           for(int f=0; asteorid_array.length<f; f++){
               asteorid_array[f].loesche();
               asteorid_array[f] = null;
          }
       }
       public double asteoridx(int a){
           if(asteorid_array.length <= a){
               double x = asteorid_array[a].gibX();
               return x;
          }
          return 0;
       }   
       public double astoeridy(int a){
          if(asteorid_array.length <= a){
              double y = asteorid_array[a].gibY();
              return y;
           }
          return 0;
        }
       public double asteoridz(int a){
           if(asteorid_array.length <= a){
               double z = asteorid_array[a].gibZ();
               return z;
            }
           return 0;
        }
       public double asteorid_rad(int a){
           double rad = asteorid_radius[a];
           return rad;
        }
       public boolean hit(Rocket rocket, Asteorid asteorid){
           rocket = rocket;
           asteorid = asteorid;
           
           for(int f=0;f<101; f++){
               double a = (asteorid.asteoridx(f) - rocket.r_gibX())*(asteorid.asteoridx(f) - rocket.r_gibX());
               double b = (asteorid.asteoridz(f) - rocket.r_gibZ())*(asteorid.asteoridz(f) - rocket.r_gibZ());
               double c = a+b;
               
               if(c > asteorid.asteorid_rad(f)*asteorid.asteorid_rad(f)){
                              return true;
                     }   
           }
           return false;
           }
       
        
        
    }

