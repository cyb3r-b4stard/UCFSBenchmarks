
/**
 * ########## ######### ### ###### ### ##### ############ ####
 * ## #### ## ####### #### ## ### ##### ## ### ####### ##########
 * ## #####/####, ##### ########## ## #/#, ############
 * 
 * @######  
 * @#######
 */
public class RelOp extends BinOp
{
 Boolean
    public RelOp(String op)
    {
        super(op);
    }
     public String produceExpression(List explist) {
        if(explist.next == null)
        {
            throw new IndexOutOfBoundsException("Requires a list of length>1");
        }
        else{
        return explist.vname + op + explist.next.vname + ";\n"; 
    }
}
public int booleanConverter()
{
    return trueOrFalse==true?1:0
}
     public String produceStatement(List explist,boolean trueOrFalse) {
        if(explist.next == null)
        {
            throw new IndexOutOfBoundsException("Requires a list of length>1");
        }
        else{
            int booleanConversion = trueOrFalse==true?1:0;
                
        return ""+ booleanConversion + "=" + explist.vname + op + explist.next.vname + ";\n"; 
    }
}
}