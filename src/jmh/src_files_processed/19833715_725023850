import javax.swing.JOptionPane;
/**
 * ##### # ########### ## ##### ######### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */



public class TicTacToe 

{

    
   static String topLeft = "topLeft";
   static String topMiddle = "topMiddle";
  static String  topRight = "topRight";
  static String middleLeft = "middleLeft";
    static String middleMiddle = "middleMiddle";
 static   String middleRight = "middleRight";
   static String  bottomLeft = "bottomLeft";
  static String  bottomMiddle = "bottomMiddle";
   static String bottomRight = "bottomRight";
     
    static  boolean topLeftPlayed = false;
    static   boolean topMiddlePlayed = false; 
   static   boolean topRightPlayed = false;
      
     static boolean middleLeftPlayed = false; 
   static   boolean middleMiddlePlayed = false;
      static boolean middleRightPlayed = false; 
      
   static   boolean bottomLeftPlayed = false;
    static  boolean bottomMiddlePlayed = false; 
   static   boolean bottomRightPlayed = false; 
   
   static boolean moveSuccess = false; 
   
      static  Turtle t = new Turtle();
    /**
     * Constructor for objects of class TicTacToe
     */
    public TicTacToe()
    {
       Board(t);
     
           
        
}


public static void main(String args[])
{
    TicTacToe app = new TicTacToe();
    app.playGame();

}

    
public static void playGame()
    {
        
      String instructions ="Please type a number."
      +"The accepted value are 0-8.\nEach number corresponds to a position"
      +"on the board. \n0 = top left, 1 = top middle, 2 = top right, \n3 = middle left,"
      +"4 = middle middle, 5 = middle right, \n6 = bottom left, 7 = bottom middle,"
      +"8 = bottom right";  
      String turn1 = "Player 1 turn. Enter a number from 0-8:";
      String turn2 = "player 2 turn. Enter a number from 0-8:";
      
      System.out.println(instructions);
      
 
      makeMove("Player 1");
      
 
      makeMove("Player 2");
      
      
    
      

      makeMove("Player 1");
      

      makeMove("Player 2");
      
      makeMove("Player 1");
      
 
    makeMove("Player 2");
      
      makeMove("Player 1");
      
     
      makeMove("Player 2");
      
     
     makeMove("Player 1");
      

    }
private static void makeMove(String player)
{
     moveSuccess = false;
    String turn = player + "turn. Enter a number from 0-8:";
     System.out.println(turn);
      try
      {
             int x = StdIn.readInt();
   
     if(x >=0 && x <= 8)
     {
      if(x == 0)
        {
            if(topLeftPlayed == false)
            {
                if(player.equals("Player 1"))
                {
                
               drawXTopLeft(t);
               topLeft = "X";
               moveSuccess = true;
            }
               else
              {
              drawOTopLeft(t);
              topLeft = "O";
              moveSuccess = true;
            }
             topLeftPlayed = true;
            }
            else 
            {
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
               return makeMove(String player);
            }
        }
      if(x == 1)
        {
            if(topMiddlePlayed == false)
            {
              if(player.equals("Player 1"))
               { 
               drawXTopMiddle(t);
               topMiddle = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOTopMiddle(t);
              topMiddle = "O";
                    moveSuccess = true;
            }
             topMiddlePlayed= true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
      if(x == 2)
        {
            if(topRightPlayed == false)
            {
              if(player.equals("Player 1"))
               { 
               drawXTopRight(t);
               topRight = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOTopRight(t);
               topRight = "O";
                     moveSuccess = true;
            }
               topRightPlayed= true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
      if(x == 3)
        {
            if(middleLeftPlayed == false)
            {
               if(player.equals("Player 1"))
            {
               drawXMiddleLeft(t);
               middleLeft = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOMiddleLeft(t);
             middleLeft = "O";
                   moveSuccess = true;
            }
              middleLeftPlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
   
      if(x == 4)
        {
            if(middleMiddlePlayed == false)
            {
               if(player.equals("Player 1"))
               { 
               drawXMiddleMiddle(t);
               middleMiddle = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOMiddleMiddle(t);
               middleMiddle = "O";
                     moveSuccess = true;
            }
            
               middleMiddlePlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
     
      if(x == 5)
        {
            if(middleRightPlayed == false)
            {
               if(player.equals("Player 1"))
                {
               drawXMiddleRight(t);
               middleRight = "X";
      moveSuccess = true;
            }
               else
               {
               drawOMiddleRight(t);
               middleRight = "O";
                     moveSuccess = true;
            }
            middleRightPlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
     
      if(x == 6)
        {
            if(bottomLeftPlayed == false)
            {
               if(player.equals("Player 1"))
                {
               drawXBottomLeft(t);
               bottomLeft = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOBottomLeft(t);
              bottomLeft = "O";
                    moveSuccess = true;
            }
             bottomLeftPlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }

       if(x == 7)
        {
            if(bottomMiddlePlayed == false)
            {
               if(player.equals("Player 1"))
                {
               drawXBottomMiddle(t);
               bottomMiddle = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOBottomMiddle(t);
               bottomMiddle = "O";
                     moveSuccess = true;
            }
               bottomMiddlePlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
       if(x == 8)
        {
            if(bottomRightPlayed == false)
            {
               if(player.equals("Player 1"))
                {
               drawXBottomRight(t);
               bottomRight = "X";
                     moveSuccess = true;
            }
               else
               {
               drawOBottomRight(t);
               bottomRight = "O";
                     moveSuccess = true;
            }
            bottomRightPlayed = true;
            }
            else 
            {
                
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "That position is already played"  
                +"choose another value", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        String winner = checkWinner();
       if(winner.equals("Player 1") || winner.equals("Player 2"))
       {
        System.out.println("Game Over!"+ checkWinner()+ " is the winner!");
       }
} 
}
        catch(Exception e)
      {
        
                moveSuccess = false;
                JOptionPane.showMessageDialog(null, "Invalid move",  
                 "ERROR", JOptionPane.ERROR_MESSAGE);
      }
     
   
}
public static String checkWinner()
   {
    
    String winner = "";
    
    if(topLeft.equals(topMiddle)&& topLeft.equals(topRight))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    else if (middleLeft.equals(middleMiddle)&& middleLeft.equals(middleRight))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    else if (bottomLeft.equals(middleMiddle)&& bottomLeft.equals(middleRight))
    {
       if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        } 
    }
    else if (topLeft.equals(middleLeft)&& topLeft.equals(bottomLeft))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    else if (topMiddle.equals(middleMiddle)&& topMiddle.equals(bottomMiddle))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    else if (topRight.equals(middleRight)&& topRight.equals(bottomRight))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
     else if (topLeft.equals(middleMiddle)&& topLeft.equals(bottomRight))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    else if (topRight.equals(middleMiddle)&& topRight.equals(bottomLeft))
    {
        if(topLeft.equals("X"))
        {
            winner = "Player 1";
        }
        else
        {
            winner = "Player 2"; 
        }
    }
    return winner;
    
   }
  
    public static void Board(Turtle t)
    {
      t.up();
      t.setPosition(0,100);
      t.down();
      t.setPosition(300,100);
      t.up();
      t.setPosition(0,100);
      t.down();
      t.setPosition(-300,100);
       t.up();
       t.setPosition(-100,0);
       t.down();
       t.setPosition(-100,300);
       t.up();
       t.setPosition(-100,0);
       t.down();
       t.setPosition(-100,-300);
       t.up();
       t.setPosition(100,0);
       t.down();
       t.setPosition(100,300);
       t.up();
       t.setPosition(100,0);
       t.down();
       t.setPosition(100,-300);
       t.up();
       t.setPosition(0,-100);
      t.down();
      t.setPosition(300,-100);
      t.up();
      t.setPosition(0,-100);
      t.down();
      t.setPosition(-300,-100);
 }
public static void drawX(Turtle t)
    {
    t.setDirection(0);
    t.left(45);
    t.forward(120);
    t.backward(60);
    t.left(90);
    t.forward(60);
    t.backward(120);
    }
    public static void drawO(Turtle t)
{
  t.setDirection(0);
  t.down();
  t.speed(.5);
  for(int i=1; i<360; i++)
   {
    t.left(1);
    t.forward(1);
   }    
}
public static void drawXTopLeft(Turtle t)
{
    t.up();
    t.setPosition(-220,150);
    t.down();
    drawX(t);


}
public static void drawOTopLeft(Turtle t)
{

    t.up();
    t.setPosition(-220,150); 
    t.down();
    drawO(t);

}
public static void drawXTopMiddle(Turtle t)
{
      t.up();
    t.setPosition(-40,150);
    t.down();
    drawX(t);

}
public static void drawOTopMiddle(Turtle t)
{

    t.up();
    t.setPosition(20,140);
    t.down();
    drawO(t);

}
public static void drawXTopRight(Turtle t)
{
      t.up();
    t.setPosition(180,150);
    t.down();
    drawX(t);

}
public static void drawOTopRight(Turtle t)
{

    t.up();
    t.setPosition(220,150);
    t.down();
    drawO(t);

}
public static void drawXMiddleLeft(Turtle t)
{
    t.up();
    t.setPosition(-240,-50);
    t.down();
    drawX(t);

}
public static void drawOMiddleLeft(Turtle t)
{

    t.up();
    t.setPosition(-220,-50);
    t.down();
    drawO(t);

}
public static void drawXMiddleMiddle(Turtle t)
{
    t.up();
    t.setPosition(-40,-40);
    t.down();
    drawX(t);

}
public static void drawOMiddleMiddle(Turtle t)
{

    t.up();
    t.setPosition(0,-60);
    t.down();
    drawO(t);

}
public static void drawXMiddleRight(Turtle t)
{
    t.up();
    t.setPosition(170,-40);
    t.down();
    drawX(t);

}
public static void drawOMiddleRight(Turtle t)
{

    t.up();
    t.setPosition(200,-60);
    t.down();
    drawO(t);

}
public static void drawXBottomLeft(Turtle t)
{
    t.up();
    t.setPosition(-240,-240);
    t.down();
    drawX(t);

}
public static void drawOBottomLeft(Turtle t)
{

    t.up();
    t.setPosition(-200,-240);
    t.down();
    drawO(t);

}
public static void drawXBottomMiddle(Turtle t)
{
    t.up();
    t.setPosition(-40,-240);
    t.down();
    drawX(t);

}
public static void drawOBottomMiddle(Turtle t)
{

    t.up();
    t.setPosition(0,-240);
    t.down();
    drawO(t);

}
public static void drawXBottomRight(Turtle t)
{
    t.up();
    t.setPosition(150,-240);
    t.down();
    drawX(t);

}
public static void drawOBottomRight(Turtle t)
{

    t.up();
    t.setPosition(200,-240);
    t.down();
    drawO(t);

}
}
