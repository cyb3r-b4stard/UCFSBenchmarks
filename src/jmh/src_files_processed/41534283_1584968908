import java.lang.*;

/**
 * #### ##### ### ##### ### ####### #######
 * 
 * @###### #### ##
 * @####### ##.##.##
 * ###### #, #
 */
class RegularPolygon{
    /**
     * the number of sides, the length of the sides, radius of both circles
     * the area, vertex angle, and perimeter
     */
    private int numSides; 
    private double sideLength; 
    private double R; 
    private double r; 
    private double area;
    public double vertexAngle;
    private double perimeter;
    
    /**
     * Constructor for the class RegularPolygon
     */
    public RegularPolygon()
    {
        numSides = 3;
        sideLength = 20;
        calcr();
        calcR();
    }
    
    /**
     * Constructor for the class RegularPolygon
     */
    public RegularPolygon(int sides, double lengths)
    {
        numSides = sides;
        sideLength = lengths;
    }

    /**
     * calculates the radius of the inscribed circle
     * 
     * @param none
     * @return none
     */
    private void calcr()
    {
        r = (1.0/2.0) * sideLength * (1.0/Math.tan(Math.PI/numSides));
    }
    
    /**
     * calculates the radius of the circumscribed circle
     * 
     * @param none
     * @return none
     */
    private void calcR()
    {
        R = (1.0/2.0) * sideLength * (1.0/Math.sin(vertexAngle));
    }

    /**
     * calculates the vertex angle
     * 
     * @param none
     * @return vertexAngle the vertex angle
     */
    public double calcVertexAngle()
    {
        vertexAngle = ((double)numSides - 2)/numSides) * 180;
        return vertexAngle;
    }

    /**
     * calculates the perimeter
     * 
     * @param none
     * @return perimeter the perimeter
     */
    public double calcPerimeter()
    {
        perimeter = numSides * sideLength;
        return perimeter;
    }
    
    /**
     * calculates area
     * 
     * @param none
     * @return area the area
     */
    public double calcArea()
    {
        area = (1.0/2.0) * numSides * Math.pow(R, 2) * Math.sin((2 * Math.PI)/numSides);
        return area;
    }
    
    /**
     * returns the number of sides
     * 
     * @param none
     * @return numSides the number of sides
     */
    public double getNumSide()
    {
        return numSides;
    }
    
    /**
     * returns the side length
     * 
     * @param none
     * @return sideLength the side length
     */
    public double getSideLength()
    {
        return sideLength;
    }

    /**
     * returns the radius of the circumscribed circle
     * 
     * @param none
     * @return R the radius of the circumscribed circle
     */
    public double getR()
    {
        return R;
    }

    /**
     * returns the radius of the inscribed circle
     * 
     * @param none
     * @return r the radius of the inscribed circle
     */
    public double getr()
    {
        return r;
    }
}
