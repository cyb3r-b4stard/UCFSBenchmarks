import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
/**
 * ##### #########
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class NgramModel
{
    private HashMap<String,Integer> ngram; 
    private int alphabetSize;
    private int numWords;

    /** 
     * Create an n-gram frequency model for an input string
     * ngrams at the end of the string wrap to the front
     * e.g. "abbbbc" includes "bca" and "cab" in its 3-grams
     * @param int n size of n-grams to create
     * @param String inp input string to be modelled
     */
    public NgramModel(int n, String inp)
    {
        char c()=inp.charAt();
    HashMap<String,Integer> ngrams=new HashMap<String,Integer>();
   for (int i = 0; i < inp.length(); i++) {
    if (ngrams.get(c(i))) {
        alphabetSize= ngrams.get(inp.charAt(i));
        ngrams.put(inp.charAt(i), ++alphabetSize);
    } else {
        ngrams.put(inp.charAt(i), 1);
    }
}
    /*alphabetSize=0;
    
    while(inp.length()>0)
    {
        ch=inp.charAt(0);
        int i=0;

        while(inp.charAt(i)==ch)
        {
                alphabetSize =alphabetSize+i;
                i++;
        }

        System.out.println(ch);
        System.out.println(alphabetSize);
        HashSet<String> numChar=new HashSet<String>();
    numChar.add(alphabetSize);*/
}
    
    

    /** 
     * default constructor generates model for ngrams of size 1
     */
    public NgramModel(String inp) 
    {
        this(1,inp);
    }

     /**
     * @return HashMap<String,Integer> the ngram dictionary with word frequencies
     */
    public HashMap<String,Integer> getDictionary() {
        return ngram;
    }

    /**
     * @return int the size of the alphabet of a given input
     */
    public int getAlphabetSize() {
        return alphabetSize;
    }

    /**
     * @return int the total number of ngram words counted in the model
     */
    public int getNumWords() {
        return numWords;
    }

    /**
     * Make list of all words with frequency at least freq
     * @param freq int lower frequency limit for returned words
     * @return ArrayList all words with frequency more than freq
     */
    public ArrayList<String> getTopWords(int freq) {
        return null;
    }

    /**
     * @return String representation of the ngram model
     */
    public String toString()
    {
        return "";
    }

}