import java.awt.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.net.*;
import java.io.*;
import java.util.Scanner;
public class Walker extends JPanel implements ActionListener, KeyListener
{
    boolean moveUp = false, moveDown = false, moveLeft = false, moveRight = false, shoot = false, shift = false, right = false, left = false, up = false, down = false;
    ArrayList<Pig> players = new ArrayList<Pig>();
    ArrayList<Bullet> bullets = new ArrayList<Bullet>();
    int spacenum = 200;
    Space[][] spaces = new Space[spacenum][spacenum];
    int trees = 6000;
    int itrees = trees;
    int size = 30;
    double x = (int)(Math.random()*spacenum*size), y = (int)(Math.random()*spacenum*size), h = 500;
    double vh;
    double speed;
    double gravity = .2;
    double jump = 7;
    int dir = 1;
    boolean move;
    Rectangle rect = new Rectangle((int)x-8,(int)y-16,16,16);
    Rectangle hitbox;
    boolean hit = false;
    int xscale = 1;
    Img peach = new Img("peachsprite");
    Img shadow = new Img("shadow");
    Space here;
    boolean loading = true;
    boolean host;
    InetAddress iadr;
    int port = 9876;
    MulticastSocket so;
    String name;
    String ip;
    boolean assign = true;
    public Walker(String name, String ip)
    {
        this.name = name;
        this.ip = ip;
        setPreferredSize(new Dimension(256,256));
        setBackground(new Color(200,255,255));
        createWindow();
        init();
        Timer t = new Timer(5, this);
        t.start();
    }

    public void createWindow()
    {
        JFrame frame = new JFrame("Walker");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        Container cp = frame.getContentPane();
        cp.setLayout(new BorderLayout());
        cp.add(this,BorderLayout.CENTER);
        frame.pack();
        frame.addKeyListener(this);
        frame.setVisible(true);
    }

    public void init()
    {
        for(int i=0;i<spacenum;i++)
        {
            for(int j=0;j<spacenum;j++)
            {
                int h = (int)((30*Math.sin((double)j/3))+(30*Math.sin((double)i/3))+20);
                spaces[j][i] = new Space(j*size,i*size,size,size,h);
                repaint();
            }
        }
        while(trees-->0)
        {
            int tilex = (int)(Math.random()*spacenum), tiley = (int)(Math.random()*spacenum);
            spaces[tilex][tiley].treehere = true;
        }
        /*for(int i=0;i<spacenum*spacenum;i++)
        {
        double sx = (int)(Math.random()*spacenum*20), sy = (int)(Math.random()*spacenum*20);
        int h = (int)(Math.random()*60-30);
        spaces.add(new Space((int)sx,(int)sy,20,20,h));
        }
        int sort = spacenum*spacenum;
        while(sort-->0)
        {
        for(int i = 1;i<spaces.size();i++)
        {
        int j = i;
        while(j>0 && spaces.get(j-1).y > spaces.get(j).y)
        {
        Space a = spaces.get(j-1);
        Space b = spaces.get(j);
        spaces.set(j-1,b);
        spaces.set(j,a);
        }
        }
        }*/
        int xpos = (int)(x/size), ypos = (int)(y/size);
        here = spaces[xpos][ypos];
        try{iadr = InetAddress.getByName(ip);}catch(UnknownHostException e){}
        try{so = new MulticastSocket(port);}catch(IOException e){}
        try{so.joinGroup(iadr);}catch(IOException e){}
        new Receiver(so,players,bullets);
        loading = false;
    }

    public void keyPressed(KeyEvent key)
    {
        process(key.getKeyCode(), true);
    }

    public void keyReleased(KeyEvent key)
    {
        process(key.getKeyCode(), false);
    }

    public void keyTyped(KeyEvent key)
    {
        process(key.getKeyCode(), true);
    }

    private void sendCoords(double x, double y, double h) 
    {
        String coords = name+" "+x+" "+y+" "+h;
        byte[] data  = coords.getBytes();
        DatagramPacket packet = new DatagramPacket(data, data.length, iadr, port);
        try {so.send(packet);}catch(IOException ie) {}
    }

    private void sendBullet(double x, double y, double h, double vx, double vy) 
    {
        String coords = "bullet "+x+" "+y+" "+h+" "+vx+" "+vy;
        byte[] data  = coords.getBytes();
        DatagramPacket packet = new DatagramPacket(data, data.length, iadr, port);
        try {so.send(packet);}catch(IOException ie) {}
    }

    public void actionPerformed(ActionEvent e) 
    {
        move = false;
        double ix = x, iy = y;
        if(shift)speed = 3;
        else speed = 2;
        if(moveRight || moveLeft)
        {
            if(moveRight)
            {
                if(moveUp)
                {
                    dir = 0;
                    y -= speed*.707106;
                    move = true;
                }
                if(moveDown)
                {
                    dir = 0;
                    y += speed*.707106;
                    move = true;
                }
                dir = 0;
                x += speed*.707106;
                move = true;
                xscale = 1;
            }
            if(moveLeft)
            {
                if(moveUp)
                {
                    dir = 0;
                    y -= speed*.707106;
                    move = true;
                }
                if(moveDown)
                {
                    dir = 0;
                    y += speed*.707106;
                    move = true;
                }
                dir = 3;
                x -= speed*.707106;
                move = true;
                xscale = -1;
            }
        }
        else
        {
            if(moveUp)
            {
                dir = 0;
                y -= speed;
                move = true;
            }
            if(moveDown)
            {
                dir = 0;
                y += speed;
                move = true;
            }
        }
        if(x<=0)x=1;
        if(y<=0)y=1;
        if(y>=size*spacenum)y=size*spacenum-1;
        if(x>=size*spacenum)x=size*spacenum-1;
        int xpos = (int)(x/size), ypos = (int)(y/size);
        if(spaces[xpos][ypos].h > here.h+16 && spaces[xpos][ypos].h > h)
        {
            x = ix;
            y = iy;
        }
        else here = spaces[xpos][ypos];
        if(h<=here.h)
        {
            h=here.h;
            vh = 0;
            if(shoot)
            {
                vh += 7;
            }
        }
        else
        {
            vh-=.3;
        }
        if(up)sendBullet(x,y,h,0,-4);
        if(down)sendBullet(x,y,h,0,4);
        if(left)sendBullet(x,y,h,-4,0);
        if(right)sendBullet(x,y,h,4,0);
        h+=vh;
        rect = new Rectangle((int)x-8,(int)y-16,16,16);
        sendCoords(x,y,h);
        ArrayList<Bullet> kill = new ArrayList<Bullet>();
        for(int i = 0;i<bullets.size();i++)
        {
            if((int)(bullets.get(i).x/size)<0 || (int)(bullets.get(i).x/size)>=spacenum ||(int)(bullets.get(i).y/size)<0 || (int)(bullets.get(i).y/size)>=spacenum)kill.add(bullets.get(i));
            if(bullets.get(i).update(spaces[(int)(bullets.get(i).x/size)][(int)(bullets.get(i).y/size)].h))kill.add(bullets.get(i));
            if((int)(bullets.get(i).x/size)<0 || (int)(bullets.get(i).x/size)>=spacenum ||(int)(bullets.get(i).y/size)<0 || (int)(bullets.get(i).y/size)>=spacenum)kill.add(bullets.get(i));
        }
        for(int i = 0;i<kill.size();i++)
        {
            bullets.remove(kill.get(i));
        }
        repaint();
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);
        if(!loading)
        {
            /*for(int i = 1;i<spaces.size();i++)
            {
            int j = i;
            while(j>0 && spaces.get(j-1).y > spaces.get(j).y)
            {
            Space a = spaces.get(j-1);
            Space b = spaces.get(j);
            spaces.set(j-1,b);
            spaces.set(j,a);
            }
            }*/
            for(int i=0;i<spacenum;i++)
            {
                for(int j=0;j<spacenum;j++)
                {
                    if((int)Math.round(Math.pow(spaces[j][i].y-y+402.5,2)/1000+30)-spaces[j][i].h+h<super.getHeight()+50 && (int)Math.round(spaces[j][i].x-x+128)>-spaces[j][i].w && (int)Math.round(spaces[j][i].x-x+128)<super.getWidth())
                    {
                        spaces[j][i].draw(g,x,y,h,here.h);
                    }
                }
                for(int j = 0;j<players.size();j++)
                {
                    if((int)(players.get(j).y/size) == i)players.get(j).draw(g,x,y,h,spaces[(int)(players.get(j).x/size)][(int)(players.get(j).y/size)].h);
                }
                for(int j = 0;j<bullets.size();j++)
                {
                    try{if((int)(bullets.get(j).y/size) == i)bullets.get(j).draw(g,x,y,h,spaces[(int)(bullets.get(j).x/size)][(int)(bullets.get(j).y/size)].h);}catch(NullPointerException e)
                }
            }
            g.setColor(Color.WHITE);
            g.drawString("("+(int)x+", "+(int)y+","+(int)h+")",10,10);
        }
        else
        {
            int notbuilt = 0;
            for(int i=0;i<spacenum;i++)
            {
                for(int j=0;j<spacenum;j++)
                {
                    if(spaces[i][j]==null)notbuilt++;
                }
            }
            if(notbuilt>0)
            {
                g.setColor(Color.RED);
                g.fillRect(20,112,(int)((((spacenum*spacenum)-notbuilt)*216)/(spacenum*spacenum)),32);
                g.drawString("laying down the grounds",20,108);
            }
            else if(trees>0)
            {
                g.setColor(Color.RED);
                g.fillRect(20,112,216-(int)((double)trees/(double)itrees*216),32);
                g.drawString("plantin trees n such",20,108);
            }
        }
    }

    private void process(int keycode, boolean flag)
    {
        switch(keycode)
        {
            case 87: 
            moveUp = flag;
            break;
            case 83: 
            moveDown = flag;
            break;
            case 65: 
            moveLeft = flag;
            break;
            case 68: 
            moveRight = flag;
            break;
            case 32: 
            shoot = flag;
            break;
            case 16: 
            shift = flag;
            break;
            case 39: 
            right = flag;
            break;
            case 37: 
            left = flag;
            break;
            case 38: 
            up = flag;
            break;
            case 40: 
            down = flag;
            break;
        }
    }

    public static void main(String[]args)
    {
        Scanner kybd = new Scanner(System.in);
        String name = (String) JOptionPane.showInputDialog("User Name", "anon");
        String ip = (String) JOptionPane.showInputDialog("ip", "234.235.236.237");
        new Walker(name,ip);
    }
}