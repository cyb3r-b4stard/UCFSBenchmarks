import java.util.*;

/**
 * ###### #####
 * ### ###### ##### ######## # #### ## ### ####### ###### ### ### #### #######.
 */
public class Orders
{
    private ArrayList<Order> orders;
    /**
     * Create an ArrayList to hold all the Orders - 2 marks
     */
    public Orders()
    {
        orders = new ArrayList<Order>();

    }

    /**
     * Adds an Order to the list - 1 mark
     */
    public void addOrder(Order order)
    {
        orders.add(order);
    }
    
    /**
     * Returns the number of orders in the list - 1 mark
     */
    public int getOrderSize()
    {
        return orders.size();
    }
    
    /**
     * Displays, on the terminal window, all the current orders in the list. Use the toString method
     * to display the details for each order, one order per line - 2 marks
     */
    public void displayOrders()
    {
        for(Order o : orders) {
            System.out.println(o.toString());
        }
    }
    
    /**
     * Returns all the orders made by the customer - 3 marks
     */
    public ArrayList<Order> getOrders(Customer customer)
    {
        ArrayList<Order> empty = new ArrayList<Order>();
        for(Order o : orders) {
            if(o.getCustomer().equals(customer)) {
                empty.add(o);
            }
        }
        
        return empty;
    }
    
    /**
     * Displays all the orders made by the customer. Show the customer's whole name at the top of the list
     * and the total value of the order at the bottom of the list - 3 marks
     */
    public void displayOrders(Customer customer)
    {
        for(Order o : orders) {
            if(o.getCustomer().equals(customer) {
                
            }
        }
    }    
    
    /**
     * Returns the order with id number equal to orderID. Returns null if no order matches orderID - 2 marks
     */
    public Order getOrder(int orderID)
    {
        return null;
    }
    
    /**
     * Removes the order with id number equal to orderID - 2 marks
     */
    public void removeOrder(int orderID)
    {
        
    }
    
    /**
     * Removes all order over the credit limit made by the customer - 4 marks
     */
    public void removeOrders(Customer customer, double limit)
    {
        
    }
    
}