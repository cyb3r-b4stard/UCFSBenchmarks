
/**
 *## ###### ######## ## ############ ######## # ### ######## ##### 
 *####, #########, ###### ##### ##### ######### ### ######## #########
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Studente
{
   private String Nome ;
   private String Matr ;
    private Esame[] esame; 
   private int esameSize; 
   

    
    public Studente(String unNome , String unaMatr)
    
    {
      if (unNome == null || unaMatr == null)
         throw new IllegalArgumentException();
        Nome = unNome;
        Matr = unaMatr;
         esame = new Esame[1];
      esameSize = 0;
        
        
    }

    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public void aggiungiEsame (Esame unEsame)
    {
       if (unEsame == null)
         throw new IllegalArgumentException();


      if (esameSize >= esame.length)
      {
         Esame[] newEsame = new Esame[2 * esame.length];
         for (int i = 0; i < esame.length; i++)
            newEsame[i] = esame[i];

         esame = newEsame;
      esame[esameSize] = unEsame;
      esameSize++;
      }
      /**
      verifica se la lista di esami e' vuoto
      @return true se la lista di esami e' vuoto, false altrimenti
   */
   public boolean isEmpty()
   {
      return esameSize == 0;
   }
   
   public double media()
   { 
       if (isEmpty() )
        return 0;
        
        double sum = 0;
        for (int i=0 ; i< esameSiza ; i++)
        sum = sum + esame[i].getVoto() ;
        return sum / esameSize;
        
    }
      public int numeroEsami()
   {
      return esameSize;
   }
    public String toString()
   {
      String str = "matr.: " + matr + ", nome: " + nome + "\n";
      str = str + "n. " + numeroEsami() + " esami sostenuti\n";
      for (int i = 0; i < esameSize; i++)
          str = str + " " + (i+1) + ") " + esame[i] + "\n";

      return str + "\n";
   }
   
    }
}