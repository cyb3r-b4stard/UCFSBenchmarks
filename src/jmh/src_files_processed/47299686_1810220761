import java.util.*;

public class SortDriver
{
    private long steps;

    public SortDriver()
    {
        steps = 0;
    }

    public static void driver()
    {
        SortDriver a = new SortDriver();
        a.go();
    }

    public void go()
    {   
        int choice = 0;
        while (choice < 7)
        {
            Scanner keys = new Scanner(System.in);
            System.out.println("enter number of items");
            int size = keys.nextInt();
            int[] list = generateList(size);
            print(list);

            System.out.println("\n1 Bubble,     2 Sort1,        3 Sort2");
            System.out.println("4 MergeSort,    5 Binary Search,    6 Sequential Search,     7 Quit\n");
            choice = keys.nextInt();
            if (choice == 1)
                bubbleSort(list);
            else if (choice == 2)
                sort1(list);
            else if (choice == 3)
                sort2(list);
            else if (choice == 4)
                mergeSort(list, 0, list.length - 1);
            else if (choice == 5 || choice == 6)
                search(list, choice);
            if (choice < 7)
                print(list);
        }
    }

    public int[] generateList(int size)
    {
        steps= 0;
        int[] list = new int[size];
        for (int i = 0; i < size; i++) 
            list[i] = (int)(Math.random() * size * 5 + 1);
        return list;    
    }

    public void print(int[] list)
    {
        if (steps > 0)
            System.out.println("This sort took " + steps + " steps to sort " + list.length + " numbers");
        if (list.length <= 100)
        {
            for (int i = 0; i < list.length; i++)
                System.out.print(list[i] + " ");
        }       
        System.out.println();
    }

    public void bubbleSort(int[] list, int )
    {
        System.out.println("Bubble Sort");
        steps++;                                
        for (int outer = list.length - 1; outer >= 0 ; outer--)
        {
            steps += 3;                         
            for(int inner = 0; inner < outer; inner++)
            {
                steps += 3;                     
                if (list[inner] > list[inner + 1])
                {
                    steps++;                    
                    swap(list, inner, inner + 1);
                }
            }
        }
    }

    public void sort1(int[] list)
    {
        System.out.println("Selection Sort");  
        steps++;
        for ( int inner = 0; inner < list.length - 1; inner++)
        {
            steps +=3;
            for (int outer = inner + 1; outer < list.length; outer++)
            {
                steps+=3;
                if (list[inner] > list[outer]
                {
                    steps++;
                    swap (list, outer, inner);
                }
            }
        }
    }

    public void sort2(int[] list)
    {
        System.out.println("Insertion Sort");
        steps++;
        for (int i = 1; i < list.length; i++)
        {
            steps +3;
            for (int compare = i - 1; compare >= 0; compare++)
            {
                if (list[i] < list[compare])
                {
                    steps ++;
                    swap (list, compare, i)
                    i--;
                }
            }
        }
    }

    public void swap (int[] list, int a, int b)
    {
        steps += 3;         
        int temp = list[a];
        list[a] = list[b];
        list[b] = temp;
    }

    public void mergeSort(int[] list, int first, int last)
    {
        int mid = (first + last) /2;
        bubble(list, first, mid);
        bubble(list, mid + 1, last);
        merge(list, first, mid, last);
    }

    public void merge(int[] list, int first, int mid, int last)
    {
        int [] merged = new int [list.length];
        int list1 = 0;
        int list2 = mid + 1;
        for (int i = 0; i<  merged.length; i++)
        {
            merged[i]= 
        }
    }

    public void search(int[] list, int choice)
    {
        Scanner keys = new Scanner(System.in);
        System.out.println("Enter an item to search for");
        int value = keys.nextInt();
        int spot;
        if (choice == 5)
            spot = binarySearch(list, value);
        else
            spot = sequentialSearch(list, value);

        if (spot >= 0) 
            System.out.println(value + " is at spot " + spot);
        else
            System.out.println("value is not in the list");
    }

    public int binarySearch(int[] list, int value)
    {

    }

    public int sequentialSearch(int[] list, int value)
    {
        for (int i = 0; i < list.length; i++)
        {
            if ( list[i] == value)
            {
                return i; 
            }
        }
    }