/**
 * ########### ### ################ #######-#######.
 * ### ############### #### ## ########## ####### #############.
 * ###### ### ### ########## ###### ##### ####### ##########.
 * @####### #.#
 * @###### ###
 */
public class IArr {
    
    /**   
     * Bestimmt die Position des Minimums im Array a
     * @param a Array in dem das Minimum gesucht wird
     * @return Indexposition des Minimums
     */
    public static int minPos(int[] a) {
       int min=Integer.MAX_VALUE;
       int pos= -1;
       for(int i=0;i<a.length;i++){
           if (a[i]<=min){
            min=a[i];
            pos=i;
            }
    }
    return pos;
}
    /**
     * Bestimmt die Position des Maximums von a
     * @param a Array in dem gesucht wird
     * @return Indexposition des Maximums von a
     */
    public static int maxPos(int[] a) {
        int max=Integer.MIN_VALUE;
        int pos=-1;
        for(int i=0;i<a.length;i++){
            if(a[i]>=max){
                max=a[i];
                pos=i;
            }
        }
        return pos;
    }
    
    /**
     * Bestimm das Maximum von a
     * @param a Array in dem das Maximum gesucht wird
     * @return Maximum von a
     */
    public static int max(int[] a){
        int max=Integer.MIN_VALUE;
        int pos=-1;
        for(int i=0;i<a.length;i++){
            if(a[i]>=max){
                max=a[i];
                pos=i;
            }
        }
        return max;
    }

    /**
     * Bestimmt das Minimum von a
     * @param a Array in dem das Minimum gesucht wird
     * @return Minimum von a
     */
    public static int min(int[] a){
        int min=Integer.MAX_VALUE;
        int pos=-1;
        for(int i=0;i<a.length;i++){
            if(a[i]<=min){
                min=a[i];
                pos=i;
            }
        }
        return min;
    }

    /**
     * Bestimmt die Position des Elementes e im Array a
     * @param a Array in dem gesucht wird
     * @param e Element nach dem gesucht wird
     * @return Indexposition von e in a oder -1
     */
    public static int pos(int[] a, int e){
        int pos=-1;
        for(int i=0;i<a.length;i++){
            if(a[i]==e){
                pos=i;
            }
        }
        return pos;
    }

    /**
     * Bestimmt die Position des Elementes e im Array a ab der Indexposition i
     * @param a Array in dem gesucht wird
     * @param e Element nach dem gesucht wird
     * @param i Indexposition (einschliesslich) ab der gesucht wird
     * @return Indexposition von e in a (entweder >= i oder -1)
     */
    public static int pos(int[] a, int e, int i){
        int pos=-1;
        for(int j=i;j<a.length ;j++){
            if(a[j]==e)
            {
                pos=j;
        }
    }
        
        return pos;
    }
    
    /**
     * Summe aller Elemente von a
     * @param a Feld dessen Elemente summiert werden
     * @return Summe der Elemente von a
     */
    public static long sum(int[] a) {
        long summe=0;
        for(int i=0;i<a.length;i++){
            summe=summe+a[i];
        }
        return summe;
    }

    /**
     * Summiert n Elemente des Arrays a ab der Indexposition a[i]
     * @param a Array dessen Elemente summiert werden
     * @param i Indexposition des ersten Summanden
     * @param n Anzahl der Elemente die summiert werden
     * @return Summe von a[i]+a[i+1]+...
     */
    public static long sum(int[] a, int i, int n) {
        long summe =0;
        for(int j=i;j<a.length && j<n+i;j++){
            summe=summe+a[j];
        }
        
        return summe;
    }
    
    /**
     * Berechnet den arithmetischen Mittelwert des Arrays a
     * @param a Array dessen Mittelwert gebildet wird
     * @return Mittelwert des Arrays a
     */
    public static int avg(int[] a) {
        int durchschnitt=0;
        int summe=0;
        for(int i=0;i<a.length;i++){
            summe=summe+a[i];
        }
        durchschnitt =summe/a.length;
        
        return durchschnitt;
    }
    
    /**
     * Erzeugt ein neues Feld und fuellt es mit den Werten von a
     * @param a Feld das dupliziert wird
     * @return Duplikat von a
     */
    public static int[] clone(int[] a){
        int []acopy;
        for(int i=0;i<a.length;i++){
            acopy=a[i];
        }
        return []copy;
    }
    
    /**
     * Fuellt das Array a vollstaendig mit dem Wert wert
     * @param a Array das mit Werten gefuellt wird
     * @param wert Wert mit dem das Array gefuellt wird
     */
    public static void fill(int[] a, int wert) {
        
    }
    
    /**
     * Fuellt n-Elemente des Arrays a ab der Indexposition i mit dem Wert wert
     * @param a Array in dem Werte ueberschrieben werden
     * @param wert Wert mit dem ein Teil von a ueberschrieben wird
     * @param i Indexposition (einschliesslich) ab dem ueberschrieben wird
     * @param n Anzahl der Elemente von a die ueberschrieben werden
     */
    public static void fill(int[] a, int wert, int i, int n) {

    }
    
    /**
     * Kopiert den Inhalt des Arrays quelle vollstaendig in das Array ziel.
     * Die Laenge von ziel muss groesser oder gleich der Laenge von quelle sein.
     * @param quelle Array aus dem gelesen wird
     * @param ziel Array in das geschrieben wird
     */
    public static void copy(int[] quelle, int[] ziel) {
        
    }
    
    /**
     * Kopiert ab der Quellposition qi n Elemente des Arrays Quelle auf die Positionen
     * ab zi im Array Ziel
     * @param quelle Array aus dem gelesen wird
     * @param qi Quellposition ab der gelesen wird
     * @param ziel Array in das geschrieben wird
     * @param zi Zielposition ab der geschrieben wird
     * @param n Anzahl der Elemente die kopiert werden
     */
    public static void copy(int[] quelle, int qi, int[] ziel, int zi, int n){
       
    }
    
    /**
     * Begrenzt die Werte des Arrays a auf den Bereich [min, max]. Elemente die 
     * ausserhalb dieses Bereiches liegen werden durch min bzw. max ersetzt.
     * 
     * Beispiel:<PRE>
     * int[] ba = {-1,0,1,2};
     * limit(ba,0,1);  
     * @param a Array dessen Elemente eingegrenzt werden sollen
     * @param min Untere zulaessige Grenze
     * @param max Obere zulaessige Grenze
     */
    public static void limit(int[] a, int min, int max) {

    }
    
    /**
     * Erzeugt ein neues Array mit dem Inhalt von a und dem Element e
     * @param a Array dessen Inhalt uebernommen werden soll
     * @param e Element das an das neue Array angehaengt werden soll
     * @return Neues Array mit dem Aufbau { a[0], a[1], ..., e}
     */
    public static int[] append(int[] a, int e) {
       
        return null;
    }
    
    /**
     * Erzeugt ein neues Array aus dem Array a und dem Element e. Das neue Element e
     * wird an der Stelle i des alten Arrays eingefuegt.
     * 
     * Beispiel:<PRE>
     * int[] ba1 = {0,1,2,3};
     * int[] ba2 = insert(ba1, 4, 2);  
     * </PRE>
     * @param a Feld dessen Werte uebernommen werden
     * @param e Element das eingefuegt werden soll
     * @param i Position an der eingefuegt werden soll
     * @return Neues Feld das e und die Werte von a enthaelt
     */
    public static int[] insert(int[] a, int e, int i) {

        return null;
    }
    
    /**
     * Erzeugt ein neues Feld in dem des i-te Element von a geloescht ist.
     * @param a Feld dessen Elemente uebernommen werden sollen
     * @param i Position des Elementes, dass nicht uebernommen wird
     * @return neues kleineres Feld
     */
    public static int[] delete(int[] a, int i) {
        
        return null;
    }
    
    /**
     * Vertauchst im Array a die Werte a[i] und a[k]
     * @param a Feld in dem Werte vertauscht werden
     * @param i 1. Tauschposition
     * @param k 2. Tauschposition
     */
    public static void swap(int[] a, int i, int k) {
       
    }
    
    /**
     * Kehrt die Reihenfolge der Elemente von a um
     * @param a Feld dessen Elemente neu geordnet werden
     */
    public static void reverse(int[] a) {
        
    }
    
    /**
     * Sortiert die Elemente des Feldes a in aufsteigender Reihenfolge
     * @param a Feld das sortiert wird
     */
    public static void sort(int[] a) {
        
    }

    /**
     * Sortiert das Array key in Aufsteigender Reihenfolge. Alle Tauschvorgaenge werden
     * dabei auch auf das Array value uebertragen.
     * 
     * Beispiel:<PRE>
     *    int[] ak = {3,1,5,2};
     *    int[] av = {0,1,2,3};
     *    sort(ak,av);  
     * </PRE>
     * @param key Array das aufsteigend sortiert wird
     * @param value Array in dem identische Tauschvorgaenge ausgefuehrt werden
     */
    public static void sort(int[] key, int[] value) {
   
    }
    
    /**
     * Zaehlt wie haeufig ein Wert aus dem Array "keys" in dem Array values vorkommt.
     * 
     * Beispiel:<PRE>
     *   int[] av = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 2, 4, 6, 8, 2};
     *   int[] ak = { 2, 1, 2, 0, 10};
     *   int[] ac = count(av, ak);   
     *                               
     * </PRE>
     * @param values Feld in dem nach dem Vorkommen von Werten aus keys gesucht wird
     * @param keys   Die Werte nach denen in values gesucht wird
     * @return Feld mit der Zahlen wie oft ein Wert aus keys in value vorkommt
     */
    public static int[] count(int[] values, int[] keys){
        
        return null;
    }
}