
/**
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * ########-##### ## #### #####. ### ##### ##### ##### ### #######. ### 
 * ##### ## ### ##### ## ##:## (########) ## ##:## (### ###### ###### 
 * ########).
 * 
 * ### ##### ####### ######## "#####" (### ### ######## ######) ##### ######
 * ### ###### ## ############ ### #######. #### ## #### ## ### ##### #####
 * #######: ### #### ########## #### ### ####### #### #### ## ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class ClockDisplay
{
    private NumberDisplay hours;
    private NumberDisplay minutes;
    private NumberDisplay months;
    private NumberDisplay day;
    private String displayString;    
    
    /**
     * Constructor for ClockDisplay objects. This constructor 
     * creates a new clock set at 00:00.
     */
    public ClockDisplay()
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        months = new NumberDisplay(12);
        day = new NumberDisplay(31);
        
        updateDisplay();
    }

    /**
     * Constructor for ClockDisplay objects. This constructor
     * creates a new clock set at the time specified by the 
     * parameters.
     */
    public ClockDisplay(int hr, int min, int mon, int da)
    {
        hours = new NumberDisplay(24);
        minutes = new NumberDisplay(60);
        months = new NumberDisplay(12);
        day = new NumberDisplay(31);
        setTime(hr, min, mon, da);
    }

    /**
     * This method should get called once every minute - it makes
     * the clock display go one minute forward.
     */
    public void timeTick()
    {
        minutes.increment();
        if(minutes.getValue() == 0) {  
            hours.increment();}
            if(hours.getValue() == 0) {  
            day.increment();}
            if(day.getValue() == 0) {  
            months.increment();}
            if(day.getValue() == 27 && months.getValue() == 1){
            months.increment();
            day.setValue(0);}
            if(day.getValue() == 29 && months.getValue() == 3 ||months.getValue() == 5 ||months.getValue() == 8 ||months.getValue() == 10){
            months.increment();
        
        updateDisplay();
    }

    /**
     * Set the time of the display to the specified hour and
     * minute.
     */
    
    public void setTime(int hr, int min, int mo, int da)
    {
        hours.setValue(hr);
        minutes.setValue(min);
        months.setValue(mo);
        day.setValue(da);
        updateDisplay();
    }

    /**
     * Return the current time of this display in the format HH:MM.
     */
    public String getTime()
    {
        return displayString;
    }
    
    /**
     * Update the internal string that represents the display.
     */
    private void updateDisplay()
    {
        displayString = hours.getDisplayValue() + ":" + 
                        minutes.getDisplayValue()+" " +
                        months.getDisplayValue() + 1 + "/" +
                        day.getDisplayValue() + 1;
    }
}