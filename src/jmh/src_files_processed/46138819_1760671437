
/**
 * ##### # ########### ## ##### ###### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Test13
{
    public static void Main()
    {
        int[4][4] a;
        a[0] = {8,4,2,4,3};
        a[1] = {6,3,8,4,5};
        a[2] = {1,4,9,9,7};
        a[3] = {2,1,7,6, 5};
       printPathWeights(a);
    }
   
    
    
    public static void printArray(int[] arr)
    {
        for(int i = 0; i < arr.length; i++)
        {
            System.out.print(arr[i] + " , ");
        }
    }
    
    public static void crossSort(int[] arr)
    {
        for(int i = 0; i < arr.length; i++)
        {
            for(int j = i; j < arr.length - 1; j++)
            {
                if(arr[j] > arr[j + 1])
                {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
    

    
    public static void printPathWeights(int[][] m)
    {
        printPathWeights(m, 0, 0);
    }
    
    private static int printPathWeights(int[][] a, int i, int j)
    {
        if(i == a[0].length && j == a.length) {
            return a[i][j];
        }
        if(i == a[0].length)
        {
            j++;
            i--;
            return a[i][j];
        }
        
        if(j == a.length)
        {
            j--;
            i++;
            return a[i][j];
        }
        
        int c = printPathWeights(a, i + 1, j);  
        int b = printPathWeights(a, i, j++);
        return c + b;
        
       
    }

}