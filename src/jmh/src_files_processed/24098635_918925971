
/**
 * ##### # ########### ## ##### ############## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class PalFinderArray
{
    private char []  chArray;
    /**
     * Constructor for objects of class PalFinderArray
     */
    public PalFinderArray(){
    }
    
    public PalFinderArray(char [] c){
        chArray = c;
    }

    public PalFinderArray LowCase(){
        int counter = 0;
        while(counter < this.chArray.length){
            if(Character.isLetter(this.chArray[counter]) && Character.isUpperCase(this.chArray[counter])){
                this.chArray[counter] = Character.toLowerCase(this.chArray[counter]);
         }
         counter++;
        }
        return new PalFinderArray(this.chArray);
    }
    public String ToString(){
       PalFinderArray temp = this.LowCase();
       String tostrip = new String(temp.chArray);
       String strung = "";
       int counter = 0;
        while(counter < temp.chArray.length){
            if(temp.chArray[counter] >= 'a' && temp.chArray[counter] <= 'z'){
                strung = strung + temp.chArray[counter];
            }
            counter++;
        }
        return new String (strung);
    }
        public boolean IsPal(){
            String str = this.ToString();
           char[] tester = str.toCharArray();
           int front = 0;
           int back = tester.length;
            while (front < back){
               if(tester[front] !== tester[back]{
                   return false;
               }
               else if(tester[front == tester[back]{
                   front++;
                   back--;
                }
        
            }
            return true;
    }
}






