/*
 *
 * @######: ####
 * @#######: ####### ####
 */

public class LibMath {

    
   
    /*
     * @pre -
     * @post A teste la methode somme_des_diviseurs
     */
    public static void test_somme_des_diviseurs() {

	double a=12.0;
	int erreur=0;

	if(somme_des_diviseurs(a)!=28) {
	    System.out.println("Erreur : somme des diviseurs (a) !=28");
	    erreur++;
	}
	

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode somme_des_diviseurs");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode somme_des_diviseurs");
	}

    }
     /*
     * 
     * 
     */
    public class int somme_des_diviseurs(int a) {
        int y = 0;
        For (int i=1;i == a;i=i+1) {
        if(a % i == 0) {
          y = y + i;    
        }
        return y;
       }
    
    }
    public static int nombre_de_diviseurs(int a) {
        int y = 0;
        For (i=1, i=a, i++);
        if(a%i==0){
          y = y+1;  
        }
        return y; 
    }
    /*
     * @pre -
     * @post A teste la methode nombre_de_diviseurs
     */
    public static void test_nombre_de_diviseurs() {

	double a=12.0;
	int erreur=0;

	if(nombre_de_diviseurs(a)!=6) {
	    System.out.println("Erreur : nombre de diviseurs (a) !=6");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode nombre_de_diviseurs");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode nombre_de_diviseurs");
	}

    }
    
    public static boolean parfait(int b) {
        int c = 2*b;
        if (somme_des_diviseurs (b) == c)
        return true;
    }
    /*
     * @pre -
     * @post A teste la methode parfait
     */
    public static boolean test_parfait() {

	int b=6;
	int erreur=0;

	if(parfait(b)=false) {
	    System.out.println("Erreur : 6 n'est pas parfait");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode parfait");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode parfait");
	}

    }
    public static boolean sublime (int a) {
        if((parfait(somme_des_diviseurs(a))=true) && (parfait(nombre_de_diviseurs(a))=true))
        return true;
    }
    /*
     * @pre -
     * @post A teste la methode sublime
     */
    public static boolean test_sublime() {

	int b=12;
	int erreur=0;

	if(sublime(b)=false) {
	    System.out.println("Erreur : 12 n'est pas parfait");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode parfait");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode parfait");
	}

    }

    public static double minimum(double a, double b, double c) {
        Double x;
        x = Math.min(a,b);
        Double y;
        y = Math.min(x,c);
        return y;
      
    }   
    /*
     * @pre -
     * @post A teste la methode minimum
     */
    public static void test_minimum() {

	double a=1.0;
	double b=2.0;
	double c=3.0;
	int erreur=0;

	if(minimum(a,b,c)!=1.0) {
	    System.out.println("Erreur : minimum(1.0,2.0,3.0)!=1.0");
	    erreur++;
	}

	if(minimum(a,a,a)!=1.0) {
	    System.out.println("Erreur : minimum(1.0,1.0,1.0)!=1.0");
	    erreur++;
	}

	if(minimum(c,c,c)!=3.0) {
	    System.out.println("Erreur : minimum(3.0,3.0,3.0)!=3.0");
	    erreur++;
	}

	if(minimum(c,b,a)!=1.0) {
	    System.out.println("Erreur : minimum(3.0,2.0,1.0)!=1.0");
	    erreur++;
	}

	if(minimum(c,b,c)!=2.0) {
	    System.out.println("Erreur : minimum(3.0,2.0,3.0)!=2.0");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode minimum");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode minimum");
	}

    }

    public static double maximum (double a, double b, double c) {
        Double x;
        x = Math.max(a,b);
        Double y;
        y = Math.max(x,c);
        return y;
      
    }
    /*
     * @pre -
     * @post A teste la methode maximum
     */

    public static void test_maximum() {

	double a=1.0;
	double b=2.0;
	double c=3.0;
	int erreur=0;

	if(maximum(a,b,c)!=3.0) {
	    System.out.println("Erreur : maximum(1.0,2.0,3.0)!=3.0");
	    erreur++;
	}

	if(maximum(a,a,a)!=1.0) {
	    System.out.println("Erreur : maximum(1.0,1.0,1.0)!=1.0");
	    erreur++;
	}

	if(maximum(c,c,c)!=3.0) {
	    System.out.println("Erreur : maximum(3.0,3.0,3.0)!=3.0");
	    erreur++;
	}

	if(maximum(c,b,a)!=3.0) {
	    System.out.println("Erreur : maximum(3.0,2.0,1.0)!=3.0");
	    erreur++;
	}

	if(maximum(a,b,a)!=2.0) {
	    System.out.println("Erreur : maximum(1.0,2.0,1.0)!=2.0");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode maximum");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode maximum");
	}
	
    }

    public static double average (double a,double b, double c) {
        double moyenne;
        moyenne = ((a+b+c)/3);
        return moyenne;
    }
    
    /*
     * @pre -
     * @post A teste la methode average
     */
    public static void test_average() {

	double a=1.0;
	double b=2.0;
	double c=3.0;
	int erreur=0;

	if(average(a,b,c)!=2.0) {
	    System.out.println("Erreur : average(1.0,2.0,3.0)!=2.0");
	    erreur++;
	}

	if(average(a,a,a)!=1.0) {
	    System.out.println("Erreur : average(1.0,1.0,1.0)!=1.0");
	    erreur++;
	}

	if(average(c,c,c)!=3.0) {
	    System.out.println("Erreur : average(3.0,3.0,3.0)!=3.0");
	    erreur++;
	}

	if(average(c,b,a)!=2.0) {
	    System.out.println("Erreur : average(3.0,2.0,1.0)!=2.0");
	    erreur++;
	}

	if(average(a,b,a)!=1.3333333333333333) {
	    System.out.println("Erreur : average(1.0,2.0,1.0)!=1.3333333333333333");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode average");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode average");
	}
	
    }


    public static double median (double a, double b, double c) {
        Double x;
        x = minimum(a,b,c);
        Double y;
        y = maximum(a,b,c);
        if( a!=x && a!=y)
        return a;
        if( b!=x && b!=y)
        return b;
        if( c!=x && c!=y)
        return c;
    }
    /*
     * @pre -
     * @post A teste la methode median
     */
    public static void test_median() {

	double a=1.0;
	double b=2.0;
	double c=3.0;
	int erreur=0;

	if(median(a,b,c)!=2.0) {
	    System.out.println("Erreur : median(1.0,2.0,3.0)!=2.0");
	    erreur++;
	}

	if(median(a,a,a)!=1.0) {
	    System.out.println("Erreur : median(1.0,1.0,1.0)!=1.0");
	    erreur++;
	}

	if(median(c,c,c)!=3.0) {
	    System.out.println("Erreur : median(3.0,3.0,3.0)!=3.0");
	    erreur++;
	}

	if(median(c,b,a)!=2.0) {
	    System.out.println("Erreur : median(3.0,2.0,1.0)!=2.0");
	    erreur++;
	}

	if(median(a,b,a)!=1.0) {
	    System.out.println("Erreur : median(1.0,2.0,1.0)!=1.0");
	    erreur++;
	}

	if(erreur==0) {
	    System.out.println("Aucune erreur n'a ete trouvee en utilisant la methode median");
	}
	else {
	    System.out.print(erreur);
	    System.out.print(" erreurs ont ete trouvees en utilisant la methode median");
	}
	
    }


    public static void main (String[] args) {


	test_minimum();
	test_maximum();
	test_average();
	test_median();

    }


}