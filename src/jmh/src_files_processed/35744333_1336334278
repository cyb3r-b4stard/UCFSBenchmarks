
/**
 * ##### # ########### ## ##### ######## ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Practica
{
    Nodo raiz;
    
    public Practica()
    {
        raiz = new Nodo();
    }
    
    public void guardar(int dato)
    {
        guardarR(dato, raiz);
    }
    private void guardarR(int dato, Nodo tmp)
    {
        if(tmp.sig == null){
            Nodo n = new Nodo();
            n.dato = dato;
            tmp.sig = n;
        }   
        else{
            guardarR(dato, tmp.sig);
        }
    }
    
    
     @Override
    public String toString()
    {
        return toStringR(raiz);
    }
    
    private String toStringR(Nodo tmp)
    {
        if(tmp == null)
            return "X";
        else
            return tmp.toString() + toStringR(tmp.sig);
    }
    
    /*
    public int eliminarDato()
    {
        
    }
    private void eliminarDatoR(int dato, Nodo tmp)
    {
        NodoDoble tmp = raiz;
        while (tmp.sig != null && (valor.sig.dato > dato)) {
            tmp = tmp.sig;
        }
        Nodo n = new Nodo();
        n.dato = valor;
        n.sig = tmp.sig;
        n.ant = tmp;
        tmp.sig = n;
        if (n.sig != null) {
            n.sig.ant = n;
        }
    }
    */
   public void eliminarnodo(int dato, Nodo tmp)
   {    
       Nodo n = new Nodo();
       
       while(tmp.dato > dato){
           tmp == null;
           tmp = tmp.sig;
           
        }
        
    }
}