package Unit_5;
import java.util.Arrays;
/**
 * ##### #### ## ####### ## ## #########
 * 
 * @###### #### ########
 * @####### ### ##, ####
 */
public class FranklinLab21
{
    public static void main(){
        double polynomial[] = { 0 , 1 , 2 }; 
        double disciminant = discriminant(polynomial);
        
        double quadraticEquation[] = quadraticEquation(polynomial);
    }
    
    /**
    * Method 1
    * 
    * Will determine the discriminant of a polynomial. ax2 + bx + c = 0
    * @param polynomial a double array, { a , b , c }
    * @return A double equal to b2 - 4ac
    * */
    public static double discriminant( double polynomial[] ){
        return Math.pow(polynomial[1], 2) - (4 * polynomial[0] * polynomial[2]);
    }
    
    /**
    * Method 2
    * 
    * The quadtraticEquationWill determine the 2 possible solutions to a polynomial. ax2 + bx + c = 0
    * This method will call the discriminant to determine if the polynomial can be factored
    * ( -b ± √ discriminant ) / (2a)
    * @param polynomial a double array, { a , b , c }
    * @return A double[] that contains the two possible solutions for the polynomial. 
    *         if no solution is possible, will return both values in the array as NaN
    */
    public static double[] quadraticEquation(double polynomial[] ){
        double d = discriminant(polynomial) ;
        double qe[] = new double[2];
        if( d > 0 ) 
        {
            qe[0] =  (-polynomial[1] + Math.sqrt(d)/(2*polynomial[0]));
            qe[1] =  (-polynomial[1] - Math.sqrt(d))/(2*polynomial[0]);
            return qe;
        }
        else if( d == 0 ) 
        {
            qe[0] = (-polynomial[1] + Math.sqrt(d)/(2*polynomial[0]);
            qe[1] = Double.NaN;
            return qe;
        }
        else  
        {
            return Double.NaN;
            return Double.NaN;
        }
    }
}