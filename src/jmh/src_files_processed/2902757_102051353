
/**
 * ##### # ########### ## ##### ####### ####.
 * 
 * @###### (##### #####) 
 * @####### (# ####### ###### ## # ####)
 */
public class breuken
{
    private int teller;
    private int noemer;

    /**
     * Constructor for objects of class breuken
     */
    public breuken()
    {
        teller = 0;
        noemer = 1;
    }
    
    public breuken(int teller, int noemer)
    {
        this.teller = teller;
        this.noemer = noemer;
    }

    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    public breuken optellen(breuken o2)
    {
        int uitkomstTeller;
        int uitkomstNoemer;
        int vermenigvuldigNoemers;
        int vermenigvuldigTeller1;
        int vermenigvuldigTeller2;
        vermenigvuldigNoemers = noemer * o2.noemer;
        uitkomstNoemer = vermenigvuldigNoemers;
        vermenigvuldigTeller1 = teller * o2.noemer;
        vermenigvuldigTeller2 = o2.teller * noemer;
        uitkomstTeller = vermenigvuldigTeller1 + vermenigvuldigTeller2;
        breuken uitkomst = new breuken(uitkomstTeller, uitkomstNoemer);
        return uitkomst;
    }
    
    public breuken aftrekken(breuken o2)
    { 
        int uitkomstTeller;
        int uitkomstNoemer;
        int vermenigvuldigNoemers = noemer * o2.noemer;
        int vermenigvuldigTeller1 = teller * o2.noemer;
        int vermenigvuldigTeller2 = o2.teller * noemer;
        uitkomstNoemer = vermenigvuldigNoemers;
        uitkomstTeller = vermenigvuldigTeller1 - vermenigvuldigTeller2;
        breuken uitkomst = new breuken(uitkomstTeller, uitkomstNoemer);
        return uitkomst;
    }
    
    public breuken vermenigvuldig(breuken o2)
    {
        int uitkomstTeller = teller * o2.teller:
        int uitkomstNoemer = noemer * o2.noemer;
        breuken uitkomst = new breuken(uitkomstTeller, uitkomstNoemer;)
    }
}