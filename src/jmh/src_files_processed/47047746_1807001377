import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.stream.Collectors;

/**
 * ####### ###### ## ######### ##### ## ######.
 * ######### ### ######## ## ########.
 * 
 * @###### ##### #. ###### ### ####### #######
 * @####### ####.##.## (##########)
 */
public class AnimalMonitor 
{
    private ArrayList<Sighting> sightings;
    
    /**
     * Create an AnimalMonitor.
     */
    public AnimalMonitor()
    {
        this.sightings = new ArrayList<>();
    }
    
    /**
     * Add the sightings recorded in the given filename to the current list.
     * @param filename A CSV file of Sighting records.
     */
    public void addSightings(String filename)
    {
        SightingReader reader = new SightingReader();
        sightings.addAll(reader.getSightings(filename));
    }
    
    /**
     * Print details of all the sightings.
     */
    public void printList()
    {
        sightings.stream().forEach(record -> System.out.println(record.getDetails()));
        System.out.println("---------------------LINE BREAK--------------------");
    }
    
    public void printSpotted(){
        sightings.stream().filter(record-> record.getCount() > 0).forEach(record -> System.out.println(record.getDetails()));
    }
    
    /**
     * Print the details of all the sightings of the given animal.
     * @param animal The type of animal.
     */
    public void printSightingsOf(String animal)
    {
        sightings.stream().filter(record -> record.getAnimal().equalsIgnoreCase(animal)).forEach(record -> System.out.println(record.getDetails()));
    }
    
    public void printSightingsOnDay(int day){
        sightings.stream().filter(record -> record.getPeriod() == day).forEach(record -> System.out.println(record.getDetails()));
    }
    
    public void printSightingOfAnimalOnDay(String animal, int day){
        sightings.stream().filter(record -> record.getPeriod() == day).filter(record -> record.getAnimal().equalsIgnoreCase(animal)).forEach(record -> System.out.println(record.getDetails()));
    }
    
    /**
     * Print all the sightings by the given spotter.
     * @param spotter The ID of the spotter.
     */
    public void printSightingsBy(int spotter)
    {
        sightings.stream().filter(record -> record.getSpotter() == spotter).map(record -> record.getDetails()).forEach(details -> System.out.println(details));       
    }
    
    public void printNumberOfSpottings(String animal){
        sightings.stream().filter(record -> record.getAnimal().equals(animal)).map(record -> record.getCount() > 0).forEach(System.out:: println);
    }
    
    public int getCount(String animal)
    {
        return sightings.stream()
                        .filter(record -> record.getAnimal().equals(animal))
                        .map(record -> record.getCount())
                        .reduce(0, (total, count) -> total + count);
    }
    
    /**
     * Print a list of the types of animal considered to be endangered.
     * @param animalNames A list of animals names.
     * @param dangerThreshold Counts less-than or equal-to to this level
     *                        are considered to be dangerous.
     */
    public void printEndangered(ArrayList<String> animalNames, 
                                int dangerThreshold)
    {
        for(String animal : animalNames) {
            if(getCount(animal) <= dangerThreshold) {
                System.out.println(animal + " is endangered.");
            }
        }
    }
    
    public int spotterCount(String animal, int spotterID, int dayID){
        return sightings.stream()
                .filter(record -> record.getAnimal().equals(animal))
                .filter(record -> record.getSpotter() == spotterID)
                .map(record -> record.getPeriod())
                .reduce(0, (total, count) -> total + count);
        
    }
    
    
    /**
     * Return a count of the number of sightings of the given animal.
     * @param animal The type of animal.
     * @return The count of sightings of the given animal.
     
    public int getCount(String animal)
    {
        int total = 0;
        for(Sighting sighting : sightings) {
            if(animal.equals(sighting.getAnimal())) {
                total = total + sighting.getCount();
            }
        }
        return total;
    }
    
    */
    
    /**
     * Remove from the sightings list all of those records with
     * a count of zero.
     */
    public void removeZeroCounts()
    {
        Iterator<Sighting> it = sightings.iterator();
        while(it.hasNext()) {
            Sighting record = it.next();
            if(record.getCount() == 0) {
                it.remove();
            }
        }
    }
    
    /**
     * Return a list of all sightings of the given type of animal
     * in a particular area.
     * @param animal The type of animal.
     * @param area The ID of the area.
     * @return A list of sightings.
     */
    public List<Sighting> getSightingsInArea(String animal, int area)
    {
        return sightings.stream()
                            .filter(record -> animal.equals(record.getAnimal()))
                            .map(record -> record.getArea() == area)
                            .collect(Collectors.toList());
    }
    
    /**
     * Return a list of all the sightings of the given animal.
     * @param animal The type of animal.
     * @return A list of all sightings of the given animal.
     */
    public List<Sighting> getSightingsOf(String animal)
    {
        return sightings.stream()
                            .filter(record -> animal.equals(record.getAnimal()))
                            .collect(Collectors.toList());
    }
    
}