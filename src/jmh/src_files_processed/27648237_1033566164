public class IntArrayPrograms
{
    public static int end9(int[]a, int[]b)
    {
        int count=0;
        if(a[a.length-1]==9)
        {
            count++;
        }
        else
        {
            count+=0;
        }
        if(b[b.length-1]==9)
        {
            count++;
        }
        else
        {
            count+=0;
        }
        return count;
    }
    public static int[] swapEnds(int[] arr)
    {
        int firstarr= arr[0];
        int lastarr= arr[arr.length-1];
        arr[0]=lastarr;
        arr[arr.length-1]= firstarr;
        return arr;
    }
    public static int[] addA9(int[] arr)
    {
        int []arar= new int[arr.length+1];
        for(int i=0; i<arr.length; i++)
        {
            int thing= arr[i];
            arar[i]=thing;
        }
        arar[arr.length]=9;
        return arar;
    }
    public static boolean identicalArrays(int[] a, int[] b)
    {
        boolean what= true;
        int thing=0;
        if(a.length>=b.length)
        {
            thing=a.length;
        }
        else
        {
            thing=b.length;
        }
        
        for(int i=0; i<thing; i++)
        {
            if(a[i]==b[i])
            {
                what = true;
            }
            else
            {
                return false;
            }
        }
        return what;
    }
     public static boolean isPrime(int val)
    {
        int factors=0;
        for(int i=1;i<=val;i++)
        {
            if(val%i==0)
            {
                factors++;

            }
            
        }
        if(factors==2)
        {
            return true;
        }
        else 
        {
            return false;

        }
    }
    public static boolean containsAPrime(int[] arr)
    {
        boolean what= false;
        for(int i=0; i<arr.length; i++)
        {
            if(isPrime(arr[i])==false)
            {
                what= false;
            }
            if(isPrime(arr[i])==true)
            {
                return true;
            }
        }
        return what;
    }
    public static int biggestDifference(int[] arr)
    {
        int diff=0;
        for(int i=0; i<arr.length-1; i++)
        {
            int thing=0;
            if(arr[i]>=arr[i+1])
            {
                thing= arr[i]-arr[i+1];
            }
            else if(arr[i]<arr[i+1])
            {
                thing= arr[i+1]-arr[i];
            }
            if(thing>=diff)
            {
                diff=thing;
            }
        }
        return diff;
    }
    public static int[] post4(int[] arr)
    {
        int index=0;
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i]==4)
            {
                if(i>index)
                {
                    index=i;
                }
                
            }
        }
        int thing= arr.length-index;
        int []that= new int[thing]it
        for(int i=arr.length-1; i>index; i--)
        {
            int t=0
            that[t]=arr[i];
            t++;
        }
        return that;
    }
}
    
