import java.util.Stack;

/**
 *  #### ##### ## ### #### ##### ## ### "##### ## ####" ###########. 
 *  "##### ## ####" ## # #### ######, #### ##### ######### ####.  ##### 
 *  ### #### ###### #### #######. ####'# ###. ## ###### ###### ## ######## 
 *  ## #### ## #### ###########!
 * 
 *  ## #### #### ####, ###### ## ######## ## #### ##### ### #### ### "####"
 *  ######.
 * 
 *  #### #### ##### ####### ### ########### ### ### ######: ## ####### ###
 *  #####, ####### ### ###### ### ###### ### ####.  ## #### ######### ###
 *  ######## ### ######## #### ### ###### #######.
 * 
 * @######  ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */

public class Game 
{
    private Parser parser;
    private Stack<Room> path;
    private Player player;

    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        player = new Player();
        path = new Stack<>();
        createRooms();
        parser = new Parser();
    }

    /**
     * Create all the rooms and link their exits together.
     */
    private void createRooms()
    {
        Room outside, theater, pub, lab, office, torture_chamber;

        outside = new Room("outside the main entrance of the university");
        theater = new Room("in a lecture theater");
        pub = new Room("in the campus pub");
        lab = new Room("in a computing lab");
        office = new Room("in the computing admin office");
        torture_chamber = new Room("in the torture chamber. Oh wait...");

        outside.setExit("east", theater);
        outside.setExit("south", lab);
        outside.setExit("west", pub);

        theater.setExit("west", outside);
        theater.setExit("down", torture_chamber);

        torture_chamber.setExit("up", theater);
        torture_chamber.addItem("whip", "A whip to punish", 3);
        torture_chamber.addItem("chair", "An electric chair", 40);

        lab.setExit("north", outside);
        lab.setExit("east", office);
        lab.addItem("cookie", "A magic cookie", 1);

        office.setExit("west", lab);
        office.addItem("server", "a server powered off", 15);
        office.addItem("display", "a 19 display", 5);
        
        pub.setExit("east", outside);

        player.setCurrentRoom(outside);  
        player.setMaxWeight(21);
    }

    /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();


        boolean finished = false;
        while (! finished) {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing.  Good bye.");
    }

    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("World of Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        printLocationInfo();
    }

    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help")) {
            printHelp();
        }
        else if (commandWord.equals("go")) {
            goRoom(command);
        }
        else if (commandWord.equals("quit")) {
            wantToQuit = quit(command);
        }
        else if (commandWord.equals("look")) {
            look();
        }
        else if (commandWord.equals("eat")) {
            System.out.println("You have eaten now and you are not hungry anymore");
            
            if (command.getSecondWord().equals("cookie") {
                System.out.println("Max weight increased!!");
                magicCookie();
            }
        }
        else if (commandWord.equals("back")) {
            back();
        }
        else if (commandWord.equals("take")) {
            takeItem(command);
        }
        else if (commandWord.equals("drop")) {
            dropItem(command);
        }
        else if (commandWord.equals("items")) {
            player.printInventoryWeight();
        }

        return wantToQuit;
    }


    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You are lost. You are alone. You wander");
        System.out.println("around at the university.");
        System.out.println();
        System.out.println("Your command words are:");
        System.out.println(parser.showCommands());
    }

    /** 
     * Try to go in one direction. If there is an exit, enter
     * the new room, otherwise print an error message.
     */
    private void goRoom(Command command) 
    {
        if(!command.hasSecondWord()) {
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        Room nextRoom = player.getCurrentRoom().getExit(direction);

        if (nextRoom == null) {
            System.out.println("There is no door!");
        }
        else {
            addToPath();
            player.setCurrentRoom(nextRoom);
            printLocationInfo();
        }
    }
    
    private void takeItem (Command command)
    {
        if (!command.hasSecondWord()) {
            System.out.println("Take what?");
        } else {
            player.take(command.getSecondWord());
        }
    }
    
    private void dropItem (Command command)
    {
        if (!command.hasSecondWord()) {
            System.out.println("Drop what");
        } else {
            player.drop(command.getSecondWord());
        }
    }

    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  
        }
    }

    private void setCurrentRoom(Room room)
    {
        player.setCurrentRoom(room);
    }

    private void printLocationInfo ()
    {
        System.out.println(player.getCurrentRoom().getLongDescription());
        if (player.getCurrentRoom().hasItem()) {
            System.out.println(player.getCurrentRoom().getItemDescription());
        }
    }

    private void look ()
    {
        printLocationInfo();
    }

    private void addToPath ()
    {
        path.push(player.getCurrentRoom());
    }

    private void back()
    {
        if (path.empty()) {
            System.out.println("You havenÂ´t been in more rooms");
        } else {            
            setCurrentRoom(path.pop());
            printLocationInfo();
        }
    }
    
    private void magicCookie ()
    {
        if (player.getCurrentRoom().getItem("cookie") != null) {
            player.addWeight(100);
        } else {
            System.out.printf("The magic cookie is not here");
        }
    }

}