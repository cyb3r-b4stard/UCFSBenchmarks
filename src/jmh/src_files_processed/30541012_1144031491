
/**
 * <#>###### ################</#>
 * <#>## ##### ###### ### ###### ################ ###### ######## ##### ####### ## ##### ########## (######## ########)
 * ############ ##### ################ #########. ### ###### ### ###### ###### ######## ##### ###### #### ### #### 
 * ######### ### ############# ##### ##### ###### ### ##### ####### ########, ### ######### ####### ### ###### ################ ####. 
 * ##### ####:
 * ### ############## #### ####### ### ### ######, ## ### #### ######### ############ #### ###### (<,>,=) #### ######, ###### ### ### ######## ####### ######.
 * #### ####### ## ###### ######## #### ####### ### ### ############# ### ############.
 * #### ####### ## ####### ######## #### ####### ### ### ############# ### ############.
 * ##### ######### #### #### ## ###### ###########.</#>
 * 
 */
public class BinarySearchTree {

    private BinaryTree bintree;

    /**
     *Der Konstruktor erzeugt einen leeren Suchbaum. 
     */
    public BinarySearchTree() {
        bintree = new BinaryTree();
    }

    /**
     *Diese Anfrage liefert den Wahrheitswert true, wenn der Suchbaum leer ist, sonst liefert sie den Wert false.
     *@return true, wenn der binaere Suchbaum leer ist, sonst false
     */
    public boolean isEmpty() {
        return bintree.isEmpty();
    }

    /**
     * Falls ein bezueglich der verwendeten Vergleichsmethode isEqual mit pItem uebereinstimmendes Objekt im geordneten Baum enthalten ist,
     * passiert nichts. Andernfalls wird das Objekt pItem entsprechend der vorgegebenen Ordnungsrelation in den Baum eingeordnet. 
     * Falls der Parameter null ist, aendert sich nichts.
     * @param pInhalt  einzufuegendes Objekt
     */
    public void insert(Item pInhalt) {
        if (isEmpty()){
            bintree.setObject(pInhalt);  
        }
        else{
            if (((Item)bintree.getObject()).isEqual((Item)pInhalt)){
              /*  if (((Item)bintree.getObject().vorname).isEqual((Item)Schueler.vorname)){
                    
                }
                else{
                    if(((Item)bintree.getObject()).isGreater(Schueler.vorname)){
                        getLeftTree().insert(qInhalt);
                    }
                    else{
                        if(((Item)bintree.getObject()).isLess(Schueler.vorname)){
                            getRightTree().insert(qInhalt);
                        }
                    }
                }*/
            }
            else{
                if (((Item)bintree.getObject()).isGreater((Item)pInhalt)){
                    getLeftTree().insert(pInhalt);
                }
                else{
                    if (((Item)bintree.getObject()).isLess((Item)pInhalt)){
                        getRightTree().insert(pInhalt);
                    }
                }
            }
        }
    }

    /**
     * Falls ein bezueglich der verwendeten Vergleichsmethode isEqual mit pItem uebereinstimmendes Objekt im binaeren Suchbaum enthalten ist,
     * liefert die Anfrage dieses, ansonsten wird null zurueckgegeben.
     * Falls der Parameter null ist, wird null zurueckgegeben.
     * @param pInhalt zu suchendes Objekt
     * @return das gefundene Objekt, bei erfolgloser Suche null
     */
    public Object search(Object pInhalt) {
        return pInhalt;
    }

    /**
     * Diese Anfrage liefert den linken Teilbaum des binaeren Suchbaumes.
     * Der binaere Suchbaum aendert sich nicht. Wenn er leer ist, wird null zurueckgegeben.
     * @return den linken Teilbaum bzw. null, wenn der Suchbaum leer ist.
     */
    public BinarySearchTree getLeftTree() {
        if (this.isEmpty())
            return null;
        else {   
            BinarySearchTree lTree = new BinarySearchTree(); 
            lTree.bintree=bintree.getLeftTree();
            return lTree;
        }
    }

    /**
     * Diese Anfrage liefert den rechten Teilbaum des binaeren Suchbaumes.
     * Der binaere Suchbaum aendert sich nicht. Wenn er leer ist, wird null zurueckgegeben.
     * @return den rechten Teilbaum bzw. null, wenn der Suchbaum leer ist.
     */
    public BinarySearchTree getRightTree() {
        if (this.isEmpty())
            return null;
        else {    
            BinarySearchTree lTree = new BinarySearchTree(); 
            lTree.bintree=bintree.getRightTree();
            return lTree;
        }
    }
 
    private String baumZurListe(BinaryTree akt)
    {
        if(!akt.isEmpty())
        {
          String knotenInhalt= (String) akt.getObject();
          return baumZurListe(akt.getLeftTree())+
          knotenInhalt+" "+
          baumZurListe(akt.getRightTree());
        }
        else
        {
           return null;
        }
    }
    public Liste baumErstellen()
    {
       String a= baumZurListe(bintree);
       a.charAt(" ");
       a.length;
       return " ";
    }
}
