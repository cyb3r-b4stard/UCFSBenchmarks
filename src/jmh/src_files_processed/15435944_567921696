

/**
 * # ###### #### ####### ######### ############
 */
public class Banker
{ 
    private double initialBalance;
    private double interestRate;
    private double yearsPast;
    private double monthlyInterest;
    private double finalBalance;
    
  
    
    public void firstQuarterEarnings (double initialBalance, double interestRate)
    {
    monthlyInterest = (interestRate/12);
    System.out.println( );
    System.out.println("Initial balance: $" + initialBalance);
    System.out.println("Annual interest: " + (interestRate*100)+"%");
    System.out.println("Balance after first month: $" + ((initialBalance*monthlyInterest)+initialBalance));
    System.out.println("Balance after second month: $" + ((((initialBalance*monthlyInterest)+initialBalance)*monthlyInterest) +
                                                       (initialBalance*monthlyInterest)+initialBalance));
    System.out.println("Balance after third month: $" + ((((((initialBalance*monthlyInterest)+initialBalance)*monthlyInterest) +
                                                       (initialBalance*monthlyInterest)+initialBalance)*monthlyInterest)+((((initialBalance*monthlyInterest)+initialBalance)*monthlyInterest) +
                                                       (initialBalance*monthlyInterest)+initialBalance)));
    System.out.println( );                                                   
    
   
    
    
  }    
      
  public void longTermInterest (double initialBalance, double interestRate, double yearsPast)
    {
    finalBalance = (initialBalance * (Math.pow((1+interestRate/12),(12*yearsPast))));
       System.out.println();    
       System.out.println("Initial balance: $" + initialBalance);
       System.out.println("Annual interest: " + interestRate*100 +"%");
       System.out.println("Interest earned in " + yearsPast + " years: " + (finalBalance-initialBalance) +"$");
       System.out.println("Total value after "+ yearsPast + " years: " + (initialBalance * (Math.pow((1+interestRate/12),(12*yearsPast)))) +"$");
       
        
    }
    
  public double valueOfChange (int quartersGiven, int dimesGiven, int nickelsGiven, int penniesGiven)
  {
   System.out.println();
   System.out.println("# of quarters: " + quartersGiven);
   System.out.println("# of dimes: " + dimesGiven);
   System.out.println("# of nickels: " + nickelsGiven);
   System.out.println("# of pennies: " + penniesGiven);
   double changeRounder = Math.round(((quartersGiven*25)+(dimesGiven)*10)+(nickelsGiven*5)+penniesGiven);
   double changeValue  = (changeRounder/100);
   System.out.println("Value of change: $" + (changeValue));
   return changeValue;   
      
   }
  
   public double consolodateChange (int quartersGiven, int dimesGiven, int nickelsGiven, int penniesGiven)
   {
    
       
    System.out.println();   
    System.out.println("Coins given:");
    System.out.println("#of quarters: " + quartersGiven);
    System.out.println("# of dimes: " + dimesGiven);
    System.out.println("# of nickels: " + nickelsGiven);
    System.out.println("# of pennies: " + penniesGiven);
    double changeRounder = Math.round(((quartersGiven*25)+(dimesGiven)*10)+(nickelsGiven*5)+penniesGiven);
   double changeValue  = (changeRounder/100);
    System.out.println("Value of change: " + changeValue);
    
    double fivesReturned = Math.round((changeValue/5)-.5);
    double onesReturned = Math.round((changeValue-(fivesReturned*5))-.5);
    double quartersReturned = Math.round(((changeRounder-(fivesReturned*500)-(onesReturned*100))/25)-.5);
    double dimesReturned = Math.round(((changeRounder-(fivesReturned*500)-(onesReturned*100)-(quartersReturned*25))/25)-.5);
    
    
    
    
    System.out.println(Math.round((changeValue/5)-.5) + " fives");
    System.out.println(Math.round((changeValue-(fivesReturned*5))-.5) + " ones");
    System.out.println(Math.round(((changeRounder-(fivesReturned*500)-(onesReturned*100))/25)-.5) + " quarters");
    System.out.println(Math.round(((changeRounder-(fivesReturned*500)-(onesReturned*100)-(quartersReturned*25))/25)-.5)) + " dimes");
    
    return onesReturned;
    
    }
   
   
}
  



