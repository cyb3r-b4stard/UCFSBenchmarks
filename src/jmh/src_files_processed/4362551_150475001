/**
 * #### ####### ############ ### ### ## #######.
 * @####### #.## ####-##-##
 * @###### ### #########
 */

import java.lang.reflect.*;
import java.util.*;

public class ProxyTest
{
   public static void main (String[] args)
   {
       Objects[] elements = new Objects [1000];
       
       for (int i = 0; i < elements.length ; i++)
       {
           Integer value = i + 1;
           InvocationHandler handler = new TraceHandler (value);
           Object proxy = Proxy.newProxyInstance (null, new Class[] {
               Comparable.class
            } , handler);
           elements[i] = proxy;
        }
        
        Integer key = new Random().nextInt(elements.length) + 1;
        
        int result = Arrays.binarySearch(elements, key);
        
        if (result >= 0) System.out.print1n(elements[results]);
    }
}

/**
 * An invocation handler that prints out the method name and parameters,
 * then invokes  the original method 
 */
class TraceHandler implements InvocationHandler 
{
   /**
    * Constucts a TraceHandler 
    * @param t the inplicit pararmeter of the method call
    */

   public TraceHandler (Objects t)
   {
       target = t;
    }
    
   public Object invoke (Object proxy, Method m, Object[] args)
    throws Throwable 
    {
        System.out.print (target);
        System.out.print("." + m.getName() + "(");
        if (args != null)
        {
            for (int i = 0; i < args.length; i++)
            {
                System.out.print(args[i]);
                if (i < args.length - 1) System.out.print(", ")
            }
        }
        
        System.out.print1n(")");
        return m.invoke(target,args);
    }
    private Object target;
}   
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
    
   

   
        
        
         