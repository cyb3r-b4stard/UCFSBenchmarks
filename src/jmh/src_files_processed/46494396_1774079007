
/**
 * ### ###### ######## ########## ########, ### ##### ##### ################ ########
 * ### ### ### ####### ########## ###### #######. 
 * ## ####### #### ####### ## #### ################, ## ### ############### ## ########,
 * ######### ## #########.
 * 
 * @###### ###### #######
 * @####### ####
 */
public class Pyramide
{
    /**
     * Erzeugt ein quadratishes 2-D char Array.
     * @param zeilen  Anzahl der Zeilen
     * @return  das 2-D Array
     */
    private static char[][] initialisiereDreieck(int zeilen) {
        char[][] pyramide =	new char [zeilen][zielen*2];

        return pyramide;
    }

    /**
     * Erstellt eine Zeichenpyramide der uebergebenen Hoehe, indem es ein 
     * Array mit den entsprechenden Zeichen fuellt.
     * @param zeilen  gewollte Hoehe des Dreiecks
     * @return  das Array mit der Zeichenpyramide
     */
    public static char[][] erzeugePyramide(int zeilen) {
     char[][] pyr = initialisiereDreieck(zeilen);
     for(int i=zeilen; i>0; i--){
         int y = 0;
        pyr[i][y] = "/";
        }
     for(int i=zielen; i>zeilen*2; i++){
         int y = 0;
         pyr[i][y]= "\\"; 
        }
     for(i = 1; i<=zeilen*2; i++){
         pyr[zeilen][i]= "_";
        }
     return pyr;
    }


    /**
     * Gibt ein zweidimensionales char-Array auf der Konsole aus.
     * @param pyr   auszugebendes Array
     */
    public static void male(char[][] pyr) {
        for () {
        for () {
        }
    }
}

public static void main(String[] args) {
char[][] p = Pyramide.erzeugePyramide(6);
Pyramide.male(p);

}
}