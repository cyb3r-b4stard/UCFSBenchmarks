import java.util.*;
import java.io.*;
import ou.*;
/**
 * ##### # ########### ## ##### ###### ####.
 * 
 * @###### ######### #. ###### 
 * @####### ##/#####/####
 */
public class Coffee
{
   private Map<String, List<String>> cafeshop;

   /**
    * Constructor for objects of class Coffee
    * Method that takes no argument but populates a map 
    * with keys and values.
    */
   public Coffee()
   {
      cafeshop = new HashMap<>();
      
   }

   /**
    * Method that takes no argument but populates a map 
    * with keys and values of Coffee class.
    */
   public void addCoffeBeans()
   {
      
      Map<String, List<String>> cafeshop = new HashMap<>();
      List<String> cafeTaste = new ArrayList<>();
      
     cafeTaste.add("French");
      cafeTaste.add("Arabica");
      cafeTaste.add("Columbian");
      cafeTaste.add("Hybrid");
      cafeshop.put("Kenco", cafeTaste);
      
     cafeTaste = new ArrayList<>();
      cafeTaste.add("Blue Mountain");
      cafeTaste.add("Columbian");
      cafeTaste.add("Italian");
      cafeshop.put("Lavazza", cafeTaste);
      
     cafeTaste = new ArrayList<>();
      cafeTaste.add("Arabusta");
      cafeTaste.add("Brazilian");
      cafeTaste.add("French");
      cafeTaste.add("Sumatra");
      cafeshop.put("Nescafe", cafeTaste);
      
   }
   
    /**
    * Takes no argument and iterates over the maps's keys and prints  
    * outkeys and values of Coffee class.
    *  @param
    */
   public void printMap()
   {
      Map<String, List<String>> cafeshop = new HashMap<>();
      List<String> cafeTaste = new ArrayList<>();
      
      cafeTaste.add("French");
      cafeTaste.add("Arabica");
      cafeTaste.add("Columbian");
      cafeTaste.add("Hybrid");
      cafeshop.put("Kenco", cafeTaste);
      
      cafeTaste = new ArrayList<>();
      cafeTaste.add("Blue Mountain");
      cafeTaste.add("Columbian");
      cafeTaste.add("Italian");
      cafeshop.put("Lavazza", cafeTaste);
      
      cafeTaste = new ArrayList<>();
      cafeTaste.add("Arabusta");
      cafeTaste.add("Brazilian");
      cafeTaste.add("French");
      cafeTaste.add("Sumatra");
      cafeshop.put("Nescafe", cafeTaste);
      
    
     for (String eachBrand : cafeshop.keySet()) 
        { 
            cafeTaste = cafeshop.get(eachBrand);
         System.out.println("The " + eachBrand + 
         " brand produces this flavors of coffee: "  + cafeTaste);
         
        }
    
   }
   
    /**
    * Method that takes a single argument of a key type and returns
    * a collection of values associated with the key, otherwise prints 
    * an outputline telling us the key is notpresent in the map.
    * @param
    */
      
      

      
      
         
   }
  
   /**
    * Takes two arguments of type key and type value and adds it to the 
    * map otherwise if the key already exist, it overwriters the present value
    * using the Map method put() which accesses th
    * @ param
    */
    {
       
    }
      
  
  
}