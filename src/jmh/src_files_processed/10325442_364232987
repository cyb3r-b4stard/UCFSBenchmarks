import java.util.List;
import java.util.ArrayList;

/**
 * # #### ## ##### ## ###.
 * 
 * @###### ####### #. ######
 * @####### ####-##-##
 */
public class ShoppingList
{
    private List<Item> stuff;

    /**
     * create an empty list
     */
    public ShoppingList()
    {
        stuff = new ArrayList<> ();
    }

    /**
     * add an item to the list
     * 
     * @param i an Item for the list
     */
    public void storeItem(Item bargain)
    {
        stuff.add(bargain);
    }

    /**
     * add an item to the list
     * 
     * @param d a description of the item
     */
    public void storeItem(String d)
    {
        Item bargain = new Item(d);
        stuff.add(bargain);
    }

    /**
     * @return the length of the list
     */
    public int numberOfItems()
    {
        return stuff.size();
    }

    /**
     * display an item in the list
     * 
     * @param n the item number. 0 <= n < numberOfItems()
     */    
    public void printItem(int n)
    {
        if(n >= stuff.size()) {
            System.out.println("This list has no item " + n);
            System.out.println("Choose a number between 0 and " 
                + (stuff.size() - 1));
            return;
        }

        if(n < 0) {
            System.out.println(n + " is less than zero.");
            System.out.println("Choose a number between 0 and " 
                + (stuff.size() - 1));
            return;
        }
        
        Item bargain = stuff.get(n);
        System.out.println(bargain);
    }

    /**
     * remove one item
     * @param n the position of the item in the list
     */
    public void removeItem(int n)
    {
        stuff.remove(n);
    }

    /**
     * check off an item in the list
     * 
     * @param n the item number. 0 <= n < numberOfItems()
     */    
    public void checkOff(int n)
    {
        Item bargain = stuff.get(n);
        bargain.checkOff();
    }

    /**
     * check off an item in the list
     * 
     * @param n the item number. 0 <= n < numberOfItems()
     */    
    public void setPrice(int n, double price)
    {
        Item bargain = stuff.get(n);
        bargain.setPrice(price);
    }

    /**
     * print all the items in the list
     */
    public void printItems()
    {
        for(Item itemname: stuff) {
            System.out.println(itemname); }
    }

    /**
     * print an abbreviated list
     * @param checked true to list the items already found,
     * false to list the items not yet found.
     */
    public void printItems(boolean checked)
    {
        for(Item itemname: stuff) {
            if(itemname.isChecked() == true) {
                System.out.println(itemname); }
                
                if(itemname.isChecked() == false) {
                    System.out.println(itemname);
            
    }}

    /**
     * @return the next item that's not already found,
     * null if the list is done
     */    
    public Item nextItem()
    {
        return null;
    }

    /**
     * @return a list of the items not yet found
     */    
    public List<Item> newList()
    {
        return null;
    }

    /**
     * count the items found, or left to found
     * @param checked true to count the items already found,
     * false to count the items not yet found
     * @return the count of matching items
     */
    public int count(boolean checked)
    {
        return 0;
    }

    /**
     * estimate the cost of this shopping trip
     * @return the amount of money we're going to spend
     * (as far as we know)
     */
    public double cost()
    {
        return 0;
    }

    /**
     * Remove the checked items from the list.
     */
    public void removeCheckedItems()
    {
    }
}