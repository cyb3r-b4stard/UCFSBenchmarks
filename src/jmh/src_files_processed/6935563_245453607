import java.util.*;

/**
 * ########### ### #### ### ###### #########.
 * 
 * @###### (### ####) 
 * @####### (#### ############## #### ### #####)
 */
public class Spielfeld implements ISpielfeld
{

    public Plaettchen schiebePlaettchen;

    int[][] spielfeld;

    /**
     * Initialisiert das Spielfeld, d.h. legt ein Gitter von
     * Plättchen an und befüllt diese mit zufälligen Plättchen.
     * Erzeugt ebenfalls das SchiebePlättchen, das für den 
     * ersten Einschub benötigt wird.
     */
    public void initialisieren()
    {
        spielfeld = new int[7][7]{
         {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} , 
            {0 , 0 , 0 , 0 , 0 , 0 , 0} };

    }

    /**
     * Gibt das Plättchen in der gegebenen Zeile und Spalte zurück.
     * 
     * @param zeile die Zeile des gesuchten Plättchens
     * @param spalte die Spalte des gesuchten Plättchens
     * @return das gesuchte Plättchen
     */
    public Plaettchen gibPlaettchen(final int zeile, final int spalte)
    {

    }

    /**
     * Realisiert das Einschieben des SchiebePlättchens an der
     * gegebenenen Zeile und Spalte. Alle Plättchen "davor" werden
     * um einen Platz verschoben und das gegenüberliegende Plättchen
     * wird zum neuen SchiebePlättchen.
     */
    public void einschieben(final int zeile, final int spalte)
    {

    }

    /**
     * Gibt das aktuelle SchiebePlättchen zurück.
     * 
     * @return das aktuelle SchiebePlättchen
     */
    public Plaettchen gibSchiebePlaettchen()
    {

    }

    /**
     * Dreht das aktuelle SchiebePlättchen um 90 Grad nach rechts.
     */
    public void drehePlaettchenRechts()
    {

    }

    /**
     * Dreht das aktuelle SchiebePlättchen um 90 Grad nach links.
     */
    public void drehePlaettchenLinks()
    {

    }

    /**
     * Ermittelt, ob es einen Weg gibt vom Plättchen auf dem sich die gegebene
     * Spielfigur befindet zu dem Plättchen in der gegebenen Zeile und Spalte.
     * Falls es einen solchen Weg gibt, wird {@code true} zurückgegeben, 
     * ansonsten {@code false}.
     * 
     * @param spielfigur die Spielfigur, von deren Plättchen aus der Weg gesucht 
     * wird
     * @param zeile die Zeile in der sich das Zielplättchen befindet
     * @param spalte die Spalte in der sich das Zielplättchen befindet
     * @return  {@code true} falls es einen Weg gibt, {@code false} sonst
     */
    public boolean exisitiertWeg(final ISpielfigur spielfigur, final int zeile, final int spalte)
    {

    }
}