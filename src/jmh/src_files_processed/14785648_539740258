
/**
 * ##### # ########### ## ##### #### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Ex14
{
    public static void main (String[] args)

    {
    }

    public static int what (int[] a)                                                   
    {
        int sum=0 , temp=0 , temp1=0;
        for (int i=0;i<a.length;i++)
        {
            sum=0;
            for (int j=i;j<a.length;j++)
            {
                sum+=a[j];
                if (sum%3==0)
                    temp1=j-i+1;
                if (temp1>temp)
                    temp=j-i+1;
            }
        }
        return temp;
    }

    public static void zeroDistance (int [] a)                                                                                                                          
    {
        int i=0, pointLeft=0 , pointRight=0 , distanceLeft=0 , distanceRight=0;
        while (i!=a.length && a[pointLeft]!=0)

        {
            if (a[i]==0)
                a[i]=0;           
            else if (a[i]==1)
            {
                if (i-1>0)
                    pointLeft=i-1;
                if (i+1<a.length)
                pointRight=i+1;
                if (pointRight<a.length && a[pointRight]==0)
                distanceRight=pointRight-i;
                if (pointLeft>=0 && a[pointLeft]==0)
                    distanceLeft=i-pointLeft;
                else if (pointLeft>=0 && a[pointLeft]==1)
                    pointLeft--;
            }

            i++;
        }

        while (i!=a.length &&  a[pointRight]!=0)
        { 
         
            else if (pointRight<a.length && a[pointRight]==1)
                pointRight++;
        }
        i++;
        if (distanceLeft > distanceRight)
            a[i]=distanceLeft;
        else
            a[i]=distanceRight;
    }

    public static int spiderman (int n)
    {
        return spiderman(n,0);
    }

    private static int spiderman (int n , int i)
    {
        if (i==n)
            return 1;
        if (i>n)
            return 0;
        return spiderman (n,i+1) + spiderman (n,i+2);
    }

    public static int spidermanPhoneBooth20 (int n)
    {
        return spidermanPhoneBooth20(n,0);
    }

    public static int spidermanPhoneBooth20 (int n , int i)
    {
        if (n==i)
            return 1;
        if (n<i)
            return 0;
        if (i==20)
            return 1;
        return spidermanPhoneBooth20(n,i+1) + spidermanPhoneBooth20(n,i+2);
    }

    public static int numPaths (int [][]mat , int x1 , int y1 , int x2 , int y2)
    {
        return numPaths (mat,x1,y1,x2,y2,0,0,0);
    }

    private static int numPaths (int [][]mat , int x1 , int y1 , int x2 , int y2 , int i , int j , int sum)
    {
        if (i<0 || i>=mat.length || j<0 || j>=mat[0].length)
            return 0;
        if (i>j)
            return 0;
        if (mat[i][j]<0)
            return 0;
        if (i==x2 && j==y2)
            return 1;
        int temp=mat[i][j];
        mat[i][j]=-1;
        sum=numPaths(mat,x1,y1,x2,y2,i-1,j,sum)+numPaths(mat,x1,y1,x2,y2,i+1,j,sum)+numPaths(mat,x1,y1,x2,y2,i,j+1,sum)+numPaths(mat,x1,y1,x2,y2,i,j-1,sum);
        mat[i][j]=temp;
        return sum;
    }

}