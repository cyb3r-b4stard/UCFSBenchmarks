/**
 * ### ########### ## #### ### ######### ######### ####.
 * ######## ##### ### ## #.
 * 
 */

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.io.*;
import java.util.Scanner;

public class ElevationVisualizer extends JFrame {

    private class DisplayPanel extends JPanel {
        private int[][] data;       
        private int[] path;         
    
        public void setData(int[][] data) {
            this.data = data;
        }
        
        public void setPath(int[] path) {
            this.path = path;
        }

        public void paintComponent(Graphics g) {
            if (dataLoaded) {
                int max = findMax(data);
                for (int r = 0; r < data.length; r++) { 
                    for (int c = 0; c < data[r].length; c++) {
                        int h = (int)((double)data[r][c]/max*255);  
                        g.setColor(new Color(h, h, h));
                        g.drawRect(c, r, 1, 1);
                    }
                }
            }
            
            if (pathRequested) {
                for (int i = 0; i < path.length; i++) {
                    g.setColor(Color.GREEN);
                    g.drawRect(i, path[i], 1, 1);
                }
            }
        }
    }

    private class ButtonHandler implements ActionListener {
        public void actionPerformed(ActionEvent e) {    
            Object src = e.getSource();
            if (src == bLoadFile) {
                chooseFile();
            } else if (src == bFindPath) {
                findPath();
            }
        }
    }
    
    private DisplayPanel    pDisplay = new DisplayPanel();
    private JButton         bLoadFile = new JButton("Load new data file"),
                            bFindPath = new JButton("Find a path");
    private JLabel          lStatus = new JLabel("Use the Load button to open a data file");
    private boolean         dataLoaded = false,     
                            pathRequested = false;  
    
    public ElevationVisualizer() {
        ButtonHandler bh = new ButtonHandler(); 
        bLoadFile.addActionListener(bh);
        bFindPath.addActionListener(bh);
    
        JPanel cp = new JPanel();       
        cp.setLayout(new BorderLayout());
        
        JPanel bp = new JPanel();       
        bp.setLayout(new GridLayout(1, 2));
        bp.add(bLoadFile);
        bp.add(bFindPath);
        
        cp.add(BorderLayout.NORTH, lStatus);
        cp.add(BorderLayout.CENTER, pDisplay);
        cp.add(BorderLayout.SOUTH, bp);
        
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setTitle("Elevation Data Visualizer");
        setContentPane(cp);
        setSize(600, 600);
        setVisible(true);
    }
    
    private void chooseFile() {
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));
        int returnVal = fc.showOpenDialog(this);
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            try {
                pDisplay.setData(readElevationData(f));
                dataLoaded = true;
                pathRequested = false;
                repaint();      
                lStatus.setText(f.getName() + " successfully opened!");
            } catch (FileNotFoundException e) {
                lStatus.setText("Can't find " + f.getName());
            } catch (ArrayIndexOutOfBoundsException e) {
                lStatus.setText(f.getName() + " seems to have inconsistent rows and columns");
            } catch (NumberFormatException e) {
                lStatus.setText(f.getName() + " seems to contain non-integer data");
            }
        }
    }
    

    private int[][] readElevationData(File f) throws FileNotFoundException, ArrayIndexOutOfBoundsException, NumberFormatException {
        }
    return null;
    }

    private void findPath() {
        if (!dataLoaded) {
            lStatus.setText("Can't find path yet, must load a data file first!");
        } else {
            pDisplay.setPath(findPath(pDisplay.data));
            pathRequested = true;
            repaint();      
            lStatus.setText("West-east path computed!");
        }
    }

    private int[] findPath(int[][] data) {
        int n = data.length;
        int[][] path = new int[n][n];
        return null;
    }
    
    public static int findMax(int[][] a) {
        int maxValue = a[0][0];
        for(int i=0; i < a.length; i++){
            for(int j=0; j < a.length; j++){
                if(a[i][j] > maxValue){
                    maxValue = a[i][j];
                    return maxValue;
                }
            }
        }
        return 0;
    }
    
    public static int indexOfMinFromCol(int[][] a, int c) {
        int minValue = a[0][0];
        for(int i=0; i < a.length; i++) {
            for(int j=0; j < a.length; i++){
                if(a[i][j] < minValue) {
                    c = a[i][j];
                    return c;
                }
            }
        }
        return 0;
    }
    
    public static void main(String[] args) {
        new ElevationVisualizer();
    }
}