
/**
 * ##### # ########### ## ##### ######### ####.
 * 
 * @###### ##### ####
 * @####### #.#
 */
public class FunNumber
{
    private int myNumber;
    
    /**
     * default constructor sets up the fun number to hold a value
     */
    public FunNumber(int n)
    {
        myNumber = n;
    }
    public void setMyNumber(int newNumber)
    {
        myNumber = newNumber;
    }
    
    public int getMyNumber()
    {
        return myNumber;
    }
    
    
    public boolean isEven()
    {
        if (myNumber % 2 == 0){
            
            return true;
        }
        else
        {
            return false;
        }
    }
    
    
    public FunNumber add(FunNumber other)
    {
        FunNumber sum;
        
        sum = new FunNumber(this.myNumber + other.getMyNumber());
        
        return sum;
    }
    
    public FunNumber subtract(FunNumber other)
    {
        FunNumber difference;
        
        difference = new FunNumber(this.myNumber - other.getMyNumber());
        
        return difference;
    }
    
    public FunNumber multiply(FunNumber other)
    {
        FunNumber product;
        
        product = new FunNumber(this.myNumber * other.getMyNumber());
        
        return product;
    }
    
    public FunNumber divide(FunNumber other)
    {
        FunNumber quotient;
        
        quotient = new FunNumber(this.myNumber / other.getMyNumber());
        
        return quotient;
    }
    
    public FunNumber mod(FunNumber other)
    {
        FunNumber remainder;
        
        remainder = new FunNumber(this.myNumber % other.getMyNumber());
        
        return remainder;
    }
    
    public boolean isPrime()
    {
        return true;
    }
    
    public FunNumber sumDigits()
    {
        FunNumber result;
        
        int n = (int) Math.abs(myNumber);
        
        int sum = 0;
        
        while(n > 0)
        {
            sum = sum + n % 10;
            
            n = n / 10;
        }
        
        result = new FunNumber(sum);
        
        return result;
    }
    
    public FunNumber sumDigitsSquared()
    {
        FunNumber result;
        
        int n = (int) Math.abs(myNumber);
        
        int sum = 0
        
        while(n > 0)
        {
            sum = sum + ((n % 10) * (n % 10));
            
            n = n / 10;
        }
        
        result = new FunNumber(sum);
        
        return result;
    }
    
    public String convertToString()
    {
        return "" + myNumber;
    }
}