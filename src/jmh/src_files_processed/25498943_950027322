
import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * ### #### ##### ##############.
 *
 * @######  ##### #########
 * @####### #.# ## ## ## 
 */
public class BattleShipTest
{
    /**
     * Default constructor for test class BattleShipTest.
     */
    public BattleShipTest()
    {      

    }

    /**
     * Sets up the test fixture.
     *
     * Called before every test case method.
     */
    @Before
    public void setUp()
    {
    }

    /**
     * Tears down the test fixture.
     *
     * Called after every test case method.
     */
    @After
    public void tearDown()
    {
    }

    @Test
    public void BattleShipTest1()
    {

        char [][] testOcean1  = 
            {
                { 'X', '.', '.', '.', 'X' }, 
                { 'X', '.', '.', '.', 'X' },
                { 'X', '.', '.', '.', 'X' },
                { 'X', '.', '.', '.', 'X' },
            };  

        BattleShip myBShip1 = new BattleShip(testOcean1);
        assertNotNull(myBShip1);
        assertEquals('X', testOcean1[0][0]);
        assertEquals('.', testOcean1[0][1]);
        assertEquals('.', testOcean1[0][2]);
        assertEquals('.', testOcean1[0][3]);
        assertEquals('X', testOcean1[0][4]);

        assertEquals('X', testOcean1[1][0]);
        assertEquals('.', testOcean1[1][1]);
        assertEquals('.', testOcean1[1][2]);
        assertEquals('.', testOcean1[1][3]);
        assertEquals('X', testOcean1[1][4]);

        assertEquals('X', testOcean1[2][0]);
        assertEquals('.', testOcean1[2][1]);
        assertEquals('.', testOcean1[2][2]);
        assertEquals('.', testOcean1[2][3]);
        assertEquals('X', testOcean1[2][4]);

        assertEquals('X', testOcean1[3][0]);
        assertEquals('.', testOcean1[3][1]);
        assertEquals('.', testOcean1[3][2]);
        assertEquals('.', testOcean1[3][3]);
        assertEquals('X', testOcean1[3][4]);

    }

    @Test
    public void BattleShipIsHit2()
    {

        char [][] testOcean2  = 
            {
                { 'X', '.', '~', '.', 'X' }, 
                { 'X', 'B', '~', '.', 'X' },
                { 'X', '~', 'B', '.', 'X' },
                { 'X', '.', '~', 'B', 'X' },
            };  

        BattleShip myBShip2 = new BattleShip(testOcean2);
        assertNotNull(myBShip2);
        assertEquals(true, myBShip2.isHit(0,0));
        assertEquals(false, myBShip2.isHit(0,1));
        assertEquals(false, myBShip2.isHit(0,2));
        assertEquals(false, myBShip2.isHit(0,3));
        assertEquals(true, myBShip2.isHit(0,4));

        assertEquals(true, myBShip2.isHit(1,0));
        assertEquals(true, myBShip2.isHit(1,1));
        assertEquals(false, myBShip2.isHit(1,2));
        assertEquals(false, myBShip2.isHit(1,3));
        assertEquals(true, myBShip2.isHit(1,4));

        assertEquals(true, myBShip2.isHit(2,0));
        assertEquals(false, myBShip2.isHit(2,1));
        assertEquals(true, myBShip2.isHit(2,2));
        assertEquals(false, myBShip2.isHit(2,3));
        assertEquals(true, myBShip2.isHit(2,4));

        assertEquals(true, myBShip2.isHit(3,0));
        assertEquals(false, myBShip2.isHit(3,1));
        assertEquals(false, myBShip2.isHit(3,2));
        assertEquals(true, myBShip2.isHit(3,3));
        assertEquals(true, myBShip2.isHit(3,4));

    }

    /**
     * Test the toString method.
     */ 
    @Test
    public void testToString()
    {
        char [][] testOcean2  = 
            {
                { 'X', '.', '~', '.'}, 
                { 'X', 'B', '~', '.'},
                { 'X', '~', 'B', '.'},
                { 'X', '.', '~', 'B'},
            };  

        BattleShip myBShip2 = new BattleShip(testOcean2);
        String attributes = myBShip2.toString();

        assertTrue(attributes.contains("Battleship Matrix:"));
        assertTrue(attributes.contains("|"));  
        assertTrue(attributes.contains("0")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("1"));  
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("2")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("3")); 
        assertTrue(attributes.contains("|")); 
        
        assertTrue(attributes.contains("0")); 
        assertTrue(attributes.contains("|"));  
        assertTrue(attributes.contains("X")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains('B'));  
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains('~')); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains('.')); 
        assertTrue(attributes.contains("|")); 
        matrix print line 3
        assertTrue(attributes.contains("|"));  
        assertTrue(attributes.contains("0")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("1"));  
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("2")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("3")); 
        assertTrue(attributes.contains("|")); 
        matrix print line 4
        assertTrue(attributes.contains("|"));  
        assertTrue(attributes.contains("0")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("1"));  
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("2")); 
        assertTrue(attributes.contains("|")); 
        assertTrue(attributes.contains("3")); 
        assertTrue(attributes.contains("|")); 
        */
        * 
        */      
        


       

    }

}
