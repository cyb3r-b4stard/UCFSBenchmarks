
/* #### ### ####### ########## #
 * ####: ######
 * ########:
 * ##: #########
 */

import ecs100.*;
import java.util.*;
import java.io.*;
import java.awt.Color;

/**
 *  #### # ###### #### # ###### ######### ######## ####.
 *  ######## ### ########### ##### #### ### ####### #### # ## # ##
 *  #### (##### #### ####).
 *  ### ###### ### # "####" ##### ### ####### ## ## ### ########.
 *  #### ### ####### ### ######## ## ##### ####, #### ### ##### ########
 *  #### ##### #### #### ### #####, ### #### ### #### ## #### ######## #### # ###
 *  ## #### ### #### ## ##### "####".
 *  ### #### ### ########## ## ### ####### ### ## ### ######## ### #######
 *  ## #### ######## #####. 
 *
 *  ####### ######
 *  ### ######## ### ########### ## ####### ## ### ###### #####.
 *  ### ###### ########### #### ######### # ###, ###### ######.
 *  ####### #### # ####(###### #, ###### #) ###### #### #### #### ###
 *  ###### ## ### ######## #### ## ### ######### ########.
 *  
 *  ### ####### ### ### ### ######:
 *    ####:  ## ##### #### ### #### # #######. 
 *    #####: ## ######### ## ### ####### #### #### #### ###### ## ### #####.
 *    
 *  ### #### ###### ## ######### #### ### ### ## ### ######## #### #### #
 *   ########### ###### ### #### ###### ##### ## ### ##### ## ### ####.
 *  ##### ###### ## ### #### ###### ## ########### ## ##### ### ######### ## #####.
 *
 *  ### #### ### ###### # ######## ## ### #### ##### ### #####.
 *  ### ######## ###### (## ##### #####) ###### ## ########### ####
 *  # ###### ###### ##.
 *  
 *  ### #### ### ### ### "####" ## "#####" ###### ## #### ### ######## ######
 *  (## ### #####) ## ### #### ## ### #####, ## ##### #### ### ###### ##
 *  ####### #### ### ######## ## ### ######## ######## ## ### ####.
 *  ## ### ######## ######## ######## # ######, ### ####
 *  ### ### ### "#####" ###### ## #### ### ######## ###### ## ### #####.
 *  
 *  ## ##### ### ### ##### ######### ## ### ####, ### #### ### ### ###
 *  "######" ###### ## ### # ### (######) ###### ##### #### ## ##### ##
 *  ### #### ## ### ######## ##### ########.
 *
 *  ### ##### ## ########### ## ## ######### ## #######.
 *  ## ### ######### ## ### #### ### ##### ###### ## #####.
 *  ####### ###### ## ##### ## ### ### ## ### #####.
 *  ### ##### ###### ## ######### ## #### ## ### ### ## ### ######## ####.
 */

public class DominoGame{
    public static final int NUM_HAND = 6;    

    private Domino[] hand;            
    private ArrayList<Domino> table;  

    private int selectedPos = 0;      


    public static final int HAND_LEFT = 60; 
    public static final int HAND_TOP = 5;   
    public static final int DOMINO_SPACING = 54; 
    public static final int DOMINO_HEIGHT = 100; 

    public static final int TABLE_LEFT = 10;                
    public static final int TABLE_TOP = 120;   

    /**  Constructor:
     * Initialise the hand field to have an array that will hold NUM_HAND Dominos
     * Initialise the table field to have an ArrayList of Dominos,
     * set up the GUI (buttons and mouse)
     *  restart the game
     */
    public DominoGame(){
        this.hand = new Domino[NUM_HAND];
        this.table = new ArrayList <Domino>();

        UI.addButton("Pickup",this::pickup);
        UI.addButton("Place",this::placeDomino);
        UI.addButton("Flip",this::flipDomino);
        UI.addButton("Move Left",this::moveLeft);
        UI.addButton("Move Right",this::moveRight);
        UI.addButton("Restart",this::restart);

        UI.setMouseMotionListener(this::doMouse);

        this.redraw();
    }

    /**
     * Restart the game:
     *  set the table to be empty,
     *  set the hand to have no dominos
     */
    public void restart(){
        this.hand = new Domino[NUM_HAND];
        this.table = new ArrayList <Domino>();

        this.redraw();
    }

    /**
     * If there is at least one empty position on the hand, then
     * create a new random domino and put it into the first empty position on the hand.
     * (needs to search along the array for an empty position.)
     */
    public void pickup(){
        for(int num=0; num < hand.length; num++){
            if(hand[num] == null){
                hand[num] = new Domino();
                break;
            }
        }
        this.redraw();

    }

    /**
     * Draws the outline of the hand,
     * draws all the Dominos in the hand,
     * highlights the selected position in some way
     */
    public void drawHand(){
        UI.setColor(Color.black);
        UI.drawRect(HAND_LEFT,HAND_TOP,6*DOMINO_SPACING,DOMINO_HEIGHT);
        for(int num = 0; num < hand.length; num++){
            if(hand[num] != null){
                this.hand[num].draw(HAND_LEFT+(DOMINO_SPACING*num),HAND_TOP);
            }
        }
        UI.setColor(Color.orange);
        UI.drawRect((selectedPos+1) * DOMINO_SPACING,HAND_TOP,DOMINO_SPACING,DOMINO_HEIGHT);

    }

    /**
     * Move domino from selected position on hand (if there is domino there) to the table
     * The selectedPos field contains the index of the selected domino.
     */
    public void placeDomino(){
        Domino selected =this.hand[selectedPos];
        table.add(selected);
        hand[selectedPos] = null;

        this.redraw();
    }

    /**
     * Draws the list of Dominos on the table, 10 to a row
     * Note, has to wrap around to a new row when it gets to the
     * edge of the table
     */
    public void drawTable(){
        while(num< table.size()){
            int var=0;
            for (int num=0; num < table.size(); num++){
                table.get(num).draw(TABLE_LEFT+(DOMINO_SPACING * num),TABLE_TOP);
                var++;
            }
            

        }

    }

    /**
     * If there is a domino at the selected position in the hand, 
     * flip it over.
     */
    public void flipDomino(){
        hand[selectedPos].flip();
        this.redraw();
    }

    /**
     * Swap the contents of the selected position on hand with the
     * position on its left (if there is such a position)
     * and also decrement the selected position to follow the domino 
     */
    public void moveLeft(){
        if(selectedPos!=0){
            Domino var=hand[selectedPos];
            hand[selectedPos]=hand[selectedPos-1];
            hand[selectedPos-1]=var;
            selectedPos--;
        }
        this.redraw();
    }

    /**
     * Swap the contents of the selected position on hand with the
     *  position on its right (if there is such a position)
     *  and also increment the selected position to follow the domino 
     */
    public void moveRight(){
        if(selectedPos!=NUM_HAND){
            Domino var=hand[selectedPos];
            hand[selectedPos]=hand[selectedPos+1];
            hand[selectedPos+1]=var;
            selectedPos++;
        }
        this.redraw();
    }

    /**
     * If the table is empty, only a double can be suggested.
     * If the table is not empty, see if one domino has a number that matches one of the 
     *    numbers of the last domino.
     */
    public void suggestDomino(){
        /*# YOUR CODE HERE */

    }

    /** ---------- The code below is already written for you ---------- **/

    /** Allows the user to select a position in the hand using the mouse.
     * If the mouse is released over the hand, then sets  selectedPos
     * to be the index into the hand array.
     * Redraws the hand and table */
    public void doMouse(String action, double x, double y){
        if (action.equals("released")){
            if (y >= HAND_TOP && y <= HAND_TOP+DOMINO_HEIGHT && 
            x >= HAND_LEFT && x <= HAND_LEFT + NUM_HAND*DOMINO_SPACING) {
                this.selectedPos = (int) ((x-HAND_LEFT)/DOMINO_SPACING);
                UI.clearText();UI.println("selected "+this.selectedPos);
                this.redraw();
            }
        }
    }

    /**
     *  Redraw the table and the hand.
     *  To work with the code above, this needs to use the constants:
     *   - DOMINO_SPACING, HAND_HEIGHT, HAND_LEFT, HAND_TOP, TABLE_LEFT, TABLE_TOP
     *   See the descriptions where these fields are defined.
     *  Needs to clear the graphics pane,
     *  then draw the hand with all its dominos, 
     *  then outline the selected position on the hand
     *  then draw the rows of dominos on the table.
     */
    public void redraw(){
        UI.clearGraphics();
        this.drawHand();
        this.drawTable();
    }

    public static void main(String[] args){
        DominoGame obj = new DominoGame();
    }   

}