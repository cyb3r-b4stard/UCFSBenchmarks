/**
 * #### ##### ######### # #### ## # ########.
 * 
 * #### #### ## ###### ### ####### ## ## ###### ######## ####### ###
 * #### ###### ## ########.  #####, #### ## #### #### ####, ## ####
 * ##### ####### ##### ### ###### ## ######## ### ####. 
 * 
 * ## #### ####### #, ## ### ######### ## ### ##########.
 * 
 * @###### ####### ###### 
 * @####### ###### ####
 * 
 */
public class ListOf4V2PartB
{
    private static final int listSize = 4;
    
    private int[] list = {0, 1, 2, 3};

    
    /**
     * A constructor for objects of class ListOf4, which takes a
     * single array parameter
     * 
     * @param  element   the initial elements for the list
     */
    public ListOf4V2PartB(int [] element)
    {   
      int i = 0; 
      list[i] = element[i];
      i++;
      list[i] = element[i];
      i++;
      list[i] = element[i];
      i++;
      list[i] = element[i];
      
    } 
    
    /**
     * @return     the first element in the list
     */
    public int getFirst()
    {
        return list[0];
        
    } 
    
     
    /**
     * @return     A summary of the contents of the list.
     */
    public String toString()
    {
       String s = "{" + list[0]; 
       int i = 1;      
       
       s = s + ", " + list[i];
       i++;
       s = s + ", " + list[i];
       i++;
       s = s + ", " + list[i];
       
       s = s + "}";
       
       return theString;
    }
    
    /**
     * @return     the sum of the elements of the array
     */
    public int sum()
    {
       int sum = 0; 
        
       int i = 0; 
 
       sum = sum + list[i];
       i++;
       sum = sum + list[i];
       i++;
       sum = sum + list[i];
       i++;
       sum = sum + list[i];

       return theAnswer;
        
    } 
    
    /**
     * @return     the number of times the replacement was made (i.e. 0 or 1)
     * 
     * @param  replaceThis   the element to be replaced
     * @param  withThis      the replacement
     */
    public int replaceOnce(int replaceThis, int withThis)
    {        
        int i = 0; 
 
        if ( list[i] == replaceThis )
        {
           list[i] = withThis;
           return 1;
        }
        i++;
        if ( list[i] == replaceThis )
        {
           list[i] = withThis;
           return 1;
        }
        i++;
        if ( list[i] == replaceThis )
        {
           list[i] = withThis;
           return 1;
        }
        i++;
        if ( list[i] == replaceThis )
        {
           list[i] = withThis;
           return 1;
        }
 
        return 0;
            
    } 
          
    
    /**
     * @return     the value of the smallest element in the array
     */
    public int minVal()
    {
        int mostWantedHolder = list[0];  
        
        int i = 0; 
 
        if ( list[i++] < list[i] )
        {
           mostWantedHolder = list[i];
        }
        if ( list[i++] < list[i] )
        {
           mostWantedHolder = list[i]
        }
        if ( list[i++] < list[i] )
        {
           mostWantedHolder = list[i]
        }
 
       return mostWantedHolder;
        
    } 
           
    /**
     * Inserts an element in the first position. The elements already in the
     * list are pushed up one place, and the element that was previously
     * last is lost from the list.
     * 
     * @param  newElement   the element to be inserted
     */
    public void insertFirst(newElement)
    {   
        int i = 3; 
        
        list[i] = list[--i];
        list[i] = list[--i];
        list[i] = list[--i];
        
        list[i] = newElement;
        
    } 
     
       
    /**
     *  Swaps two elements in the list
     *  
     * @param  i   the position of one of the elements to be swapped
     * @param  j   the position of one of the elements to be swapped
     */
    public void swap(int i, int j)
    {
        int temp; 
        
           temp = list[i];
        list[i] = list[j];
        list[j] = temp;
        
    } 
       
    
    /**
     * "So the first shall be last, and the last first"
     *  -- The Christian Bible, book of Matthew 20:16
     */
    public void reverse()
    {   
       int i = 0; 
       int j = 3; 
       swap(i, j);
       i++;
       j--;
       swap(i, j);
        
    } 
 
    /**
     * Orders the elements of the list, with the first element smallest and the
     * last element largest.   Does this using the selection sort algorithm.
     */
    public void sortSelection()
    {
       /* This implementation uses the selection sort algorithm. For an
        * explanation of how bubblesort works, google ...
        *            selection sort java
        */
       
        for (int i = 0; i < 3; i++){
            int minPos = i;
       
            for (int j = i+1; j < 4; j++)
            {
               if (list[j] < list[minPos])
               {
                   minPos = j;
                }
            }
            swap(i, minPos);
        }
       
    } 
   
} 
