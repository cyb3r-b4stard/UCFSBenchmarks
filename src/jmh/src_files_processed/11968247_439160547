
/**
 * #### ##### ########## # ###### ###### ## ## ###### ########## #### ## ### ##
 * ## ########### ##### # ###'# ########## ######### ######.
 * 
 * @###### 
 * @####### 
 */
public class BinaryNumber
{
    /** instance variable */
    private String number;

    /** constructor */
    public BinaryNumber (String n)
    {
        number = n;
    }
        

    /** returns this binary number as a String of 1s and 0s */
    public String getNumber()
    {
        return number;    
    }

    /** returns the representation of this binary number where each bit has 
      * been moved to the left one position (a 0 is put in the rightmost position) */
    public BinaryNumber shiftLeft()
    {
        String newNumber = number.substring(1, number.length()) + "0";
        return new BinaryNumber(newNumber);    
    }

    /** returns the representation of this binary number where each bit has 
      * been moved to the right one position (a 0 is put in the leftmost position) */  
    public BinaryNumber shiftRight()
    {
        String newNumbers = "0" + number.substring(0, number.length()-1);
        return new BinaryNumber(newNumbers);    
    }
    
    /** returns the individual bit of this binary number at the given position
      * (starting on the far right as position 0) as either True (1) or False (0) */
    public boolean getBit(int pos)
    {
        return number.substring(number.length() - pos - 1, number.length() - pos).equals("1");  
    }

    /** returns the bitwise 'not' representation of this binary number 
      * (1s become 0s and 0s become 1s) */
    public BinaryNumber not()
    {
        String newNumber = "";
        for (int i = 0; i < number.length(); i++)
        {
            if(getBit(i))
            {
                newNumber = "0" + newNumber;
            }
            else 
            {
                newNumber = "1" + newNumber;
            }
    }
        return new BinaryNumber(newNumber);   
    }

    /** returns the bitwise 'and' representation of this and another binary number
      * ( 1 and 1 -> 1, 1 and 0 -> 0, 0 and 1 -> 0, 0 and 0 -> 0 ) */
    public BinaryNumber and(BinaryNumber other )
    {
        String newNumber = "";
        for (int i = 0; i < number.length(); i++)
        {
            if (this.getBit(i) && other.getBit(i))
                newNumber = "1" + newNumber;
                else
                newNumber = "0" + newNumber;  
    }
    return new BinaryNumber(newNumber);  
}

    /** returns the bitwise 'or' representation of this and another binary number
      * ( 1 or 1 -> 1, 1 or 0 -> 1, 0 or 1 -> 1, 0 or 0 -> 0 ) */   
    public BinaryNumber or(BinaryNumber other)
    {
             String newNumber = "";
        for (int i = 0; i < number.length(); i++)
        {
            if (this.getBit(i) || other.getBit(i))
                newNumber = "1" + newNumber;
                else
                newNumber = "0" + newNumber;  
    }
    return new BinaryNumber(newNumber);  
    }

    /** returns the bitwise 'xor' representation of this and another binary number
      * ( 1 xor 1 -> 0, 1 xor 0 -> 1, 0 xor 1 -> 1, 0 xor 0 -> 0 ) */
    public BinaryNumber xor(BinaryNumber other)
    {
                  String newNumber = "";
        for (int i = 0; i < number.length(); i++)
        {
            if (this.getBit(i) || other.getBit(i))&&(this.getBit(i) != other.getBit(i))
                newNumber = "1" + newNumber;
                else
                newNumber = "0" + newNumber;  
    }
    return new BinaryNumber(newNumber);  
    }

    /** returns the sum of this and another binary number */ 
    public BinaryNumber add(BinaryNumber other)
    {
        return null;    
    }

    /** returns the additive inverse value of the this binary number (equivalent 
      * to multiplying by -1 .)  Calculated by negating this binary number (using 
      * the 'not' method) and adding 1 to it. */
    public BinaryNumber twosComplement()
    {
        return null;    
    }

    /** returns the decimal value of this binary number using twosComplement */      
    public int binary2decimal()
    {
        return -1;      
    }

    /** returns the String representation of this binary number.
      * must include both a binary and decimal representation. */
    public String toString()
    {
        return "";      
    }
}