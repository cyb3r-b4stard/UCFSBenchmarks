
/**
 * ##### # ########### ## ##### ##### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class Bruch
{
    private int zaehler;
    private int nenner;
    private double bruch;
    private boolean gekuerzt;

    /**
     * Konstruktor für einen Bruch mit zaehler und nenner = 1
     */
    public Bruch()
    {
        zaehler = 1;
        nenner = 1;
    }

    /**
     * Zweiter Konstruktor der Nenner = 1 setzt und zaehler anfragt
     * @param zaehler
     */
    public Bruch(int zaehler)
    {
        nenner = 1;
        this.zaehler = zaehler;
    }
    
    /**
     * Dritter Konstruktor der Nenner und Zaehler abfragt.
     * @param nenner
     * @param zaehler
     */
    public Bruch(int zaehler, int nenner)
    {   
        setNenner(nenner);
        setZaehler(zaehler);
    }
    
    /**
     * Setzt den Zaehler und kürzt den Bruch.
     * @param zaehler
     */
    private void setZaehler(int zaehler) 
    {
        this.zaehler = zaehler;
        kuerzen();
        gekuerzt = false;
    }
    
    /**
     * Setzt den Nenner. Nenner muss != 0 sein. Gleichzeitig wird noch gekürzt.
     * @param nenner
     */
    private void setNenner(int nenner) 
    {
        if (nenner == 0) {
            throw new IllegalArgumentException("Nenner muss von Null verschieden sein.");
        }
        this.nenner  = nenner;
        gekuerzt = false;
        kuerzen();
    }
   
    /**
     * Setzt den Zaehler ohne zu kürzen.
     * @param zaehler
     */
   private void setZaehler2(int zaehler) 
    {
        this.zaehler = zaehler;
    }
    /**
     * Setzt den Nenner der != 0 sein muss und kürzt nicht.
     * @param nenner
     */
    private void setNenner2(int nenner) 
    {
        if (nenner == 0) {
            throw new IllegalArgumentException("Nenner muss von Null verschieden sein.");
        }
        this.nenner  = nenner;
    }
    
    /**
     * Gibt den Zaehler zurück
     * @retrun zaehler
     */
    private int getZaehler()
    {
        return zaehler;
    }
    
    /**
     * Gibt den Nenner zurück
     * @return nenner
     */
    private int getNenner()
    {
        return nenner;
    }
    
    /**
     * Gibt den Kleinstengemeinsamenteiler von zwei Zahlen zurück
     * @param zahl1
     * @param zahl2
     * @return x
     */
   private int ggT(int a, int b) 
   { 
    int x =java.lang.Math.abs(a); 
    int y = java.lang.Math.abs(b); 
    int r;
    if (a != 0) 
    {
    while ( y != 0) 
    {
        r = x % y; 
        x = y;
        y = r;
    }
    }
    else x = 1;
    return x;
   }
   
   /**
    * Diese Methode kürzt den Bruch
    */
   private void kuerzen()
   {
      int ggt = ggT(getZaehler(), getNenner());
      int a = getZaehler() / ggt;
      int b = getNenner() / ggt;
      setNenner2(b);
      setZaehler2(a);
   }
   
   private void addiere(Bruch bruch)
   {
       int a = getZaehler();
       int b = getNenner();
       int c = Bruch.getZaehler();
   
}