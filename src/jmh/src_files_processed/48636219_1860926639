import java.util.*;
/**
 * ###### ##### ####### # ### ## ##### ######### ## ###### ## ####
 * #### ####### #######
 * 
 * @###### ### ###### ######## 
 * @####### ##/##/####
 */
public class Surgery
{
   private Map<String, Set<String>> doctor;

   /**
    * Constructor for objects of class Surgery
    */
   public Surgery()
   {
      doctor = new HashMap<>();
   }

   /**
    * Populates map with test data
    */
   public void testPatient()
   {
      Set<String> patient = new HashSet<>();
      doctor = new HashMap<>();
      patient.add("Mr Kevin Jones");
      patient.add("Miss Catherine Smith");
      patient.add("Mr David Kumar");
      patient.add("Ms Angela Roberts");
      doctor.put("Dr T Guraji", patient);
      
      patient = new HashSet<>();
      patient.add("Miss Katie Parkes");
      patient.add("Mrs Deepal Patel");
      patient.add("Mr Richard Buck");
      patient.add("Mr Alan Jones");
      doctor.put("Dr B Kushna", patient);      
   }
   
   /**
    * Prints contents of the Map upon calling method
    * 
    * @param   no arguments
    * @return  no return statement 
    */
   public void printMap()
   {
      Set<String> patientKeys = doctor.keySet();
      for (String eachPatient: patientKeys)
      {
         System.out.println(doctor.get(eachPatient));
      }
   }
   
   
   /**
    * Prints a set in the map using iteration and a given key value
    * 
    * @param   argument doctorName for selection
    * @return  patients with doctorName key
    */
   public void printMapValue(String doctorName)
   {
      if (doctor.containsKey(doctorName))
      {
         System.out.println("Patients with " + doctorName + ":" + doctor.get(doctorName));
      }
      else
      {
         System.out.println(doctorName + " was not found");
      }
   }
   
    /**
    * Creates a new key (doctor) and set with a patient to add to Surgery map
    * 
    * @param   argument newDoctor and newPatient to be added to map
    * @return  no return statement
    */
   public void addMapEntry(String newDoctor, String newPatient)
   {
      Set<String> patient = new HashSet<>();
      if (doctor.get(newDoctor) == null)
      {
         patient.add(newPatient);
         doctor.put(newDoctor, patient);
      }
   }
   
    /**
    * Deletes a patient in a set using given patient and doctor (key)
    * 
    * @param   argument aDoctor and aPatient used to identify patient for which to remove
    * @return  no return statement
    */
   public void deleteEntry(String aDoctor)
   {
      if (doctor.containsKey(aDoctor))
      {
         doctor.remove(aDoctor);
      }
      else
      {
         System.out.println(aDoctor + " was not found and couldn't be deleted");
      }
   }
   
    /**
    * Adds new patient to existing key set in map
    * 
    * @param   argument newPatient to be added to map
    * @return  no return statement
    */
   public void addValue(String aDoctor, String newPatient)
   {
      Set<String> patient = new HashSet<>();
      for (doctor.get(aDoctor))
      {
         patient.add(newPatient);
         doctor.put(aDoctor, patient);
      }
   }
}











