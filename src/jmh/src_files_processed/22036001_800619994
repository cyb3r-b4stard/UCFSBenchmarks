
/* #### ### #### ### ########## #
 * ####:######## #####
 * ########:
 * ##:#########
 */

import ecs100.*;
import java.awt.Color;
import javax.swing.JColorChooser;

public class MiniPaint{

    /*# YOUR CODE HERE */
    private String shape = "line"; 
    private String action;
    private double startX; 
    private double startY;
    private double finX; 
    private double finY;

    private int fill = 0;

    /** Sets up the user interface - mouselistener and buttons */
    public MiniPaint(){
        /*# YOUR CODE HERE */

        UI.addButton("Quit", UI::quit);
        UI.addButton("Rectangle", this::Rect);
        UI.setMouseListener(this::doMouse);
        this.startX = startX;
        this.startY = startY;
        this.finX = finX;
        this.finY = finY;
    }

    /**
     * Respond to mouse events
     * When pressed, remember the position.
     * When released, draw the current shape using the pressed position
     *  and the released position.
     * Uses the value in the field to determine which kind of shape to draw.
     * Although you could do all the drawing in this method,
     *  it may be better to call some helper methods for the more
     *  complex actions (and then define the helper methods!)
     */
    public void doMouse(String action, double x, double y) {
        /*# YOUR CODE HERE */
        if (action.equals("pressed")){
            this.startX = x;
            this.startY = y;
        }
        else if (action.equals("relased")){
            this.finX = x;
            this.finY = y;
            if(shape.equals("rectangle"){

            }
        }
        else if (action.equals("clicked")){
            this.startX = x;
            this.startY = y;
        }

        if (shape.equals("rectangle")){
            this_method should call the drawARectangele Method 



        }

    }

    public void Rect(){
        shape = "rectangle" ;

    }
    
    public void drawARectangle(double x, double y){
        double width = finX - startX;
        double height = finY - startY;
        UI.drawRect(startX, startY, width, height);

    }

    

    

    /*public void drawAnOval(double x, double y)

    public void drawAnImage(double x, double y)

    public void drawRings(double x, double y)

    /*# YOUR CODE HERE */

}