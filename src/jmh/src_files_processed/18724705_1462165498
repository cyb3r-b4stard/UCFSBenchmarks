/**
 * #### ##### ######### # #### ## # ########.
 * 
 * #### #### ## ###### ### ####### ## ## ###### ######## ####### ###
 * #### ###### ## ########.  #####, #### ## #### #### ####, ## ####
 * ##### ####### ##### ### ###### ## ######## ### ####. 
 * 
 * ## #### ####### #, ## ### ######### ## ### ##########.
 * 
 * @###### ####### ###### 
 * @####### ###### ####
 * 
 */
public class ListOf4V2PartA
{
    private static final int listSize = 4;
    
    private int[] list = {0, 1, 2, 3};

    
    /**
     * A constructor for objects of class ListOf4, which takes four parameters
     * 
     * @param  one   an initial element for the list, the first element.
     * @param  two   an initial element for the list
     * @param  three an initial element for the list
     * @param  four  an initial element for the list, the last element.
     */
    public returnTypeIfAny ListOf4V2PartA(int one, int two, int three, int four)
    {
        list[0] = one;
        list[1] = two;
        list[2] = three;
        list[3] = four;
       
        
    } 
    
    /**
     * @return     the number of elements stored in this list 
     */
    public int getListSize()
    {
        return listSize;
        
    } 
    
    /**
     * @return     the last element in the list
     */
    public int getLast()
    {
        return last;
        
    } 
      
    
    /**
     * prints the contents of the list, in order from first to last
     */
    public returntype printList(parametersIfAny)
    {
      System.out.print("{");
          
      int i = initial value; 
      System.out.print(list[array subscript]);
      i = updated value;
      System.out.print(", " + list[array subscript]);

      copy and paste some of the code above, as many times as required
      
      System.out.print("}");
        
    } 
            
    
    /**
     * prints the contents of the list, in order from first to last, and
     * then moves the cursor to the next line
     */
    public void printlnList()
    {
        printList();
        System.out.println();
        
    } 
    
    /**
     * @return     the number of times the element occurs in the list
     * 
     * @param  element   the element to be counted
     */
    public returntype countElement(parametersIfAny)
    {
       int count = 0; 
        
       int i = initial; 
       if ( list[subscript] == something ) doSomething;
       i = updatedVal;
       
       copy and paste some of the code above, as many times as required
      
       return returnValue;
        
    } 
                    
    /**
     * @return     the number of times the replacement was made
     * 
     * @param  replaceThis   the element to be replaced
     * @param  withThis      the replacement
     */
    public returntype replaceAll(parametersIfAny)
    {
        int count = 0; 
            
        int i = beginning value; 
 
        if ( list[sub] == something )
        {
           list[sub] = something;
           increment something;
        }

        increment something;
       
        copy and paste some of the code above, as many times as required
 
        return count;
        
    } 
    
    /**
     * @return     the first position in list occupied by the parameter value, or -1 if it is not found
     * 
     * @param  findThis   the value to be found
     */
    public returntype findUnSorted(parametersIfAny)
    {  


        int pos = initialValueForPos;
        if ( list[subscript] == something ) return whatever;
        pos = updatedVal;
  
        copy and paste some of the code above, as many times as required
        
        return notFound;
    
    } 
    
    
    /**
     * @return     the position of the smallest element in the array
     */
    public returntype minPos(parametersIfAny)
    {
        int mostWantedHolder = initial value;  
        
        int i = initial value; 
 
        if ( list[subscript1] < list[subscript2] )
        {
           update mostWantedHolder
        }
 
        i = newVal;
 
        copy and paste some of the code above, as many times as required
 
        return theAppropriateValue;
        
    } 
     
       
    /**
     *  Swaps two elements in the list
     *  
     * @param  i   the position of one of the elements to be swapped
     * @param  j   the position of one of the elements to be swapped
     */
    public void swap(int i, int j)
    {
        int temp; 
        
           temp = list[i];
        list[i] = list[j];
        list[j] = temp;
        
    } 
       
    /**
     * Orders the elements of the list, with the first element smallest and the 
     * last element largest.  Does this using the bubblesort algorithm.
     */
    public returntype sortBubble(parametersIfAny)
    {
       /* This implementation uses the bubble sort algorithm. For an explanation
        * of how bubblesort works, google ...
        *            bubblesort java
        */
       
       int i = initialize i; 
 
       if ( list[subscript1] > list[subscript2] ) swap(subscript3, subscript4);
       i = nextVal;
       copy and paste some of the code above, as many times as required
           
       
       reinitialize i
       copy and paste some of the code above, as many times as required
       
        
       reinitialize i
       copy and paste some of the code above, as many times as required
       
        
    } 

} 
