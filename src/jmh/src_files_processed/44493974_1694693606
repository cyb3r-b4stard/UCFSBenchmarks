  import java.util.*;
/**
 * ##### # ########### ## ##### ################### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class EfficientMarkovWord implements IMarkovModel 
{
    private String[] myText;
    private Random myRandom;
    private int myOrder;
    private HashMap<Integer, ArrayList<String>> map;
    
    
    public EfficientMarkovWord(int n) {
        myRandom = new Random();
        myOrder = n;
    }
    
    public void setRandom(int seed) {
        myRandom = new Random(seed);
    }
    
    public void setTraining(String text){
        myText = text.split("\\s+");
    }
    
    public String getRandomText(int numWords){
        StringBuilder sb = new StringBuilder();
        int index = myRandom.nextInt(myText.length-myOrder);  
        WordGram kGram = new WordGram(myText, index, myOrder);
        sb.append(kGram);
        sb.append(" ");
        for(int k=0; k < numWords-myOrder; k++){
            ArrayList<String> follows = getFollows(kGram);
            if (follows.size() == 0) {
                break;
            }
            index = myRandom.nextInt(follows.size());
            String next = follows.get(index);
            sb.append(next);
            sb.append(" ");
            WordGram newKGram = new WordGram(myText, index + 1, myOrder);
            kGram = kGram.shiftAdd(next);
        }
        
        return sb.toString().trim();
    }
    
    private int indexOf(String[] words, WordGram target, int start) {
        for (int k = start; k < words.length - myOrder; k++) {
            WordGram compare = new WordGram(words, k, target.length());
            if (compare.equals(target)) {
                return k;
            }
        }
        return -1;
    }
    
    private ArrayList<String> getFollows(WordGram kGram) {
        ArrayList<String> follows = new ArrayList<String>();
        int pos = 0;
        while (pos < myText.length - myOrder) {
            int index = indexOf(myText, kGram, pos);
            if (index == -1 || index >= myText.length - myOrder) {
                break;
            }
            follows.add(myText[index+myOrder]);
            pos = index + 1;
        }
        return follows;
    }
    
    public HashMap<int, ArrayList<String>> buildMap() {
        map = new HashMap<Integer, ArrayList<String>>();
        for (int k = 0; k < myText.length - myOrder; k++) {
            WordGram key = new WordGram(myText, k, myOrder);
            String convert = key.toString();
            int myHash = convert.hashCode();
            
            ArrayList<String> follows = getFollows(key);
            map.put(myHash, follows);
        }
        return map;
    }
}