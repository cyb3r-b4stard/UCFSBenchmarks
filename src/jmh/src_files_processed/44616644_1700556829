import java.util.ArrayList;

public class Game 
{
    private Parser parser;
    private Room currentRoom;
    Room outside, grounds, forest, dragon, castle, kitchen;
    ArrayList<Item> inventory = new ArrayList<Item>();
     
    /**
     * Create the game and initialise its internal map.
     */
    public Game() 
    {
        createRooms();
        parser = new Parser();
    }

    /**
     * Create all the rooms and link their exits together.
     */
    private void createRooms()
    {
      
        outside = new Room("outside the castle");
        grounds = new Room("marching around the grounds");
        forest = new Room("lost in a forest");
        dragon = new Room("dragon");
        castle = new Room("investigating a castle");
        kitchen = new Room("rummaging around the kitchen");
        
        outside.setExit("south", grounds);
        outside.setExit("north", castle);

        grounds.setExit("west", forest);
        grounds.setExit("north", outside);

        forest.setExit("north", dragon);
        forest.setExit("east", grounds);

        dragon.setExit("south", forest);

        castle.setExit("east", kitchen);
        castle.setExit("south", outside);
        
        kitchen.setExit("west", castle);
        kitchen.setItem(new Item("sword"));

        currentRoom = outside;  
        
        
        }

    /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();

                
        boolean finished = false;
        while (! finished) {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing.  Good bye.");
    }

    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to Dark Castle!");
        System.out.println("Find the Dragon and Slay it.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println(currentRoom.getLongDescription());
    }

    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help")) 
        {
            printHelp();
        }
        else if (commandWord.equals("go")) 
        {
          wantToQuit = goRoom(command);
        }
        else if (commandWord.equals("quit")) 
        {
            wantToQuit = quit(command);
        }
        else if (commandWord.equals("inventory")) 
        {
            printInventory();
        }
        else if (commandWord.equals("get"))
        {
            getItem(command);
        }
        else if (commandWord.equals("drop"))
        {
            dropItem(command);
        }
        return wantToQuit;
    }
    
    private void printInventory() {
        String output = " ";
        for (int i = 0; i < inventory.size(); i++) 
        {
            output += inventory.get(i).getDescription();
            System.out.println("\nYou are carrying:\n " + output);
        }
        }


    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You must find and slay the dragon.");
        System.out.println();
        System.out.println("Your command words are:");
        parser.showCommands();
    }

    private boolean goRoom(Command command) 
    {
        if(!command.hasSecondWord()) 
        {
            System.out.println("Go where?");
            return false;
        }
    
        String direction = command.getSecondWord();
       
        Room nextRoom = currentRoom.getExit(direction);
        if (nextRoom == null) 
        {
            System.out.println("There is no door!");
        }
        else if( 
            currentRoom = nextRoom);
            System.out.println(currentRoom.getLongDescription());
        
        else if(
           
            currentRoom = dragon && inventory.contains("sword");
            System.out.println("You Win!");
            return true;
            }
        }
        return false;
    }
    
    private void getItem(Command command) 
    {
        if(!command.hasSecondWord()) 
        {
            System.out.println("Get what?");
            return;
        }

        String item = command.getSecondWord();
        
        Item newItem = currentRoom.getItem(item);
        if (newItem == null) 
        {
            System.out.println("That item is not here.");
        }
        else {
            inventory.add(newItem);
            currentRoom.removeItem(item);
            System.out.println("Picked up:" +item);
        }
    }
    
    private void dropItem(Command command) 
    {
        if(!command.hasSecondWord()) 
        {
            System.out.println("Drop what?");
            return;
        }

        String item = command.getSecondWord();

        
        Item newItem = null;
        int index = 0;
        for (int i = 0; i < inventory.size(); i++) 
        {
            if (inventory.get(i).getDescription().equals(item))
            {
                newItem = inventory.get(i);
                index = i;
            }
        }
                

        if (newItem == null) 
        {
            System.out.println("That item is not in your inventory.");
        }
        else {
            inventory.remove(index);
            currentRoom.setItem(new Item(item));
            System.out.println("Dropped:" +item);
        }
    }
    
    /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) 
        {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  
        }
    }
}