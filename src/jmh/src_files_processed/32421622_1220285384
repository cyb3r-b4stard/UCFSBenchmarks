import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.ArrayList;
import java.io.File;



public class WordLists
{
    private File dictionaryFile;        
    public WordLists(String fileName)
    {
        
        dictionaryFile = new File(fileName);
        
    }


    public String[] lengthN(int n)
    {
        ArrayList<String> specificLength = new ArrayList<String>();
        Scanner in1 = new Scanner(dictionaryFile);
        String followingWord = in1.next();
        char character = in1.next().charAt(0);
        while (followingWord.())
        {
            if (followingWord.length()==(n))
            {
                specificLength.add(followingWord);
            }
         
       
        }
        String[] stringArray = specificLength.toArray(new String[specificLength.size()]);
        return stringArray;
    }
        

    public String[] startsWith(int n, char firstLetter)
    {
        ArrayList<String> specificLength = new ArrayList<String>();
        Scanner in1 = newScanner(dictionaryFile);
        String followingWord = in1.next();
        char character = in1.next().charAt[0];
        while (followingWord.hasNext())
        {
            if (followingWord.length()==(n) && Character.equals(firstLetter))
            {
                specificLength.add(followingWord);
            }
         
       
        }
        String[] stringArray = specificLength.toArray(new String[specificLength.size()]);
        return stringArray;
    }


    public String[] containsLetter(int n, char included)
    {
        ArrayList<String> specificLength = new ArrayList<String>();
        Scanner in1 = newScanner(dictionaryFile);
        String followingWord = in1.next();
        char character = in1.next().charAt[i];
        boolean check = false;
        while (followingWord.hasNext())
        {
            for (int i = 1; i<= followingWord.length; i++)
            {
                if (Character.equals(included))
                {
                    check = true;
                }
            }
            if (followingWord.length()==(n) && check = true)
            {
                specificLength.add(followingWord);
            }
        }
        String[] stringArray = specificLength.toArray(new String[specificLength.size()]);
        return stringArray;   

        

    }

    public String[] vowelHeavy(int n, int m)
    {
        ArrayList<String> specificLength = new ArrayList<String>();
        Scanner in1 = newScanner(dictionaryFile);
        String followingWord = in1.next();
        int vowelCount = 0;
        char character = in1.next().charAt[i];
        while (followingWord.hasNext())
        {
            for (int i = 0; i<followingWord.length; i++)
            {
                if (Character.equals('a'))
                {
                    vowelCount++;
                }
                else if (Character.equals('e'))
                {
                    vowelCount++;
                }
                else if (Character.equals('i'))
                {
                    vowelCount++;
                }
                else if (Character.equals('o'))
                {
                    vowelCount++;
                }
                else if (Character.equals('u'))
                {
                    vowelCount++;
                }
            }
            if (followingWord.length()==(n) && vowelCount==m)
            {
                specificLength.add(followingWord);
            }
            String[] stringArray = specificLength.toArray(new String[specificLength.size()]);
            return stringArray;

        }
    }
    public String[] multiLetter(int m, char included)
    {
        ArrayList<String> specificLength = new ArrayList<String>();
        Scanner in1 = newScanner(dictionaryFile);
        String followingWord = in1.next();
        int includedCount = 0;
        char character = in1.next().charAt[i];
        while(followingWord.hasNext())
        {
            for (int i = 0; i<followingWord.length; i++)
            {
                if (character.equals(included))
                {
                    includedCount++;
                }
            }
            if (includedCount>=m)
            {
                specificLength.add(followingWord);
            }
            String[] stringArray = specificLength.toArray(new String[specificLength.size()]);
            return stringArray;

        }

    } 
}