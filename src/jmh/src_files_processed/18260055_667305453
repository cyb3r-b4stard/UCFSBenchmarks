
/**
 * #### ##### ##### # #### ####, #### ### ######### ## #### ###### ### ###### ##, ### ######## # 
 * ####### #### # ### # #######.
 * 
 * @###### #### ########
 * @####### #/#/##
 */
import java.util.Scanner;
import java.io.File;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
public class CeasarCipher
{
  
  public static ArrayList<Integer> readFile(String file) throws IOException
  {
      int token;
        
     Scanner inFile = new Scanner(new File(file));
     ArrayList<Integer> tokens = new ArrayList<Integer>();
    
     while (inFile.hasNext())
      {
          String x = inFile.next();
          token = Integer.parseInt(x);
          tokens.add(token);
      }
     
      inFile.close(); 
      return tokens;
    }
    
  public static int [] getFrequency(String file) throws IOException
  {
      ArrayList<Integer> tokens = readFile(file);
     
     int [] frequency = new int[128];

     ArrayList<Integer> individualToken = new ArrayList<Integer>();
     
      int count = 0;
     for(int i = 0; i < tokens.size(); i ++)
     {
         individualToken.add(tokens.get(i));
         count = individualToken.size() + count;
         for(int a =0; a < 128; a++)
         {
         for(int c =0 ; c < individualToken.size(); c++)
         {
         if(individualToken.get(c) == a)
         {
             frequency[a] = frequency[a] +1;
           }
        }
        }
       }
      
      return frequency;
    }

    
  public static int determineKey(String file)throws IOException
  {
       int [] frequency = getFrequency(file);
       int mostFrequent = 0;
       int maxIndex = 0;
       for (int i = 0; i < frequency.length; i++) {
           if (frequency[i] > mostFrequent) {
               mostFrequent = frequency[i];
               maxIndex = i;
            }
        }
       int key = (mostFrequent-32)%128;
      return key;
    }
    
  public static void Decrypt(String file)throws IOException
  {
      int key = determineKey(file);
      ArrayList<Integer> tokens = readFile(file);
      ArrayList<Integer> decrypted = new ArrayList<Integer>();
      for(Integer i : tokens){
        decrypted.add(i - key);
        }
}