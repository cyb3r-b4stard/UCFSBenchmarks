
/**
 * ######### ###### ########.
 * 
 * @#### #. #####
 * @#####-## 
 */
public class RecMethods
{
    int n;
    public void int print1ToN(int n)
    {
        if (n==1)
            System.out.println (n);
        else
        {
            print1ToN(n-1);
            System.out.println(n);
        }
    }
    public void printNDownTo1(int n)
    {
        if (n == 1)
            System.out.println (n);
        else
        {
            System.out.println(n);
            printNDownTo1(n-1);     
        }
    }
    public int sum(int[] list, int n)
    {   
        if (n == 0)
           return 0;
        else 
        {
            return sum(list, n-1) + list[n-1];
        }
    }
    public int countPositive(int[]list, int n)
    {
        if (n==0)
            return 0;
        else if (list[n-1] > 0)
            return 1 + countPositive(list,n-1);
        else
            return countPositive(list,n-1);
    }
    public int largest(int[]list, int n)
    {
        if (n==1)
            return list[0]; 
        else 
        {
            int temp = largest(list, n-1);
            if (temp>list[n-1])
                return temp;
            else 
                return list[n-1];
        }
    }
    public void printList (int[] list, int n)
    {
        if (n > 1)
            printList(list, n-1);
        System.out.print(list[n-1] +  "    ");
    }
    public void assignOne (int[] list, int n)
    {
        if (n > 1)
           assignOne(list, n-1);
        list[n-1] =1;
    }
    public void assignList1ton(int[] list, int n)
    {
        if (n > 1)
        {
            assignList1ton(list, n-1);
            list[n-1] = n;
        }
    }
    public void assignPowersof2 (int[]list, int n)
    {
        if (n == 1)
            list[0]=1;
        else    
        {
            assignPowersof2(list, n-1);
            list[n-1] = 2*list[n-2];
        }   
    }
    public void recInsertionSort(int[] list, int n)
    {
        if (n > 1)
            recInsertionSort(list, n-1); 
            int key = list[n-1];         
            int count = n-1;
            while (count > 0 && key < list[count -1])
            {
                list[count]=list[count-1];
                count--;                
            }
     }
    public void insertionSort(int[] list, int n)
    {
        if (n > 1)
        {
            insertionSort(list, n-1); 
            
            int position = n-1;
            int key = list[position];
            while (position > 0 && key < list[position-1])
            {
                list[position] = list[position-1];
                position--;
            }
            list[position]=key;            
        }
    }
    public void insertionSortObj(Comparable[] list, int n)
    {
        if (n > 1)
        {
            insertionSortObj(list, n-1); 
            
            int position = n-1;
            Comparable key = list[position];
            while (position > 0 && key.compareTo(list[position-1]) < 0)
            {
                list[position] = list[position-1];
                position--;
            }
            list[position] = key;            
        }
    }
    public void hanoi (int n, char from, char aux, char dest) 
    {
        if (n==1)
            System.out.println( from + " -> " + dest);
        else 
            {
                hanoi (n-1, from , dest, aux);
                System.out.println( from +  " -> " + dest);
                hanoi (n-1, aux, from, dest); 
            }
    }
    public double power(double a, int n)
    {
        if (n==0)
            return 1;
        else 
               return a * power(a, n-1);
                
    }
    public double powersHalved (double a, int n)
    {
        
        if (n==0)
            return 1;
        else if (n%2==0)
            return powersHalved (a, n/2)*powersHalved(a, n/2);
        else
            return a * powersHalved(a, n/2) * powersHalved(a, n/2); 
    }
        public double powersDividedByThree (double a, int n)
    {
        
        if (n==0)
            return 1;
        else
        {
            double temp = powersDividedByThree(a, n/2);
            if (n%2==0)
                return temp*temp;
            else
                return a * temp * temp; 
        }
    }
}
        


