import java.util.ArrayList;
/**
 * ##### # ########### ## ##### ##### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
public class logic
{
    private static final int NOT=0;
    private static final int OR=1;
    private static final int AND=2;
    private static final int CONDITIONAL=3;
    private static final int BICONDITIONAL=4;
    /**
     * Constructor for objects of class logic
     */
    public logic()
    {
     

        
        
        
        
        
        /*do{
        
            System.out.println("combinación: " + i);
            
            
                
            
            for(boolean b:vars){
                
                System.out.println("vars: " + b);
            }
            
            i++;

                
        }
        while(i<combinations);*/
        
        char[] propositions=new char[]{'p','q','r','s'};
        String formula="(p -> q)";
        logicTree(formula);
        
        System.out.println("combinaciones: " + trueTable(new char[]{'p'},NOT));
        System.out.println();
        System.out.println("combinaciones: " + trueTable(propositions,OR));
        System.out.println();
        System.out.println("combinaciones: " + trueTable(propositions,AND));
        System.out.println();
        System.out.println("combinaciones: " + trueTable(propositions,CONDITIONAL));
        System.out.println();
        System.out.println("combinaciones: " + trueTable(propositions,BICONDITIONAL));
        
       
        /*for(ArrayList list:combinaciones)
            System.out.println(list.toString());*/
        /*int i=0;
        do{
        
            System.out.println("combinación: " + i);
            
            
            for(boolean b:vars){
                
                System.out.println("vars: " + b);
            }
            
            i++;

                
        }
        while(i<combinations);*/
        
        /*System.out.println(" p  |  !");
        System.out.println("----------");
        for(int p=0;p<=1;p++)
                    System.out.println(p + " | " + (p==0 ? 1 : 0));
       
        
        System.out.println(" p  q  |  ^");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                    System.out.println(p + " " + q + " | " + (p & q));

        System.out.println(" p  q  |  v");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                    System.out.println(p + " " + q + " | " + (p | q));            
                    
        System.out.println(" p  q  |  <->");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                    System.out.println(p + " " + q + " | " + (p = q));                       
                    
                    
        System.out.println(" p  q  |  <->");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                    System.out.println(p + " " + q + " | " + (p == q));                       
                    
        */
/*        System.out.println(" p  q  r  |  ^");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                for(int r=0;r<=1;r++)
                    System.out.println(p + " " + q + " " + r + " | " + (p & q & r));
                    
                    
       System.out.println("\n p  q  r  |  v");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                for(int r=0;r<=1;r++)
                    System.out.println(p + " " + q + " " + r + " | " + (p | q | r)); 
                    
                    
       System.out.println("\n p  q  r  |  v");
        System.out.println("--------------");
        for(int p=0;p<=1;p++)
            for(int q=0;q<=1;q++)
                for(int r=0;r<=1;r++)
                    System.out.println(p + " " + q + " " + r + " | " + (p | q | r));             */
    }

    private void logicTree(String formula){
        System.out.println("formula: " + formula);
        
        for(String sub:formula.split("[\\(||
            System.out.println("sub: " + sub);
            if(sub.length()>0)
               analize(sub); 
        }
     
        System.out.println();
    }
    
    
    private void analize(String s){
        
        String pattern("(!)(|)(&)(>)(<)");
        Pattern p = Pattern.compile(pattern);
       
        Matcher m = r.matcher(s);
        
        if (m.find( )) {
            System.out.println("Found value: " + m.group(0) );
            System.out.println("Found value: " + m.group(1) );
            System.out.println("Found value: " + m.group(2) );
            System.out.println("Found value: " + m.group(3) );
            System.out.println("Found value: " + m.group(4) );
        } else {
            System.out.println("NO MATCH");
        }
        
        
        
        /*Pattern p = Pattern.compile("[a-z]");
        
        for(
        Matcher m = p.matcher(s.split());
        boolean b = m.matches();
        
        if(b)*/
            
        
        /*for(char c:sub.toCharArray()){
            
        }*/
        /*int bracket=0;
            boolean subform=false;
            for(char c:formula.toCharArray()){
                String kk="(p v q)";
                kk.
                if(c==('('))
                    {
                        bracket++;
                        subform=true;
                    }
                else if(c==(')')){
                    bracket--;
                    subform=false;
                }    
                
                if(subform){
                     System.out.print(c);
                    /*switch(operator){
                        case OR:
                            System.out.print("v\n");
                        break;
                        case AND:
                            System.out.print("^\n");
                        break;
                    }
                }
            }*/
    }
    
     /*private void combina(int vars,int value){
        
         System.out.println("combi: " + value);

         boolean[] variables=new boolean[vars];
         
         if(value<vars)
         {
            
            
            int tmp=value;
            
             do{
                
                
                variables[value]=true;
                                
                variables[tmp]=!variables[tmp];
                
                for(boolean b:variables){                
                         System.out.println(tmp + " - value: " + b);
                        }
                
                tmp++;
                
            }while(tmp<vars);
                
            
            value++;
            
            combina(vars,value);             
         }
         
        }
        */
     /*private void combina(boolean[] vars,int value , int combinacion,final int combinaciones){
        
         System.out.println("combinacion: " + combinacion);
         if(combinacion<=combinaciones)
         {
            for(int i=value;i<vars.length;i++)
                vars[i]=!vars[i];                
                
            for(boolean b:vars){                
                 System.out.println("vars: " + b);
            }            

            combinacion++;     
            value++;
            
            if(value>vars.length)
                value=0;
            combina(vars,value,combinacion,combinaciones);             
            }         
            
         
        }*/
        
         private int trueTable(char[] propositions,final int operator){
            int g=0;
            int n=propositions.length;
            
            for(char c:propositions)
                    System.out.print(c + " ");

            System.out.print("| ");
            switch(operator){
                        case NOT:
                            System.out.print("¬\n");
                        break;
                        case OR:
                            System.out.print("v\n");
                        break;
                        case AND:
                            System.out.print("^\n");
                        break;
                        case CONDITIONAL:
                            System.out.print("->\n");
                        break;
                        case BICONDITIONAL:
                            System.out.print("<->\n");
                        break;
                    }
            
            /*int bracket=0;
            boolean subform=false;
            for(char c:formula.toCharArray()){
                String kk="(p v q)";
                kk.
                if(c==('('))
                    {
                        bracket++;
                        subform=true;
                    }
                else if(c==(')')){
                    bracket--;
                    subform=false;
                }    
                
                if(subform){
                     System.out.print(c);
                    /*switch(operator){
                        case OR:
                            System.out.print("v\n");
                        break;
                        case AND:
                            System.out.print("^\n");
                        break;
                    }
                }
            }*/

            int separator=(n*2+4);

            for(int i=0;i<separator;i++)
                System.out.print("-");
              
            System.out.println();
                   
            boolean[] tmp=new boolean[n];
            
            for(int i=0;i<n;i++){
                tmp[i]=!tmp[i];
            }
            
            show(tmp,operator);
            
            if(n>1){
                for(int i=0;i<n;i++){
                    tmp=new boolean[n];
                    tmp[i]=true;                    
                    show(tmp,operator);
                }
            }

            
            if(n>2){
                while(g<n)
                {
                    int z=0;
                    for(int x=g;x<(n-1);x++){
                          tmp=new boolean[n];
                              
                          if((x+1)>(n-1))
                                {
                                    g++;
                                    z=0;
                                }
                          
                          int i=0;
                        
                          tmp[g]=true;
                          
                          while(i<1){                             
                              i++;                          
                              if((g+z+i)<n)
                                tmp[g+z+i]=true;   
                              else   
                                tmp[z+i]=true;   
                          }
                           
                           show(tmp,operator);
                           z++;
                    }
                    g++;
                }
            }
            
            tmp=new boolean[n];
            show(tmp,operator);
            /*else{
                tmp=new boolean[n];
                
                for(int r=0;r<2;r++)
                    {
                                    tmp[r+1]=true;
                    }
                
                show(tmp);
            }*/
            
            return ((Double) Math.pow(2,n)).intValue();
    }
        
        
        
       /* private int Combinacion(int n){
            int g=0;
            
              
            
            boolean[] tmp=new boolean[n];
            show(tmp);
            
            for(int i=0;i<n;i++){
                tmp[i]=!tmp[i];
            }
            
            show(tmp);
            
            if(n>1){
                for(int i=0;i<n;i++){
                    tmp=new boolean[n];
                    tmp[i]=true;                    
                    show(tmp);
                }
            }

            
            
            if(n>2){
                System.out.println("-------");
                while(g<n)
                {
                    int z=0;
                    for(int x=g;x<(n-1);x++){
                          tmp=new boolean[n];
                              
                          if((x+1)>(n-1))
                                {
                                    g++;
                                    z=0;
                                }
                          
                          int i=0;
                        
                          tmp[g]=true;
                          
                          while(i<1){                             
                              i++;                          
                              if((g+z+i)<n)
                                tmp[g+z+i]=true;   
                              else   
                                tmp[z+i]=true;   
                          }
                           
                           show(tmp);
                           z++;
                    }
                    g++;
                }
            }
            else{
                tmp=new boolean[n];
                
                for(int r=0;r<2;r++)
                    {
                                    tmp[r+1]=true;
                    }
                
                show(tmp);
            }
            
            return ((Double) Math.pow(2,n)).intValue();
    }*/
   
    private void show(boolean[] vars, final int operator){
        boolean b=vars[0];
        boolean result=b;
        
        System.out.print((b?1:0) + " ");
    
        for(int i=1;i<vars.length;i++)
           {
               b=vars[i];
               System.out.print((b?1:0) + " ");
               switch(operator){
                   case NOT: 
                    result=!b;  
                   break;
                   case OR: 
                    result=(result|b);  
                   break;
                   case AND:
                    result=(result&b);  
                   break;
                   case CONDITIONAL:
                    result=(!result|b);  
                   break;
                   case BICONDITIONAL:
                    result=(result==b);  
                   break;
                }               
            }
        
        if(operator!=NOT)            
            System.out.print("| " + (result?1:0));            
        else
            System.out.print("| " + (result?0:1));            
                    
        System.out.println();
    }
    /*
     private ArrayList<ArrayList<Integer>> Combinacion(int n){
        int g=1;
        
        ArrayList<ArrayList<Integer>> combinacion=new ArrayList<ArrayList<Integer>>();
               
        
        
        if(n!=2){
            while(g<n)
            {
                int z=0;
                for(int x=g;x<n;x++){
                      ArrayList<Integer> elementos=new ArrayList<Integer>();
                          
                      if((x+1)>n)
                            {
                                g++;
                                z=0;
                            }
                      
                      int i=0;

                      elementos.add(g);  
                      
                      while(i<1){                             
                          i++;                          
                          if((g+z+i)<=n)
                            elementos.add(g+z+i);   
                          else   
                            elementos.add(z+i);   
                      }
                       
                       combinacion.add(elementos);                                          
                       z++;
                }
                g++;
            }
        }
        else{
            ArrayList<Integer> elementos=new ArrayList<Integer>();               

            for(int r=0;r<2;r++)
                {
                                elementos.add(r+1);
                }
            
            combinacion.add(elementos);
        }

        return combinacion;
    }
    */
   
    /*private void trueTable(int values,){
    }*/
    
    /**
     * An example of a method - replace this comment with your own
     * 
     * @param  y   a sample parameter for a method
     * @return     the sum of x and y 
     */
    /*public int sampleMethod(int y)
    {
        return x + y;
    }*/
}