import java.awt.*;
import javax.swing.*;
import java.awt.print.*;

/** # ###### ####### ##### #### #### ### #### ###### #####
* ## ######### #########. #### #### ### ######### ## ###
* ##############.##############. ### ######### ### #### ##
* ##### #####'# #### # ##### ###### ### #####'# #### ##
* ######### ### ######### ## ## ######## ####### ## ###.
* #
* ## ### ### ##### ## ## ######## #### #####, ## ## ########## #### 
* ######### ## ##### ## ### #########:
* ###
* ############## ########### = ### ##############(############);
* /###
* #### ##### ## ###########.#####(). ### #### ## # #### ####
* ##########, ## ## #### ##### #### ## ### #######
* ##############.##############(####################).
*
* #/## ##### ####, ####:
* ### ## ###### #### ## #######.
*/

public class PrintUtilities implements Printable {
private Component componentToBePrinted;

/* public static void printComponent(Component c, int device) {
new PrintUtilities(c).print();
}*/

public PrintUtilities(Component componentToBePrinted) {
this.componentToBePrinted = componentToBePrinted;
}

public void print(int device) {
PrinterJob printJob = PrinterJob.getPrinterJob();
printJob.setPrintable(this);
try {
printJob.setPrintService(printJob.lookupPrintServices()[device]);
printJob.setCopies(1);
printJob.print();
} catch(PrinterException pe) {
System.out.println("Error printing: " + pe);
}
}

public int print(Graphics g, PageFormat pageFormat, int pageIndex) {
if (pageIndex 0) {
return(NO_SUCH_PAGE);
} else {
Graphics2D g2d = (Graphics2D)g;
g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
disableDoubleBuffering(componentToBePrinted);
componentToBePrinted.paint(g2d);
enableDoubleBuffering(componentToBePrinted);
return(PAGE_EXISTS);
}
}

/** The speed and quality of printing suffers dramatically if
* any of the containers have double buffering turned on.
* So this turns if off globally.
*/
public static void disableDoubleBuffering(Component c) {
RepaintManager currentManager = RepaintManager.currentManager(c);
currentManager.setDoubleBufferingEnabled(false);
}

/** Re-enables double buffering globally. */

public static void enableDoubleBuffering(Component c) {
RepaintManager currentManager = RepaintManager.currentManager(c);
currentManager.setDoubleBufferingEnabled(true);
}
}------------------------
An Example of use:
import java.awt.*;
import java.awt.print.*;
import java.io.*;
import javax.swing.*;

public class PrintExample {
public static void main(String[] args) {

JFrame F = new JFrame() {
public void paint(Graphics g) {
g.drawString("Printing a simple line!",20,20);
g.drawString("I hope this was useful",20,40);
}
}; 

PrintUtilities printing = new PrintUtilities(F);
Object[] array = PrinterJob.getPrinterJob().lookupPrintServices();
for (int i=0; iarray.length;i++) System.out.println(i+" : "+array);
System.out.print("Choose Printer device#: ");
int device = askInteger();
printing.print(device);
}

private static int askInteger() {
InputStreamReader ip = new InputStreamReader(System.in);
BufferedReader br = new BufferedReader(ip);
try {
while(!false) {
String read = br.readLine();
try {
return Integer.parseInt(read);
} catch (NumberFormatException ex) {
System.out.print("Write an integer please ");
}
}
} catch (IOException exception) {
return -1;
}
}
}
