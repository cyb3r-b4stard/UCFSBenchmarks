import java.util.ArrayList;
import static org.junit.Assert.*;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
/**
 * #### ##### ######## ###### ### ####### ######## ## # ####.
 * 
 * @###### ####### #######, ####### ######, ### ######
 * @####### #
 */

public class Bank
{
    private String bankName;      
    private String bankManager;   
    private double interestRate;  
    private ArrayList<BankAccount> bankAccounts;
    /**
     * Constructor for objects of class Bank.
     * 
     * The data passed in as parameters is used to initialise the instance fields: bankName, bankManager and interestRate.  
     * 
     * For each instance field:
     *     # the data passed in as a parameter is validated to ensure that it conforms to the rules identified above.
     *     # if the data passed in is valid, the instance field is updated.
     *     # if the data passed in is invalid, a default value is given to the instance field and a message is printed out the terminal
     *       letting the user know that a default value has been supplied.
     */
    public Bank(String ibankName, String ibankManager, double iInterestRate)
    {
        if ( ibankName.length() <=15 )
        { 
            bankName = ibankName;
        }
        else
        {
            bankName = ibankName.substring(0,15); 
        }
        
        if ( ibankManager.length() <=20 )
        { 
            bankManager = ibankManager;
        }
        else 
        {
            bankManager = ibankManager.substring(0,20);
        }
   
        if ((iInterestRate >= 0 ) && (iInterestRate <= 100))
        {
            interestRate = iInterestRate;
        }
        else
        {
            interestRate = 0;
        }
        bankAccounts = new ArrayList<BankAccount>();
}
   
      public void addBankAccount(BankAccount bankAccount)
      {
         bankAccounts.add (bankAccount);    
      }
    
      public String listbankAccounts(String str)
      {
           if (bankAccounts.size() > 0)
                  for (BankAccount bankaccount: bankAccounts)
                 {
                    str= str + bankaccount + "/n";
                 }
                 return str;
           else
               {
                   return "No Bank Accounts";  
                }
      }
    
      public ArrayList<BankAccount> getbankAccounts()
       {
           return bankAccounts;
       }
       
      public String listAccountsMaxBalance (String str, double maxBalance)
    {
        if (bankAccounts.size() > 0)
        {
             for (BankAccount bankaccount: bankAccounts)
             {
                 if (bankaccount.getBalance()<= maxBalance)
                 { 
                     str = str + bankaccount + "/n";
                 }
                 else
                 {
                     return str;
                 }
          
             }
        }
        
    }
        
        
    
    
     
        
        
        
        
        
        
        /**
     * @return the bank name.
     */
    public String getBankName()
    {
        return bankName;
    }
    
    /**
     * This setter updates the instance field, bankName, based on the rules defined above.
     */
    public void setBankName(String nbankName)
    {
       if ( nbankName.length() <=15 )
       { 
           bankName = nbankName;
       }
       else
       {
           System.out.println ("bankName field is not updated, as the passed data was invalid:  " + nbankName);
       }
    }
    
    /**
     * @return the bank manager's name.
     */
    public String getBankManager()
    {
        return bankManager;
    }
    
    /**
     * This setter updates the instance field, bankManager, based on the rules defined above.
     */
    public void setBankManager(String nbankManager)
    {
        if ( nbankManager.length() <=20 )
        { 
            bankManager = nbankManager;
        }
        else
        {
            System.out.println ("bankManager field is not updated, as the passed data was invalid:  " + nbankManager);
        }
    }
    
    /**
     * @return the interest rate
     */
    public double getInterestRate()
    {
        return interestRate;
    }
    
    /**
     * This setter updates the instance field, interestRate, based on the rules defined above.
     */
    public void setInterestRate(double nInterestRate)
    {
        if ((nInterestRate >= 0 ) && (nInterestRate <= 100))
        {
            interestRate = nInterestRate;
        }
        else
        {
            System.out.println ("interestRate field is not updated, as the passed data was invalid:  " + nInterestRate);
        }
    }
   
    /**
     * @return the String version of the bank object.  The returned String contains labels for each of the instance fields and is formatted like so:
     *      
     *     Bank Name: AIB
     *         Bank Manager:  Joe Money
     *         Interest Rate: 3  
     */
    public String toString()
    {
        return ( "Bank Name: " +bankName + "\n    Bank Manager:  " + bankManager + "\n    Interest Rate: "+ interestRate);
    }  
 }
  

