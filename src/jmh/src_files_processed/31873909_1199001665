


public class GRAPH
{
    int[][]Kanten;
       KNOTEN[]Knotenliste;
    int KnotenAnzahl=0;  
    int[]Reihenfolge;
    public Reihenfolge = new int[10];
    public int aktuell;
    public int c = 0;
    public GRAPH()
    {
       
        Kanten = new int[10][10];
        for(int i=0;i<10;i++){
            for(int c=0;c<10;c++){
                Kanten[i][c]=0;
            }
            
        }
    }
    public void Kanteneinfuegen(int x, int y, int c){
        if((-1<x)&&(-1<y)){
            if((x>KnotenAnzahl-1)&&(y>KnotenAnzahl-1)){
                Kanten[x][y]=c;
        }
      }
    }
    public void KnotenEinfuegen(String n){
        Knotenliste[KnotenAnzahl]=new KNOTEN(n);
        KnotenAnzahl++;
    }
    public boolean Kantenexistenz(int x, int y){
       if(Kanten[x][y]==1){
           return true;
        }else{
            return false;
        }

    }
    public void Ausgeben(){
        for(int i=0;i<10;i++){
            for(int j=0;j<10;j++){
            System.out.print(+ Kanten[i][j]);
           }
           System.out.println();
        }
    }
    public void KnotenListeAusgeben(){
         for(int j=0;j<10;j++){
            System.out.print(Knotenliste[j]);
           }
    }
    public void zuruck(){
            for(int i=0;i<10;i++){
                Knotenliste[i].unbesucht();
            
        }
    }
    public boolean test(int i){
        if( Knotenliste[i].test()== false){
            return false;
        }else{
            return true;
        }
    }
    public void TiefenSuchen(){
        zuruck();
        for(int i = 0;i<10;i++){
        if(Kanten[aktuell][i]==1){
            if(Knotenliste[i].test()== false){
                c++;
                aktuell=i;
                Reihnfolge[c]= i;
                
            }else{
                
            }
        }else{
            
        }
    }
        
    }
}