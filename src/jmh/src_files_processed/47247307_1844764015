
/**
 * ##### # ########### ## ##### ######## ####.
 * 
 * @###### (####### #### ########) 
 * @## ###### (########)
 */
public class Aircraft
{
    private double TotalPassengerWeight;
    private double Revenue;
    private int Seats;
    private final int MaximumPassengers;
    private final double MaximumWeight;
    private final String Route;
    private ArrayList<Passenger> ListPassengers;

    /**
     * Constructor for objects of class Aircraft
     */
    public Aircraft(String Route, int MaximumPassengers, double MaximumWeight){
     this.MaximumPassengers = MaximumPassengers;
     this.MaximumWeight = MaxmimumWeight;
     this.Route = Route;         
     ListPassengers = new ArrayList<Passenger>;
    }
    
    public void ShowListPassenger(){
        for(Passenger currentPassenger : ListPassengers){
            System.out.println( currentPassenger.toString());
        }
    }
    
    public boolean addPassenger(Passenger addedPassenger){
        double addedWeight = (this.TotalPassengerWeight + addedPassenger.getWeight());
        int addedSeats = (this.Seats ++);
        if ( (addedWeight <= this.MaximumWeight) && (addedSeats <= this.MaximumPassengers) ){
            ListPassengers.add( addedPassenger );
            return true;
        }
        else{ 
            return false;
        }
    }
    
    public String findPassenger( int passengerNumber){
        for( Passenger currentPassenger : ListPassenger ){
            if ( passengerNumber == currentPassenger.getpassengerNumber()){
                return currentPassenger.toString();]
            }
        }
        return null;
    }
    
    public void removePassenger(int passengerNumber){
        int i = -1
        boolean j = false;
        for( Passenger currentPassenger : ListPassenger ){
            if (passengerNumber == currentPassenger.getPassengerNumber()){
                if(passengerNumber >=1000){
                    passengerNumber = (passengerNumber - 1000);
                }
                i =  
        
        
                
                
                    
        
    
     