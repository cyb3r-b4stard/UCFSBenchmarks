
/**
 * ##### # ########### ## ##### ######### ####.
 * 
 * @###### ####### ####### 
 * @####### #/##/##
 */
import java.util.Arrays;
import java.lang.Double;
public class Transcript
{
   private Course[] trs = new Course[1];
    private int count = 0;
    double gradePoints = 0;
    int totalCredits = 0;
  
    
 public Transcript()
 {
    
 }
    
    /**
 * Adds a course to the transcript
 * 
 */public void addToTranscript(Course c) {
        if (count >= trs.length)
           increaseSize();
        trs[count++] = c;
}
    
     /**
     * Gets the GPA of the student
     *
     * @return the GPA of the student
     */
    public double getGPA()
    {
        for (int i=0; i<trs.length; i++){
            gradePoints = gradePoints + trs[i].getNumericGrade();
            totalCredits = totalCredits + trs[i].getCredits();
    }
    return Double.parseDouble(gradePoints / totalCredits);
}
    
     /**
     * Gets the number of courses for the student
     *
     * @return the number of courses for the student
     */
    public int getNumCourses()
    {
        return parseInt(courseNum);
    }
    
    /**
     * Gets the total credits for the student
     * 
     * @return the total credits of the student
     */
    public int getTotalCredits() 
    {
        return (credits * parseInt(courseNum));
    }
    
    /**
 * Converts the collection to a String representation so it can be printed on the screen.
 * 
 */
public void Print(){
    System.out.println("Here is your transcript info");
    for(int i = 0; i < trs.length; i++){
        System.out.println(trs[i].getCourseNum() + Integer.toString(totalCredits) + trs[i].getLetterGrade + getGPA());
}
}

public int getNumCourse(){
    return count;
}

/**
 * Updates a grade for a course in the transcript
 * 
 * @param courseNum, grade
 */
public void update(String courseNum, String grade) 
{
        int n = 0;
   for(n=0; n<trs.length; n++){
       if (grade=("X") || grade=("x")){
           trs[n]=0;}
       else if (trs[n].getCourseNum().equals(courseNum)){
           trs[i].setLetterGrade(grade);
           
}
}
}

private void increaseSize() {
        Course trs2[]  = new Course[2 * count + 1];  
        System.arraycopy(trs, 0, trs2, 0, count);  
        trs = trs2; 
    }
}