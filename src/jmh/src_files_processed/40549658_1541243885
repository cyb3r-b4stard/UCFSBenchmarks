/**
 * ##### ##### ######## #### ## ########## #### ### ##### #####
 * @###### ######### #####
 * @####### ######## ##, ####
 * 
 */
import java.util.*;

public abstract class BSTUtilities
{
    /**
     * comment completely
     */
    public static boolean contains(TreeNode t, Comparable x, TreeDisplay display)
    {
        if (t == null)  
            return false;
        Comparable value = <Comparable>t.getValue();
        int c = t.getValue().compareTo(x);
        display.visit(t);
        if (c == 0)
            return true;
        else if (c > 0)
            return contains(t.getRight(), x,display);
        else if (c < 0)
            return contains(t.getLeft(), x, display);
        return false;
    }
    /**
     * comment completely
     */
    public static TreeNode insert(TreeNode t, Comparable x, TreeDisplay display)
    {
        throw new RuntimeException("write me");
        

    }
    /**
     * comment completely
     */
    private static TreeNode deleteNode(TreeNode t, TreeDisplay display)
    {
       throw new RuntimeException("write me");
        
    }
    /**
     * comment completely
     */
    public static TreeNode delete(TreeNode t, Comparable x, TreeDisplay display)
    {
        throw new RuntimeException("write me");
                   
    }

}