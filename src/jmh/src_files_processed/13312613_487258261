import java.util.*;

/**
 * ###### ### ############ ### #######.
 * 
 * @###### ##### ####
 * @####### ##.##.####
 */
public class Bild {
    
    private String titel;
    private int[][] bild;
    
    /**
     * Erzeuge ein neues leeres Bild mit dem Titel "Kein Bild".
     */
    public Bild() {
        this("Kein Bild", null);
    }
    
    /**
     * Erzeuge ein neues Bild mit dem gegebenen Titel und den Bilddaten.
     * 
     * @param titel die Titel des Bildes
     * @param bild die Bilddaten
     */
    public Bild(String titel, int[][] bild) {
        this.titel = titel;
        this.bild = bild;
    }

    /**
     * Der Titel des Bildes.
     * 
     * @return der Titel des Bildes
     */
    public String gibTitel() {
        return titel + " (" + gibBreite() + " x " + gibHoehe() + ")";
    }
    
    /**
     * Die Breite des Bildes. Falls kein Bild gesetzt worden ist, gibt die Methode 0 zurück.
     * 
     * @return die Bildbreite, oder 0, falls kein Bild gesetzt worden ist.
     */
    public int gibBreite() {
        if (bild != null){
            return bild.length;
        } else {
            return 0;
        }
    }
    
    /**
     * Die Höhe des Bildes. Falls kein Bild gesetzt worden ist, gibt die Methode 0 zurück.
     * 
     * @return die Bildhöhe, oder 0, falls kein Bild gesetzt worden ist.
     */
    public int gibHoehe() {
        if (bild != null && bild[0] != null){
            return bild[0].length;
        } else {
            return 0;
        }
    }

    /**
     * Die Intensität an der gegebenen Spalte und Zeile. Falls die Angaben bezüglich Zeile oder Spalte ungültig sind, wird 0 zurückgegeben. 
     * 
     * @param spalte die Spalte
     * @param zeile die Zeile
     * @return der Intensitätswert zwischen 0 (schwarz) und 255 (weiss), oder 0 bei ungültigen Zeilen-/Spaltenwerten 
     */
    public int gibIntensitaetswert(int spalte, int zeile) {
        if (0 <= spalte && spalte < gibBreite() && 0 <= zeile && zeile < gibHoehe()) {
            return bild[spalte][zeile];
        } else {
            return 0;
        }
    }

    /**
     * Die Bilddaten des Bildes.
     * 
     * @return die Bilddaten oder null, falls kein Bild gesetzt wurde.
     */
    public int[][] gibBilddaten() {
        return bild;
    }
    
    /**
     * Bild kopieren
     *
     * @return eine Kopie des Bildes. Als Titel wird an den Originalnamen die Endung " - Kopie" angehängt
     */
    public Bild erstelleKopie() {
        int[][] b = new int[gibBreite()][gibHoehe()];
        for (int spalte = 0; spalte < gibBreite(); spalte++) {
            for (int zeile = 0; zeile < gibHoehe(); zeile++) {
                b[spalte][zeile] = bild[spalte][zeile];
            }
        }
        return new Bild(gibTitel() + " - Kopie", b);
    }
    
    /**
     * Aufgabe: Histogramm berechnen
     * 
     * @return das Histogramm 
     */
    public int[] gibHistogramm() {
     
        for (int spalte = 0; spalte < bild.length; spalte++) {
            for (int zeile = 0; zeile < bild[0].length; zeile++) {
               bild[spalte][zeilte];
            }
        }
        return null;
    }

    /**
     * Aufgabe: Invertieren 
     */
    public void a01_invertieren() {
    }

    /**
     * Aufgabe: Aufhellen um einen Offset anheben
     * 
     * @param offset der Offset, um den die Intensitaetswerte angehoben werden
     */
    public void a02_aufhellen(int offset) {
    }

    /**
     * Aufgabe: Kontrast um einen Faktor erhöhen 
     * 
     * @param faktor der Faktor, um den die Intensitaetswerte angehoben werden
     */
    public void a03_kontrastErhoehen(double faktor) {
    }

    /**
     * Aufgabe: Kontrast optimieren 
     */
    public void a04_kontrastOptimieren() {
    }

    /**
     * Aufgabe: Schwellwertverfahren 
     * 
     * @param schwellwert der Schwellwert, der als Grenze genommen wird
     */
    public void a05_schwellwertVerfahren(int schwellwert) {
    }

    /**
     * Aufgabe: Mittelwertfilter 3x3
     * 
     * @param eingangsbild das Bild, das gefiltert wird
     */
    public void a06_mittelwertfilter(Bild eingangsbild) {
    }

    /**
     * Aufgabe: Genereller Linearer Filter mit einem Filterkern
     * 
     * @param eingangsbild das Bild, das gefiltert wird
     * @param filter der Filterkern
     */
    public void a07_linearerfilter(Bild eingangsbild, double[][] filter) {
    }

    /**
     * Aufgabe: Medianfilter 3x3
     * 
     * @param eingangsbild das Bild, das gefiltert wird
     */
    public void a08_medianfilter(Bild eingangsbild) {
    }

    /**
     * Aufgabe: Geometrische Transformation: Translation um (dx, dy). Beachten Sie, die Inverse T-1 zu berechnen!
     * 
     * @param eingangsbild das Bild, das veraendert wird
     * @param dx die Verschiebung in horizontaler Richtung
     * @param dy die Verschiebung in vertikaler Richtung
     */
    public void a09_translation(Bild eingangsbild, int dx, int dy) {
    }

    /**
     * Aufgabe: Geometrische Transformation: Rotation. Beachten Sie, dass das Rotationszentrum zuerst in den Ursprung geschoben, dann rotiert und wieder zurueckgeschoben werden muss.
     * 
     * @param eingangsbild das Bild, das veraendert wird
     * @param rotationszentrumSpalte die u-Position des Rotationszentrums
     * @param rotationszentrumZeile die v-Position des Rotationszentrums
     * @param winkel der Rotationswinkel (Achtung in Radian)
     */
    public void a08_rotation(Bild eingangsbild, int rotationszentrumSpalte, int rotationszentrumZeile, double winkel) {
    }

    /**
     * Aufgabe: Verzerren. Twirl-Transformation: Rotation um alpha, die mit dem Abstand vom Zentrum abnimmt 
     * 
     * @param eingangsbild das Bild, das veraendert wird
     * @param rmax der maximale Radius, bis wohin gedreht wird
     * @param alpha der Rotationswinkel (Achtung in Radian)
     */
    public void a09_verzerrenTwirl(Bild eingangsbild, int rmax, double alpha) {
    }

}