import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.text.*;

/**
 * # ##### #### ########## # #######.  #### ##### ######## #### 
 * ############# ### ###### ### ####### ## ### ############# ##
 * ### ####### #####.  
 * 
 * ######### ####### ######### ## ########## ####-####
 * @###### ####### ####### #######@##.######.###
 */
public class Picture extends SimplePicture 
{
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    super(copyPicture);
  }
  
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  public void makeSunset()
  {
      Pixel[] pixels = this.getPixels() ;
      for (Pixel pixel : pixels) {
          pixel.setBlue((int) (0.7 * pixel.getBlue()));
          pixel.setGreen((int) (0.7 * pixel.getGreen()));
        }
    }
    
    public void makeSunset(0.7)
    {
        Pixel[] pixels = this.getPixels();
        for (int i = 0 ; i < pixels.length ; i++) {
            Pixel pixel = pixels[i] ;
            pixel.setBlue((int) (0.7 * pixel.getBlue()));
            pixel.setGreen((int) (0.7 * pixel.getGreen()));
        }
    }
} 
 