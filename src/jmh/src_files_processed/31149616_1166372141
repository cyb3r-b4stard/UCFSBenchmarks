
/**
 * ##### # ########### ## ##### ##### ####.
 * 
 * @###### ##### ###### 
 * @####### (# ####### ###### ## # ####)
 */
public class Merge
{
  private ArrayList <Integer> myArray;
  
    public Merge()
    {
        fillArrayWithInts();
        
    }
void mergeSort(ArrayList <Comparable> a, int first, int last)
{
   if (sublist has only one value)
   {
      do nothing
      
   } 
   else if (sublist has two values)
   {
      sort it if necessary
   }
   else
   { 
      Find midpoint of current sublist
      Call mergeSort and process left sublist
      Call mergeSort and process right sublist
      merge left and right sublists
   } 
}
  public void fillArrayWithInts(){
    
    System.out.print("How many numbers do you wish to generate? ");
    int numInts = console.nextInt();
    System.out.print("Largest integer to generate? ");
    int largestInt = console.nextInt();
    
    Random randGen = new Random();
    myArray = new ArrayList <Integer>();

    for (int loop = 0; loop < numInts; loop++)
    {
      Integer x = new Integer(randGen.nextInt(largestInt) + 1);
      myArray.add(x);
    }
  }
}

