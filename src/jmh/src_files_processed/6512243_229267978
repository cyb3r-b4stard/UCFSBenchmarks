
/**
 * ## ##### ############ ########## ## ##### ####### #### ## ##### ##
 * #### ####### ## ## #####. ## ##### ####### ##### # #######. ## #####
 * ### ##### ## ##:## (##########) # ##:## (## ###### ##### ## ##########)
 * ### ############ ##### ########## # ####### ##### ####### ### #
 * 
 * ## ##### ### ##### ###### "#######" (### ##### ### ###### ######) ####
 * ###### # ######### ############# ## #####. #### ## #### ## ## ###### 
 * ##### ## ## #####: ### ##### ## ########### ###### ### ####### ### ### 
 * ###### ######## # ######## ## ##### ####.
 * 
 * @###### ####### ####### ### ##### #. ######
 * @####### ####.##.##
 */
public class VisorDeReloj
{
    private VisorDeNumeros horas;
    private VisorDeNumeros minutos;
    private String cadVisor;    
    
    /**
     * Constructor de objetos de VisorDeReloj. Este constructor
     * crea un nuevo reloj puesto en hora con el valor 00:00.
     */
    public VisorDeReloj()
    {
        horas   = new VisorDeNumeros(24);
        minutos = new VisorDeNumeros(60);
        actualizarVisor();
    }

    /**
     * Constructor de objetos de VisorDeReloj. Este constructor
     * crea un nuevo reloj puesto en hora con el valor especificado 
     * por los parametros.
     */
    public VisorDeReloj(int hora, int minuto)
    {
        horas   = new VisorDeNumeros(24);
        minutos = new VisorDeNumeros(60);
        ponerEnHora(hora, minuto);
    }

    /**
     * Este mÃ©todo debe invocarse una vez por cada minuto; hace
     * que el visor visor avance un minuto.
     */
    public void ticTac()
    {
        minutos.incrementar();
        if(minutos.getValor() == 0) {  
            horas.incrementar();
        }
        actualizarVisor();
    }

    /**
     * Pone en hora el reloj con la hora y los minutos especificados.
     */
    public void ponerEnHora(int hora, int minuto)
    {
        horas.setValor(hora);
        minutos.setValor(minuto);
        actualizarVisor();
    }

    /**
     * Retorna la hora actual del visor en ele formato HH:MM.
     */
    public String getHora()
    {
        return cadVisor;
    }
    
    /**
     * Actualiza la cadena interna que representa al visor.
     */
    private void actualizarVisor()
    {
        int horas1;
        horas1 = horas.getValorDelVisor - 12
        if (horas.getValorDelVisor() > 12 ) {horas1 = horas.getValorDelVisor - 12;}
        else {horas1 = horas.getValorDelVisor;}
        cadVisor = horas1 + ":" + 
                        minutos.getValorDelVisor();
    }
}