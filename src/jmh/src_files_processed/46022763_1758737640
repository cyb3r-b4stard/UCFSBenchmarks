import java.util.ArrayList;
/**
 * ##### # ########### ## ##### ############ ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 * 
 * ##########: ######## ### ############ ##### ## ### ######## ##### ########. ### ### ###########
 * ####### ## ##### ### ###### ## ######.
 */
public class MovieTheater
{
    private ArrayList<Movie> nowShowing;
    private String name;
     
     
    
    public MovieTheater(String n) {
        name = n;
        nowShowing = new ArrayList<Movie>();
}
    
    public String toString() {
        String toBeReturned = "";
        for (int i = 0; i < nowShowing.size(); i++) {
            Movie m = nowShowing.get(i);
            String title = m.getTitle();
            String lead = m.getLead().getName();
            String director = m.getDirector().getName();
            int sales = m.getSales();
            toBeReturned += "\n" + title + " starring " + lead + " directed by " + director + " - $ " + sales;
        }
        
    return toBeReturned;
     /* A toString that returns a String that contains the title of the theater and
     * all nowShowing's movie titles, lead actors, directors and includes each movie's sales
     * Format it neatly. For example:
     * MovieTitle starring LeadActor directed by Director - $10000000
     * MovieTitle starring LeadActor directed by Director - $5000000
     * 
     * Hint: \n will insert a new line in a string. For example: "hi \nhi" would format as:
     * hi
     * hi
     */
}
    
public void addMovie(Movie b) {
    nowShowing.add(b);
}
public void removeMovie(int x) {
    nowShowing.remove(x);
    if ((x >= nowShowing.size()) || (x < 0)) {
        System.out.println("Sorry, try again.");
    }
    /**
     * A method called removeMovie that removes the movie at the given index from nowShowing
     * if the index is not valid, this method should print an error message
     */
}
public String findWorstMovie() {

    for (int i = 0; i < nowShowing.getSales(); i++) {
        if (nowShowing.getSales() < 120) {
    return nowShowing.getTitle();
}
    }
    /**
     * A method called findWorstMovie that finds and returns the title of the movie with the least
     * amount of sales in nowShowing
     */
}
    
    /**
     * A method called findBestMovie that finds and returns the title of the movie with the most
     * amount of sales in nowShowing
     */
    
    
    /**
     * A method called findMoviesByLead that returns a String that is a list of all movie titles starring
     * a given lead actor in nowShowing
     */
    
    
    /**
     * A method called findMoviesByDirector that returns a String that is a list of all movies 
     * directed by a given director
     */
    
    
    /**A method called classicMovies that returns a String of all movies titles in nowShowing that have 
     * either a lead actor or a director who is deceased
     */
    
    
     