 
/**
 * ##### # ########### ## ##### #### ####.
 * 
 * @###### (#### ####) 
 * @####### (# ####### ###### ## # ####)
 */
import java.util.*;
import java.io.*;
public class Grid
{
    private int x;
    private int y;
    private int[][] grid;

    /**
     * Constructor for objects of class Grid
     */
    public Grid(int xSize,int ySize)
    {
        x = xSize;
        y = ySize;
        grid = new int[x][y];
        for(int i=0;i<x;i++) {
            for(int j=0;j<y;j++) {
                grid[i][j]=0;
            }
        }
    }
    
    public int[][] getArray()
    {
        return grid;
    }
    
    public void printGrid() {
        for(int i=0;i<grid.length;i++) {
            System.out.println("");
            for(int j=0;j<grid[i].length;j++) {
                if(grid[i][j]==1) {
                    System.out.print("x");
                }
                else{
                   System.out.print("o");
                }
                System.out.print(" ");
            }
        }
        System.out.println("");
    }
    
    public void printGridToFile() {
        PrintWriter out = new PrintWriter(new FileWriter("K:\\location\\outputfile.txt"))); 
out.print("Hello "); 
out.println("world"); 
out.close();
        
    }
    
    public void placeQueen(int i, int j){
        grid[i][j]=1;
    }
    
    public int[] findQueens(){
        ArrayList<Integer> qList = new ArrayList<Integer>();
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[i].length;j++) {
                if(grid[i][j] == 1){
                    qList.add(j);
                }
            }
        }
        int[] qArr = new int[qList.size()];
            for(int i=0;i<qArr.length;i++) {
                qArr[i] = qList.get(i);
            }
        return qArr;
    }
    
    public boolean isSuitable(int i, int j) {
        for(int k=0;k<this.findQueens().length;k++) {
            int falseCounter = 0;
            if(i == k){
                falseCounter++;
            }
            if(j == this.findQueens()[k]) {
                falseCounter++;
            }
            if(Math.abs((this.findQueens())[k]-j) == Math.abs(k-i)) {
                falseCounter++;
            }
            if(falseCounter==1) {
                return false;
            }
        }
        return true;
    }
    
    public void clearGrid(){
        for(int i=0;i<grid.length;i++) {
            for(int j=0;j<grid[i].length;j++) {
                grid[i][j] = 0;
                }
            }
    }
    
    public void clearRow(int r){
        for(int j=0;j<grid.length;j++) {
                grid[r][j] = 0;
                }
    }
    
    public void findQArrange() {
            for(int i=0;i<this.getArray().length;i++) {
                for(int j=0;j<(this.getArray())[i].length;j++) {
                    if (this.isSuitable(i,j)){
                        this.placeQueen(i,j);
                    }
                }
            }
            
            this.printGrid();
    }
    
    public boolean isValid() {
        for(int i=0;i<this.findQueens().length;i++){
            if(!this.isSuitable(i,this.findQueens()[i])) {
               return false;
            }
        }
        return true; 
    }
    
    public void config() {
        this.placeQueen(0,5);
        this.placeQueen(1,0);
        this.placeQueen(2,4);
        this.placeQueen(3,1);
        this.placeQueen(4,7);
        this.placeQueen(5,2);
        this.placeQueen(6,6);
        this.placeQueen(7,3);
        this.printGrid();
    }
    
    public boolean rightShift(int q) {
        if(this.findQueens()[q]==grid.length-1) {
            grid[q][grid.length-1]=0;
            grid[q][0]=1;
            return true;
        }
        else {
        int tempY = this.findQueens()[q];
        grid[q][this.findQueens()[q]+1]=1;
        grid[q][tempY]=0;
        return false;
        }
    }
    

}