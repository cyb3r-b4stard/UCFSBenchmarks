
public class TicTacToe {



    private char[][] board; 

    private char currentPlayerMark;



    public TicTacToe() {

        board = new char[3][3];

        currentPlayerMark = 'x';

        initializeBoard();

    }






    public void initializeBoard() {




        for (int i = 0; i < 3; i++) {




            for (int j = 0; j < 3; j++) {

                board[i][j] = '-';

            }

        }

    }






    public void printBoard() {
        29
        System.out.println("-------------");
        30

        31
        for (int i = 0; i < 3; i++) {
            32
            System.out.print("| ");
            33
            for (int j = 0; j < 3; j++) {
                34
                System.out.print(board[i][j] + " | ");
                35
            }
            36
            System.out.println();
            37
            System.out.println("-------------");
            38
        }
        39
    }
    40

    41

    42
    43
    44
    public boolean isBoardFull() {
        45
        boolean isFull = true;
        46

        47
        for (int i = 0; i < 3; i++) {
            48
            for (int j = 0; j < 3; j++) {
                49
                if (board[i][j] == '-') {
                    50
                    isFull = false;
                    51
                }
                52
            }
            53
        }
        54

        55
        return isFull;
        56
    }
    57

    58

    59
    60
    61
    public boolean checkForWin() {
        62
        return (checkRowsForWin() || checkColumnsForWin() || checkDiagonalsForWin());
        63
    }
    64

    65

    66
    67
    private boolean checkRowsForWin() {
        68
        for (int i = 0; i < 3; i++) {
            69
            if (checkRowCol(board[i][0], board[i][1], board[i][2]) == true) {
                70
                return true;
                71
            }
            72
        }
        73
        return false;
        74
    }
    75

    76

    77
    78
    private boolean checkColumnsForWin() {
        79
        for (int i = 0; i < 3; i++) {
            80
            if (checkRowCol(board[0][i], board[1][i], board[2][i]) == true) {
                81
                return true;
                82
            }
            83
        }
        84
        return false;
        85
    }
    86

    87

    88
    89
    private boolean checkDiagonalsForWin() {
        90
        return ((checkRowCol(board[0][0], board[1][1], board[2][2]) == true) || (checkRowCol(board[0][2], board[1][1], board[2][0]) == true));
        91
    }
    92

    93

    94
    95
    private boolean checkRowCol(char c1, char c2, char c3) {
        96
        return ((c1 != '-') && (c1 == c2) && (c2 == c3));
        97
    }
    98

    99

    100
    101
    public void changePlayer() {
        102
        if (currentPlayerMark == 'x') {
            103
            currentPlayerMark = 'o';
            104
        }
        105
        else {
            106
            currentPlayerMark = 'x';
            107
        }
        108
    }
    109

    110

    111
    112
    public boolean placeMark(int row, int col) {
        113

        114
        115
        if ((row >= 0) && (row < 3)) {
            116
            if ((col >= 0) && (col < 3)) {
                117
                if (board[row][col] == '-') {
                    118
                    board[row][col] = currentPlayerMark;
                    119
                    return true;
                    120
                }
                121
            }
            122
        }
        123

        124
        return false;
        125
    }
    126
}
